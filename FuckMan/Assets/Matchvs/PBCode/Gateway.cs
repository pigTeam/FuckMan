// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Matchvs {

  /// <summary>Holder for reflection information generated from gateway.proto</summary>
  public static partial class GatewayReflection {

    #region Descriptor
    /// <summary>File descriptor for gateway.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GatewayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1nYXRld2F5LnByb3RvEgZzdHJlYW0aD2Vycm9yY29kZS5wcm90byJlCghT",
            "cGVlZFJlcRIOCgZnYW1lSUQYASABKA0SDgoGdXNlcklEGAIgASgNEhIKCnNk",
            "a1ZlcnNpb24YAyABKAkSEwoLZ2FtZVZlcnNpb24YBCABKAkSEAoIZWNob0Rh",
            "dGEYBSABKAwiPwoIU3BlZWRSc3ASIQoGc3RhdHVzGAEgASgOMhEuc3RyZWFt",
            "LkVycm9yQ29kZRIQCghlY2hvRGF0YRgCIAEoDCJ5CghMb2dpblJlcRIOCgZn",
            "YW1lSUQYASABKA0SDgoGYXBwS2V5GAIgASgJEhAKCGRldmljZUlEGAMgASgJ",
            "EgwKBHNpZ24YBCABKAkSDgoGc2RrVmVyGAUgASgJEg4KBnZlbmRvchgGIAEo",
            "DRINCgV0b2tlbhgHIAEoCSJkCghMb2dpblJzcBIhCgZzdGF0dXMYASABKA4y",
            "ES5zdHJlYW0uRXJyb3JDb2RlEhIKBnJvb21JRBgCIAEoBEICMAESDQoFc2V0",
            "SUQYAyABKA0SEgoGdGVhbUlEGAQgASgEQgIwASIyCgxIZWFydGJlYXRSZXES",
            "DgoGZ2FtZUlEGAEgASgNEhIKBnJvb21JRBgCIAEoBEICMAEiLwoMSGVhcnRi",
            "ZWF0UnNwEg4KBmdhbWVJRBgBIAEoDRIPCgdnc0V4aXN0GAIgASgFIi4KCUxv",
            "Z291dFJzcBIhCgZzdGF0dXMYASABKA4yES5zdHJlYW0uRXJyb3JDb2RlIjkK",
            "FlNldFJlY29ubmVjdFRpbWVvdXRSZXESDgoGdXNlcklEGAEgASgNEg8KB3Rp",
            "bWVvdXQYAiABKAUiOwoWU2V0UmVjb25uZWN0VGltZW91dFJzcBIhCgZzdGF0",
            "dXMYASABKA4yES5zdHJlYW0uRXJyb3JDb2RlIj0KGlNldFRlYW1SZWNvbm5l",
            "Y3RUaW1lb3V0UmVxEg4KBnVzZXJJRBgBIAEoDRIPCgd0aW1lb3V0GAIgASgF",
            "Ij8KGlNldFRlYW1SZWNvbm5lY3RUaW1lb3V0UnNwEiEKBnN0YXR1cxgBIAEo",
            "DjIRLnN0cmVhbS5FcnJvckNvZGUiJgoIa2V5VmFsdWUSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJIu4BCgtKb2luUm9vbVJlcRImCghqb2luVHlwZRgB",
            "IAEoDjIULnN0cmVhbS5Kb2luUm9vbVR5cGUSJgoKcGxheWVySW5mbxgCIAEo",
            "CzISLnN0cmVhbS5QbGF5ZXJJbmZvEg4KBmdhbWVJRBgDIAEoDRIiCghyb29t",
            "SW5mbxgEIAEoCzIQLnN0cmVhbS5Sb29tSW5mbxIeCgR0YWdzGAUgAygLMhAu",
            "c3RyZWFtLmtleVZhbHVlEg8KB2NwUHJvdG8YBiABKAwSKgoMd2F0Y2hTZXR0",
            "aW5nGAcgASgLMhQuc3RyZWFtLldhdGNoU2V0dGluZyKsAQoLSm9pblJvb21S",
            "c3ASIQoGc3RhdHVzGAEgASgOMhEuc3RyZWFtLkVycm9yQ29kZRIhCgV1c2Vy",
            "cxgCIAMoCzISLnN0cmVhbS5QbGF5ZXJJbmZvEiIKCHJvb21JbmZvGAMgASgL",
            "MhAuc3RyZWFtLlJvb21JbmZvEiIKCGJvb2tJbmZvGAQgASgLMhAuc3RyZWFt",
            "LkJvb2tJbmZvEg8KB2NwUHJvdG8YBSABKAwiQAoKUGxheWVySW5mbxIOCgZ1",
            "c2VySUQYASABKA0SEwoLdXNlclByb2ZpbGUYAiABKAwSDQoFc3RhdGUYAyAB",
            "KA0iSwoIQm9va0luZm8SDgoGYm9va0lEGAEgASgJEg8KB2Jvb2tLZXkYAiAB",
            "KAkSDAoEQWRkchgDIAEoCRIQCgh3c3NQcm94eRgEIAEoCSLNAQoIUm9vbUlu",
            "Zm8SEgoGcm9vbUlEGAEgASgEQgIwARIQCghyb29tTmFtZRgCIAEoCRIRCglt",
            "YXhQbGF5ZXIYAyABKA0SDAoEbW9kZRgEIAEoBRIQCghjYW5XYXRjaBgFIAEo",
            "BRISCgp2aXNpYmlsaXR5GAYgASgFEhQKDHJvb21Qcm9wZXJ0eRgHIAEoDBIN",
            "CgVvd25lchgIIAEoDRIgCgVzdGF0ZRgJIAEoDjIRLnN0cmVhbS5Sb29tU3Rh",
            "dGUSDQoFc2V0SUQYCiABKA0iLgoKTm90aWNlSm9pbhIgCgR1c2VyGAEgASgL",
            "MhIuc3RyZWFtLlBsYXllckluZm8iUQoLTm90aWNlTGVhdmUSDgoGdXNlcklE",
            "GAEgASgNEhIKBnJvb21JRBgCIAEoBEICMAESDQoFb3duZXIYAyABKA0SDwoH",
            "Y3BQcm90bxgEIAEoDCJSCgtKb2luT3ZlclJlcRISCgZyb29tSUQYASABKARC",
            "AjABEg4KBmdhbWVJRBgCIAEoDRIPCgdjcFByb3RvGAMgASgMEg4KBnVzZXJJ",
            "RBgEIAEoDSJBCgtKb2luT3ZlclJzcBIhCgZzdGF0dXMYASABKA4yES5zdHJl",
            "YW0uRXJyb3JDb2RlEg8KB2NwUHJvdG8YAiABKAwiSAoOSm9pbk92ZXJOb3Rp",
            "ZnkSEQoJc3JjVXNlcklEGAEgASgNEhIKBnJvb21JRBgCIAEoBEICMAESDwoH",
            "Y3BQcm90bxgDIAEoDCJSCgtKb2luT3BlblJlcRISCgZyb29tSUQYASABKARC",
            "AjABEg4KBmdhbWVJRBgCIAEoDRIOCgZ1c2VySUQYAyABKA0SDwoHY3BQcm90",
            "bxgEIAEoDCJBCgtKb2luT3BlblJzcBIhCgZzdGF0dXMYASABKA4yES5zdHJl",
            "YW0uRXJyb3JDb2RlEg8KB2NwUHJvdG8YAiABKAwiRQoOSm9pbk9wZW5Ob3Rp",
            "ZnkSDgoGdXNlcklEGAEgASgNEhIKBnJvb21JRBgCIAEoBEICMAESDwoHY3BQ",
            "cm90bxgDIAEoDCJTCgxMZWF2ZVJvb21SZXESDgoGdXNlcklEGAEgASgNEg4K",
            "BmdhbWVJRBgCIAEoDRISCgZyb29tSUQYAyABKARCAjABEg8KB2NwUHJvdG8Y",
            "BCABKAwiZgoMTGVhdmVSb29tUnNwEiEKBnN0YXR1cxgBIAEoDjIRLnN0cmVh",
            "bS5FcnJvckNvZGUSEgoGcm9vbUlEGAIgASgEQgIwARIOCgZ1c2VySUQYAyAB",
            "KA0SDwoHY3BQcm90bxgEIAEoDCJZCg5UY3BQcm90b0hlYWRlchIMCgRzaXpl",
            "GAEgASgNEgsKA3NlcRgCIAEoDRILCgNjbWQYAyABKA0SDwoHdmVyc2lvbhgE",
            "IAEoDRIOCgZ1c2VySUQYBSABKA0ifwoMQ29ubkRldGFpbFYyEg4KBnVzZXJJ",
            "RBgBIAEoDRIOCgZnYW1lSUQYAiABKA0SDwoHZmllbGRJRBgDIAEoDRISCgZy",
            "b29tSUQYBCABKARCAjABEhkKDWhlYXJ0QmVhdFRpbWUYBSABKARCAjABEg8K",
            "B3ZlcnNpb24YBiABKA0ifQoGVXNlclYyEg8KB3VzZXJfaWQYASABKA0SDwoH",
            "Z2FtZV9pZBgCIAEoDRITCgt2ZXJzaW9uX3NkaxgDIAEoDRIVCg1jb25uZWN0",
            "aW9uX2lkGAQgASgEEhIKCnNlcnZpY2VfaWQYBSABKA0SEQoJZGV2aWNlX2lk",
            "GAYgASgJIloKFlJvb21OZXR3b3JrU3RhdGVOb3RpZnkSEgoGcm9vbUlEGAEg",
            "ASgEQgIwARIOCgZ1c2VySUQYAiABKA0SDQoFc3RhdGUYAyABKA0SDQoFb3du",
            "ZXIYBCABKA0ilAEKCkNyZWF0ZVJvb20SJgoKcGxheWVySW5mbxgBIAEoCzIS",
            "LnN0cmVhbS5QbGF5ZXJJbmZvEg4KBmdhbWVJRBgCIAEoDRIiCghyb29tSW5m",
            "bxgDIAEoCzIQLnN0cmVhbS5Sb29tSW5mbxIqCgx3YXRjaFNldHRpbmcYBCAB",
            "KAsyFC5zdHJlYW0uV2F0Y2hTZXR0aW5nInkKDUNyZWF0ZVJvb21Sc3ASIQoG",
            "c3RhdHVzGAEgASgOMhEuc3RyZWFtLkVycm9yQ29kZRISCgZyb29tSUQYAiAB",
            "KARCAjABEiIKCGJvb2tJbmZvGAMgASgLMhAuc3RyZWFtLkJvb2tJbmZvEg0K",
            "BW93bmVyGAQgASgNIkUKC0dldFJvb21MaXN0Eg4KBmdhbWVJRBgBIAEoDRIm",
            "Cgpyb29tRmlsdGVyGAIgASgLMhIuc3RyZWFtLlJvb21GaWx0ZXIinAEKClJv",
            "b21GaWx0ZXISEQoJbWF4UGxheWVyGAEgASgNEgwKBG1vZGUYAiABKAUSEAoI",
            "Y2FuV2F0Y2gYAyABKAUSFAoMcm9vbVByb3BlcnR5GAQgASgMEgwKBGZ1bGwY",
            "BSABKAUSIAoFc3RhdGUYBiABKA4yES5zdHJlYW0uUm9vbVN0YXRlEhUKDWdl",
            "dFN5c3RlbVJvb20YByABKAUiVwoOR2V0Um9vbUxpc3RSc3ASIQoGc3RhdHVz",
            "GAEgASgOMhEuc3RyZWFtLkVycm9yQ29kZRIiCghyb29tSW5mbxgCIAMoCzIQ",
            "LnN0cmVhbS5Sb29tSW5mbyKyAQoQR2V0Um9vbUxpc3RFeFJlcRIOCgZnYW1l",
            "SUQYASABKA0SJgoKcm9vbUZpbHRlchgCIAEoCzISLnN0cmVhbS5Sb29tRmls",
            "dGVyEiIKBHNvcnQYAyABKA4yFC5zdHJlYW0uUm9vbUxpc3RTb3J0EiAKBW9y",
            "ZGVyGAQgASgOMhEuc3RyZWFtLlNvcnRPcmRlchIOCgZwYWdlTm8YBSABKAUS",
            "EAoIcGFnZVNpemUYBiABKAUiogIKClJvb21JbmZvRXgSEgoGcm9vbUlEGAEg",
            "ASgEQgIwARIQCghyb29tTmFtZRgCIAEoCRIRCgltYXhQbGF5ZXIYAyABKA0S",
            "EgoKZ2FtZVBsYXllchgEIAEoDRITCgt3YXRjaFBsYXllchgFIAEoDRIMCgRt",
            "b2RlGAYgASgFEhAKCGNhbldhdGNoGAcgASgFEhQKDHJvb21Qcm9wZXJ0eRgI",
            "IAEoDBINCgVvd25lchgJIAEoDRIgCgVzdGF0ZRgKIAEoDjIRLnN0cmVhbS5S",
            "b29tU3RhdGUSFgoKY3JlYXRlVGltZRgLIAEoBEICMAESJAoJd2F0Y2hJbmZv",
            "GAwgASgLMhEuc3RyZWFtLldhdGNoSW5mbxINCgVzZXRJRBgNIAEoDSJsChBH",
            "ZXRSb29tTGlzdEV4UnNwEiEKBnN0YXR1cxgBIAEoDjIRLnN0cmVhbS5FcnJv",
            "ckNvZGUSDQoFdG90YWwYAiABKAUSJgoKcm9vbUluZm9FeBgDIAMoCzISLnN0",
            "cmVhbS5Sb29tSW5mb0V4IlQKCktpY2tQbGF5ZXISEgoGcm9vbUlEGAEgASgE",
            "QgIwARIRCglzcmNVc2VySUQYAiABKA0SDgoGdXNlcklEGAMgASgNEg8KB2Nw",
            "UHJvdG8YBCABKAwiZQoNS2lja1BsYXllclJzcBIhCgZzdGF0dXMYASABKA4y",
            "ES5zdHJlYW0uRXJyb3JDb2RlEg4KBnVzZXJJRBgCIAEoDRISCgZyb29tSUQY",
            "AyABKARCAjABEg0KBW93bmVyGAQgASgNIlUKEEtpY2tQbGF5ZXJOb3RpZnkS",
            "EQoJc3JjVXNlcklEGAEgASgNEg4KBnVzZXJJRBgCIAEoDRIPCgdjcFByb3Rv",
            "GAMgASgMEg0KBW93bmVyGAQgASgNIlAKEEdldFJvb21EZXRhaWxSZXESDgoG",
            "Z2FtZUlEGAEgASgNEhIKBnJvb21JRBgCIAEoBEICMAESGAoQbGF0ZXN0V2F0",
            "Y2hlck51bRgDIAEoDSJdChBHZXRSb29tRGV0YWlsUnNwEiEKBnN0YXR1cxgB",
            "IAEoDjIRLnN0cmVhbS5FcnJvckNvZGUSJgoKcm9vbURldGFpbBgCIAEoCzIS",
            "LnN0cmVhbS5Sb29tRGV0YWlsIrMCCgpSb29tRGV0YWlsEhIKBnJvb21JRBgB",
            "IAEoBEICMAESIAoFc3RhdGUYAiABKA4yES5zdHJlYW0uUm9vbVN0YXRlEhEK",
            "CW1heFBsYXllchgDIAEoDRIMCgRtb2RlGAQgASgFEhAKCGNhbldhdGNoGAUg",
            "ASgFEhQKDHJvb21Qcm9wZXJ0eRgGIAEoDBINCgVvd25lchgHIAEoDRISCgpj",
            "cmVhdGVGbGFnGAggASgNEicKC3BsYXllckluZm9zGAkgAygLMhIuc3RyZWFt",
            "LlBsYXllckluZm8SJAoJd2F0Y2hSb29tGAogASgLMhEuc3RyZWFtLldhdGNo",
            "Um9vbRIlCghicmlnYWRlcxgLIAMoCzITLnN0cmVhbS5CcmlnYWRlSW5mbxIN",
            "CgVzZXRJRBgMIAEoDSJeChJTZXRSb29tUHJvcGVydHlSZXESDgoGZ2FtZUlE",
            "GAEgASgNEhIKBnJvb21JRBgCIAEoBEICMAESDgoGdXNlcklEGAMgASgNEhQK",
            "DHJvb21Qcm9wZXJ0eRgEIAEoDCJxChJTZXRSb29tUHJvcGVydHlSc3ASIQoG",
            "c3RhdHVzGAEgASgOMhEuc3RyZWFtLkVycm9yQ29kZRISCgZyb29tSUQYAiAB",
            "KARCAjABEg4KBnVzZXJJRBgDIAEoDRIUCgxyb29tUHJvcGVydHkYBCABKAwi",
            "TgoSTm90aWNlUm9vbVByb3BlcnR5EhIKBnJvb21JRBgBIAEoBEICMAESDgoG",
            "dXNlcklEGAIgASgNEhQKDHJvb21Qcm9wZXJ0eRgDIAEoDCJiCgxXYXRjaFNl",
            "dHRpbmcSEAoIbWF4V2F0Y2gYASABKA0SFwoPd2F0Y2hQZXJzaXN0ZW50GAIg",
            "ASgIEhQKDHdhdGNoRGVsYXlNcxgDIAEoDRIRCgljYWNoZVRpbWUYBCABKA0i",
            "bAoJV2F0Y2hJbmZvEhIKBnJvb21JRBgBIAEoBEICMAESDQoFc3RhdGUYAiAB",
            "KA0SKgoMd2F0Y2hTZXR0aW5nGAMgASgLMhQuc3RyZWFtLldhdGNoU2V0dGlu",
            "ZxIQCghjdXJXYXRjaBgEIAEoDSJbCglXYXRjaFJvb20SJAoJd2F0Y2hJbmZv",
            "GAEgASgLMhEuc3RyZWFtLldhdGNoSW5mbxIoCgx3YXRjaFBsYXllcnMYAiAD",
            "KAsyEi5zdHJlYW0uUGxheWVySW5mbyJSCghQbGF5Um9vbRIiCghyb29tSW5m",
            "bxgBIAEoCzIQLnN0cmVhbS5Sb29tSW5mbxIiCgZwbGF5ZXIYAiADKAsyEi5z",
            "dHJlYW0uUGxheWVySW5mbyJbChBKb2luV2F0Y2hSb29tUmVxEg4KBmdhbWVJ",
            "RBgBIAEoDRIOCgZ1c2VySUQYAiABKA0SEwoLdXNlclByb2ZpbGUYAyABKAwS",
            "EgoGcm9vbUlEGAQgASgEQgIwASJ8ChBKb2luV2F0Y2hSb29tUnNwEiEKBnN0",
            "YXR1cxgBIAEoDjIRLnN0cmVhbS5FcnJvckNvZGUSIgoIYm9va0luZm8YAiAB",
            "KAsyEC5zdHJlYW0uQm9va0luZm8SDQoFc2V0SUQYAyABKA0SEgoGcm9vbUlE",
            "GAQgASgEQgIwASI6ChNKb2luV2F0Y2hSb29tTm90aWZ5EiMKB3dhdGNoZXIY",
            "ASABKAsyEi5zdHJlYW0uUGxheWVySW5mbyJYChFMZWF2ZVdhdGNoUm9vbVJl",
            "cRIOCgZnYW1lSUQYASABKA0SDgoGdXNlcklEGAIgASgNEhIKBnJvb21JRBgD",
            "IAEoBEICMAESDwoHY3BQcm90bxgEIAEoDCI2ChFMZWF2ZVdhdGNoUm9vbVJz",
            "cBIhCgZzdGF0dXMYASABKA4yES5zdHJlYW0uRXJyb3JDb2RlIjsKFExlYXZl",
            "V2F0Y2hSb29tTm90aWZ5EiMKB3dhdGNoZXIYASABKAsyEi5zdHJlYW0uUGxh",
            "eWVySW5mbyI1Cg5Sb29tT3Zlck5vdGlmeRISCgZyb29tSUQYASABKARCAjAB",
            "Eg8KB2NwUHJvdG8YAiABKAwifwoKQ2hhbmdlUm9sZRIOCgZ1c2VySUQYASAB",
            "KA0SDgoGZ2FtZUlEGAIgASgNEhIKBnJvb21JRBgDIAEoBEICMAESKAoOdGFy",
            "Z2V0Um9vbVR5cGUYBCABKA4yEC5zdHJlYW0uUm9vbVR5cGUSEwoLdXNlclBy",
            "b2ZpbGUYBSABKAwixwEKDUNoYW5nZVJvbGVSc3ASIQoGc3RhdHVzGAEgASgO",
            "MhEuc3RyZWFtLkVycm9yQ29kZRIoCg50YXJnZXRSb29tVHlwZRgCIAEoDjIQ",
            "LnN0cmVhbS5Sb29tVHlwZRIiCghwbGF5Um9vbRgDIAEoCzIQLnN0cmVhbS5Q",
            "bGF5Um9vbRIiCghib29rSW5mbxgEIAEoCzIQLnN0cmVhbS5Cb29rSW5mbxIS",
            "CgZyb29tSUQYBSABKARCAjABEg0KBXNldElEGAYgASgNIrIBChBHZXRXYXRj",
            "aFJvb21zUmVxEg4KBmdhbWVJRBgBIAEoDRImCgpyb29tRmlsdGVyGAIgASgL",
            "MhIuc3RyZWFtLlJvb21GaWx0ZXISIgoEc29ydBgDIAEoDjIULnN0cmVhbS5S",
            "b29tTGlzdFNvcnQSIAoFb3JkZXIYBCABKA4yES5zdHJlYW0uU29ydE9yZGVy",
            "Eg4KBnBhZ2VObxgFIAEoBRIQCghwYWdlU2l6ZRgGIAEoBSJsChBHZXRXYXRj",
            "aFJvb21zUnNwEiEKBnN0YXR1cxgBIAEoDjIRLnN0cmVhbS5FcnJvckNvZGUS",
            "DQoFdG90YWwYAiABKAUSJgoKcm9vbUluZm9FeBgDIAMoCzISLnN0cmVhbS5S",
            "b29tSW5mb0V4IkgKD0dldFdhdGNoRGF0YVJlcRIOCgZ1c2VySUQYASABKA0S",
            "EgoGcm9vbUlEGAIgASgEQgIwARIRCgl3YXRjaFRpbWUYAyABKA0iSAoPR2V0",
            "V2F0Y2hEYXRhUnNwEiEKBnN0YXR1cxgBIAEoDjIRLnN0cmVhbS5FcnJvckNv",
            "ZGUSEgoKY2FjaGVTdGF0ZRgCIAEoDSKJAQoIVGVhbUluZm8SEgoGdGVhbUlE",
            "GAEgASgEQgIwARIQCghwYXNzd29yZBgCIAEoCRIQCghjYXBhY2l0eRgDIAEo",
            "DRIMCgRtb2RlGAQgASgFEhIKCnZpc2liaWxpdHkYBSABKAUSDQoFb3duZXIY",
            "BiABKA0SFAoMdGVhbVByb3BlcnR5GAcgASgMImsKDUNyZWF0ZVRlYW1SZXES",
            "DgoGZ2FtZUlEGAEgASgNEiIKCHRlYW1JbmZvGAIgASgLMhAuc3RyZWFtLlRl",
            "YW1JbmZvEiYKCnBsYXllckluZm8YAyABKAsyEi5zdHJlYW0uUGxheWVySW5m",
            "byJkCg1DcmVhdGVUZWFtUnNwEiEKBnN0YXR1cxgBIAEoDjIRLnN0cmVhbS5F",
            "cnJvckNvZGUSEgoGdGVhbUlEGAIgASgEQgIwARINCgVvd25lchgDIAEoDRIN",
            "CgVzZXRJRBgEIAEoDSKTAQoLSm9pblRlYW1SZXESDgoGZ2FtZUlEGAEgASgN",
            "EhIKBnRlYW1JRBgCIAEoBEICMAESJgoKcGxheWVySW5mbxgDIAEoCzISLnN0",
            "cmVhbS5QbGF5ZXJJbmZvEhAKCHBhc3N3b3JkGAQgASgJEiYKCGpvaW5UeXBl",
            "GAUgASgOMhQuc3RyZWFtLkpvaW5UZWFtVHlwZSKLAQoLSm9pblRlYW1Sc3AS",
            "IQoGc3RhdHVzGAEgASgOMhEuc3RyZWFtLkVycm9yQ29kZRIiCgh0ZWFtSW5m",
            "bxgCIAEoCzIQLnN0cmVhbS5UZWFtSW5mbxIhCgV1c2VycxgDIAMoCzISLnN0",
            "cmVhbS5QbGF5ZXJJbmZvEhIKCmlzTWF0Y2hpbmcYBCABKAgiMgoOSm9pblRl",
            "YW1Ob3RpZnkSIAoEdXNlchgBIAEoCzISLnN0cmVhbS5QbGF5ZXJJbmZvIkIK",
            "DExlYXZlVGVhbVJlcRIOCgZnYW1lSUQYASABKA0SEgoGdGVhbUlEGAIgASgE",
            "QgIwARIOCgZ1c2VySUQYAyABKA0iVQoMTGVhdmVUZWFtUnNwEiEKBnN0YXR1",
            "cxgBIAEoDjIRLnN0cmVhbS5FcnJvckNvZGUSEgoGdGVhbUlEGAIgASgEQgIw",
            "ARIOCgZ1c2VySUQYAyABKA0iRAoPTGVhdmVUZWFtTm90aWZ5EhIKBnRlYW1J",
            "RBgBIAEoBEICMAESDgoGdXNlcklEGAIgASgNEg0KBW93bmVyGAMgASgNIq8B",
            "Cg1UZWFtTWF0Y2hDb25kEg8KB3RlYW1OdW0YASABKA0SFQoNdGVhbU1lbWJl",
            "ck51bRgCIAEoDRIPCgd0aW1lb3V0GAMgASgNEg4KBndlaWdodBgEIAEoDRIT",
            "Cgt3ZWlnaHRSYW5nZRgFIAEoDRISCgp3ZWlnaHRSdWxlGAYgASgNEgwKBGZ1",
            "bGwYByABKA0SHgoEdGFncxgIIAMoCzIQLnN0cmVhbS5rZXlWYWx1ZSLLAQoM",
            "VGVhbU1hdGNoUmVxEg4KBmdhbWVJRBgBIAEoDRISCgZ0ZWFtSUQYAiABKARC",
            "AjABEg4KBnVzZXJJRBgDIAEoDRIjCgRjb25kGAQgASgLMhUuc3RyZWFtLlRl",
            "YW1NYXRjaENvbmQSIgoIcm9vbUluZm8YBSABKAsyEC5zdHJlYW0uUm9vbUlu",
            "Zm8SKgoMd2F0Y2hTZXR0aW5nGAYgASgLMhQuc3RyZWFtLldhdGNoU2V0dGlu",
            "ZxISCgpjYW5jZWxUeXBlGAcgASgNIjEKDFRlYW1NYXRjaFJzcBIhCgZzdGF0",
            "dXMYASABKA4yES5zdHJlYW0uRXJyb3JDb2RlIlQKClRlYW1EZXRhaWwSIgoI",
            "dGVhbUluZm8YASABKAsyEC5zdHJlYW0uVGVhbUluZm8SIgoGcGxheWVyGAIg",
            "AygLMhIuc3RyZWFtLlBsYXllckluZm8iQwoLQnJpZ2FkZUluZm8SEQoJYnJp",
            "Z2FkZUlEGAEgASgNEiEKBXRlYW1zGAIgAygLMhIuc3RyZWFtLlRlYW1EZXRh",
            "aWwiqQEKFVRlYW1NYXRjaFJlc3VsdE5vdGlmeRIhCgZzdGF0dXMYASABKA4y",
            "ES5zdHJlYW0uRXJyb3JDb2RlEiUKCGJyaWdhZGVzGAIgAygLMhMuc3RyZWFt",
            "LkJyaWdhZGVJbmZvEiIKCHJvb21JbmZvGAMgASgLMhAuc3RyZWFtLlJvb21J",
            "bmZvEiIKCGJvb2tJbmZvGAQgASgLMhAuc3RyZWFtLkJvb2tJbmZvIjoKFFRl",
            "YW1NYXRjaFN0YXJ0Tm90aWZ5EhIKBnRlYW1JRBgBIAEoBEICMAESDgoGdXNl",
            "cklEGAIgASgNIlkKEkNhbmNlbFRlYW1NYXRjaFJlcRIOCgZnYW1lSUQYASAB",
            "KA0SEgoGdGVhbUlEGAIgASgEQgIwARIOCgZ1c2VySUQYAyABKA0SDwoHY3BQ",
            "cm90bxgEIAEoDCI3ChJDYW5jZWxUZWFtTWF0Y2hSc3ASIQoGc3RhdHVzGAEg",
            "ASgOMhEuc3RyZWFtLkVycm9yQ29kZSJMChVDYW5jZWxUZWFtTWF0Y2hOb3Rp",
            "ZnkSEgoGdGVhbUlEGAEgASgEQgIwARIOCgZ1c2VySUQYAiABKA0SDwoHY3BQ",
            "cm90bxgDIAEoDCK0AQoQU2VuZFRlYW1FdmVudFJlcRIOCgZnYW1lSUQYASAB",
            "KA0SEgoGdGVhbUlEGAIgASgEQgIwARIOCgZ1c2VySUQYAyABKA0SJAoHZHN0",
            "VHlwZRgEIAEoDjITLnN0cmVhbS5UZWFtRHN0VHlwZRIkCgdtc2dUeXBlGAUg",
            "ASgOMhMuc3RyZWFtLlRlYW1Nc2dUeXBlEg8KB2RzdFVpZHMYBiADKA0SDwoH",
            "Y3BQcm90bxgHIAEoDCJJChBTZW5kVGVhbUV2ZW50UnNwEiEKBnN0YXR1cxgB",
            "IAEoDjIRLnN0cmVhbS5FcnJvckNvZGUSEgoKZHN0VXNlcklEcxgCIAMoDSJK",
            "ChNTZW5kVGVhbUV2ZW50Tm90aWZ5EhIKBnRlYW1JRBgBIAEoBEICMAESDgoG",
            "dXNlcklEGAIgASgNEg8KB2NwUHJvdG8YAyABKAwiawoRS2lja1RlYW1NZW1i",
            "ZXJSZXESDgoGZ2FtZUlEGAEgASgNEhIKBnRlYW1JRBgCIAEoBEICMAESDgoG",
            "dXNlcklEGAMgASgNEhEKCWRzdFVzZXJJRBgEIAEoDRIPCgdjcFByb3RvGAUg",
            "ASgMImoKEUtpY2tUZWFtTWVtYmVyUnNwEiEKBnN0YXR1cxgBIAEoDjIRLnN0",
            "cmVhbS5FcnJvckNvZGUSEgoGdGVhbUlEGAIgASgEQgIwARINCgVvd25lchgD",
            "IAEoDRIPCgdtZW1iZXJzGAQgAygNIn4KFEtpY2tUZWFtTWVtYmVyTm90aWZ5",
            "EhIKBnRlYW1JRBgBIAEoBEICMAESDgoGdXNlcklEGAIgASgNEhEKCWRzdFVz",
            "ZXJJRBgDIAEoDRINCgVvd25lchgEIAEoDRIPCgdtZW1iZXJzGAUgAygNEg8K",
            "B2NwUHJvdG8YBiABKAwiXgoSU2V0VGVhbVByb3BlcnR5UmVxEg4KBmdhbWVJ",
            "RBgBIAEoDRISCgZ0ZWFtSUQYAiABKARCAjABEg4KBnVzZXJJRBgDIAEoDRIU",
            "Cgx0ZWFtUHJvcGVydHkYBCABKAwicQoSU2V0VGVhbVByb3BlcnR5UnNwEiEK",
            "BnN0YXR1cxgBIAEoDjIRLnN0cmVhbS5FcnJvckNvZGUSEgoGdGVhbUlEGAIg",
            "ASgEQgIwARIOCgZ1c2VySUQYAyABKA0SFAoMdGVhbVByb3BlcnR5GAQgASgM",
            "Ik4KEk5vdGljZVRlYW1Qcm9wZXJ0eRISCgZ0ZWFtSUQYASABKARCAjABEg4K",
            "BnVzZXJJRBgCIAEoDRIUCgx0ZWFtUHJvcGVydHkYAyABKAwiYAoVU2V0VGVh",
            "bVVzZXJQcm9maWxlUmVxEg4KBmdhbWVJRBgBIAEoDRISCgZ0ZWFtSUQYAiAB",
            "KARCAjABEg4KBnVzZXJJRBgDIAEoDRITCgt1c2VyUHJvZmlsZRgEIAEoDCJz",
            "ChVTZXRUZWFtVXNlclByb2ZpbGVSc3ASIQoGc3RhdHVzGAEgASgOMhEuc3Ry",
            "ZWFtLkVycm9yQ29kZRISCgZ0ZWFtSUQYAiABKARCAjABEg4KBnVzZXJJRBgD",
            "IAEoDRITCgt1c2VyUHJvZmlsZRgEIAEoDCJQChVOb3RpY2VUZWFtVXNlclBy",
            "b2ZpbGUSEgoGdGVhbUlEGAEgASgEQgIwARIOCgZ1c2VySUQYAiABKA0SEwoL",
            "dXNlclByb2ZpbGUYAyABKAwiWAoTVGVhbU5ldHdvcmtTdGF0ZVJlcRIOCgZn",
            "YW1lSUQYASABKA0SEgoGdGVhbUlEGAIgASgEQgIwARIOCgZ1c2VySUQYAyAB",
            "KA0SDQoFc3RhdGUYBCABKA0iOAoTVGVhbU5ldHdvcmtTdGF0ZVJzcBIhCgZz",
            "dGF0dXMYASABKA4yES5zdHJlYW0uRXJyb3JDb2RlIloKFlRlYW1OZXR3b3Jr",
            "U3RhdGVOb3RpZnkSEgoGdGVhbUlEGAEgASgEQgIwARIOCgZ1c2VySUQYAiAB",
            "KA0SDQoFc3RhdGUYAyABKA0SDQoFb3duZXIYBCABKA0iRgoQR2V0VGVhbURl",
            "dGFpbFJlcRIOCgZnYW1lSUQYASABKA0SEgoGdGVhbUlEGAIgASgEQgIwARIO",
            "CgZ1c2VySUQYAyABKA0ikAEKEEdldFRlYW1EZXRhaWxSc3ASIQoGc3RhdHVz",
            "GAEgASgOMhEuc3RyZWFtLkVycm9yQ29kZRIiCgh0ZWFtSW5mbxgCIAEoCzIQ",
            "LnN0cmVhbS5UZWFtSW5mbxIhCgV1c2VycxgDIAMoCzISLnN0cmVhbS5QbGF5",
            "ZXJJbmZvEhIKCmlzTWF0Y2hpbmcYBCABKAgqqA4KBUNtZElkEgkKBU5vQ21k",
            "EAASDQoIc3BlZWRSZXEQ6QcSDQoIc3BlZWRSc3AQ6gcSDQoIbG9naW5SZXEQ",
            "zQgSDQoIbG9naW5Sc3AQzggSEQoMaGVhcnRCZWF0UmVxEM8IEg4KCWxvZ291",
            "dFJlcRDRCBIOCglsb2dvdXRSc3AQ0ggSGwoWc2V0UmVjb25uZWN0VGltZW91",
            "dFJlcRDVCBIbChZzZXRSZWNvbm5lY3RUaW1lb3V0UnNwENYIEh8KGnNldFRl",
            "YW1SZWNvbm5lY3RUaW1lb3V0UmVxENcIEh8KGnNldFRlYW1SZWNvbm5lY3RU",
            "aW1lb3V0UnNwENgIEhsKFm5vdGljZVJvb21OZXR3b3JrU3RhdGUQ4ggSGwoW",
            "bm90aWNlVGVhbU5ldHdvcmtTdGF0ZRDjCBIQCgtqb2luUm9vbVJlcRCxCRIQ",
            "Cgtqb2luUm9vbVJzcBCyCRIWChFub3RpY2VVc2VySm9pblJlcRCVChISCg1j",
            "cmVhdGVSb29tUmVxELMJEhIKDWNyZWF0ZVJvb21Sc3AQtAkSEQoMbGVhdmVS",
            "b29tUmVxELUJEhEKDGxlYXZlUm9vbVJzcBC2CRIXChJub3RpY2VVc2VyTGVh",
            "dmVSZXEQlgoSEwoOZ2V0Um9vbUxpc3RSZXEQtwkSEwoOZ2V0Um9vbUxpc3RS",
            "c3AQuAkSFQoQZ2V0Um9vbURldGFpbFJlcRC5CRIVChBnZXRSb29tRGV0YWls",
            "UnNwELoJEhAKC2pvaW5PdmVyUmVxEL0JEhAKC2pvaW5PdmVyUnNwEL4JEhMK",
            "DmpvaW5PdmVyTm90aWZ5EJoKEhIKDXJvb21MaXN0RXhSZXEQvwkSEgoNcm9v",
            "bUxpc3RFeFJzcBDACRIXChJzZXRSb29tUHJvcGVydHlSZXEQwwkSFwoSc2V0",
            "Um9vbVByb3BlcnR5UnNwEMQJEhcKEm5vdGljZVJvb21Qcm9wZXJ0eRCbChIQ",
            "Cgtqb2luT3BlblJlcRDFCRIQCgtqb2luT3BlblJzcBDGCRITCg5qb2luT3Bl",
            "bk5vdGlmeRCcChIVChBqb2luV2F0Y2hSb29tUmVxEMkJEhUKEGpvaW5XYXRj",
            "aFJvb21Sc3AQygkSFgoRbGVhdmVXYXRjaFJvb21SZXEQywkSFgoRbGVhdmVX",
            "YXRjaFJvb21Sc3AQzAkSFQoQZ2V0V2F0Y2hSb29tc1JlcRDNCRIVChBnZXRX",
            "YXRjaFJvb21zUnNwEM4JEhIKDWNoYW5nZVJvbGVSZXEQzwkSEgoNY2hhbmdl",
            "Um9sZVJzcBDQCRISCg1raWNrUGxheWVyUmVxEJcKEhIKDWtpY2tQbGF5ZXJS",
            "c3AQmAoSFQoQa2lja1BsYXllck5vdGlmeRCZChISCg1jcmVhdGVUZWFtUmVx",
            "ENEJEhIKDWNyZWF0ZVRlYW1Sc3AQ0gkSEAoLam9pblRlYW1SZXEQ0wkSEAoL",
            "am9pblRlYW1Sc3AQ1AkSEwoOam9pblRlYW1Ob3RpZnkQnQoSEQoMbGVhdmVU",
            "ZWFtUmVxENUJEhEKDGxlYXZlVGVhbVJzcBDWCRIUCg9sZWF2ZVRlYW1Ob3Rp",
            "ZnkQngoSEQoMdGVhbU1hdGNoUmVxENcJEhEKDHRlYW1NYXRjaFJzcBDYCRIa",
            "ChV0ZWFtTWF0Y2hSZXN1bHROb3RpZnkQnwoSGQoUdGVhbU1hdGNoU3RhcnRO",
            "b3RpZnkQoAoSFwoSY2FuY2VsVGVhbU1hdGNoUmVxENkJEhcKEmNhbmNlbFRl",
            "YW1NYXRjaFJzcBDaCRIaChVjYW5jZWxUZWFtTWF0Y2hOb3RpZnkQoQoSFQoQ",
            "c2VuZFRlYW1FdmVudFJlcRDbCRIVChBzZW5kVGVhbUV2ZW50UnNwENwJEhgK",
            "E3NlbmRUZWFtRXZlbnROb3RpZnkQogoSFgoRa2lja1RlYW1NZW1iZXJSZXEQ",
            "3QkSFgoRa2lja1RlYW1NZW1iZXJSc3AQ3gkSGQoUa2lja1RlYW1NZW1iZXJO",
            "b3RpZnkQowoSFAoPZ2V0V2F0Y2hEYXRhUmVxEIELEhQKD2dldFdhdGNoRGF0",
            "YVJzcBCCCxITCg5yb29tT3Zlck5vdGlmeRCECxIYChNqb2luV2F0Y2hSb29t",
            "Tm90aWZ5EIYLEhkKFGxlYXZlV2F0Y2hSb29tTm90aWZ5EIgLEhcKEnNldFRl",
            "YW1Qcm9wZXJ0eVJlcRDfCRIXChJzZXRUZWFtUHJvcGVydHlSc3AQ4AkSFwoS",
            "bm90aWNlVGVhbVByb3BlcnR5EKQKEhoKFXNldFRlYW1Vc2VyUHJvZmlsZVJl",
            "cRDhCRIaChVzZXRUZWFtVXNlclByb2ZpbGVSc3AQ4gkSGgoVbm90aWNlVGVh",
            "bVVzZXJQcm9maWxlEKUKEhUKEGdldFRlYW1EZXRhaWxSZXEQgQkSFQoQZ2V0",
            "VGVhbURldGFpbFJzcBCCCSqnAQoMSm9pblJvb21UeXBlEgoKBk5vSm9pbhAA",
            "EhMKD2pvaW5TcGVjaWFsUm9vbRABEhgKFGpvaW5Sb29tV2l0aFByb3BlcnR5",
            "EAISEgoOam9pblJhbmRvbVJvb20QAxIVChFyZWpvaW5TcGVjaWFsUm9vbRAE",
            "EhIKDmNyZWF0ZUpvaW5Sb29tEAUSDwoLd2F0Y2hlckpvaW4QBhIMCgh0ZWFt",
            "Sm9pbhAHKkUKCVJvb21TdGF0ZRIQCgxSb29tU3RhdGVOaWwQABIRCg1Sb29t",
            "U3RhdGVPcGVuEAESEwoPUm9vbVN0YXRlQ2xvc2VkEAIqdQoKQ3JlYXRlRmxh",
            "ZxIVChFDcmVhdGVSb29tVW5rbm93bhAAEhQKEENyZWF0ZVJvb21TeXN0ZW0Q",
            "ARIUChBDcmVhdGVSb29tUGxheWVyEAISEAoMQ3JlYXRlUm9vbUdTEAMSEgoO",
            "Q3JlYXRlUm9vbVRlYW0QBCphCgxSb29tTGlzdFNvcnQSDwoLUm9vbVNvcnRO",
            "aWwQABIWChJSb29tU29ydENyZWF0ZVRpbWUQARIVChFSb29tU29ydFBsYXll",
            "ck51bRACEhEKDVJvb21Tb3J0U3RhdGUQAyomCglTb3J0T3JkZXISCwoHU29y",
            "dEFzYxAAEgwKCFNvcnREZXNjEAEqLwoIUm9vbVR5cGUSEAoMR2FtZVJvb21U",
            "eXBlEAASEQoNV2F0Y2hSb29tVHlwZRABKjMKDEpvaW5UZWFtVHlwZRITCg9q",
            "b2luU3BlY2lhbFRlYW0QABIOCgpyZWpvaW5UZWFtEAEqPQoLVGVhbURzdFR5",
            "cGUSFgoSRFNUX1RZUEVfSU5DTFVTSVZFEAASFgoSRFNUX1RZUEVfRVhDTFVT",
            "SVZFEAEqUgoLVGVhbU1zZ1R5cGUSFQoRTVNHX1RZUEVfU0RLMV9HUzAQABIV",
            "ChFNU0dfVFlQRV9TREswX0dTMRABEhUKEU1TR19UWVBFX1NESzFfR1MxEAJC",
            "CqoCB01hdGNodnNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Matchvs.ErrorcodeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Matchvs.CmdId), typeof(global::Matchvs.JoinRoomType), typeof(global::Matchvs.RoomState), typeof(global::Matchvs.CreateFlag), typeof(global::Matchvs.RoomListSort), typeof(global::Matchvs.SortOrder), typeof(global::Matchvs.RoomType), typeof(global::Matchvs.JoinTeamType), typeof(global::Matchvs.TeamDstType), typeof(global::Matchvs.TeamMsgType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SpeedReq), global::Matchvs.SpeedReq.Parser, new[]{ "GameID", "UserID", "SdkVersion", "GameVersion", "EchoData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SpeedRsp), global::Matchvs.SpeedRsp.Parser, new[]{ "Status", "EchoData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LoginReq), global::Matchvs.LoginReq.Parser, new[]{ "GameID", "AppKey", "DeviceID", "Sign", "SdkVer", "Vendor", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LoginRsp), global::Matchvs.LoginRsp.Parser, new[]{ "Status", "RoomID", "SetID", "TeamID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.HeartbeatReq), global::Matchvs.HeartbeatReq.Parser, new[]{ "GameID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.HeartbeatRsp), global::Matchvs.HeartbeatRsp.Parser, new[]{ "GameID", "GsExist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LogoutRsp), global::Matchvs.LogoutRsp.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetReconnectTimeoutReq), global::Matchvs.SetReconnectTimeoutReq.Parser, new[]{ "UserID", "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetReconnectTimeoutRsp), global::Matchvs.SetReconnectTimeoutRsp.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetTeamReconnectTimeoutReq), global::Matchvs.SetTeamReconnectTimeoutReq.Parser, new[]{ "UserID", "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetTeamReconnectTimeoutRsp), global::Matchvs.SetTeamReconnectTimeoutRsp.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.keyValue), global::Matchvs.keyValue.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinRoomReq), global::Matchvs.JoinRoomReq.Parser, new[]{ "JoinType", "PlayerInfo", "GameID", "RoomInfo", "Tags", "CpProto", "WatchSetting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinRoomRsp), global::Matchvs.JoinRoomRsp.Parser, new[]{ "Status", "Users", "RoomInfo", "BookInfo", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.PlayerInfo), global::Matchvs.PlayerInfo.Parser, new[]{ "UserID", "UserProfile", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.BookInfo), global::Matchvs.BookInfo.Parser, new[]{ "BookID", "BookKey", "Addr", "WssProxy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.RoomInfo), global::Matchvs.RoomInfo.Parser, new[]{ "RoomID", "RoomName", "MaxPlayer", "Mode", "CanWatch", "Visibility", "RoomProperty", "Owner", "State", "SetID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.NoticeJoin), global::Matchvs.NoticeJoin.Parser, new[]{ "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.NoticeLeave), global::Matchvs.NoticeLeave.Parser, new[]{ "UserID", "RoomID", "Owner", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinOverReq), global::Matchvs.JoinOverReq.Parser, new[]{ "RoomID", "GameID", "CpProto", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinOverRsp), global::Matchvs.JoinOverRsp.Parser, new[]{ "Status", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinOverNotify), global::Matchvs.JoinOverNotify.Parser, new[]{ "SrcUserID", "RoomID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinOpenReq), global::Matchvs.JoinOpenReq.Parser, new[]{ "RoomID", "GameID", "UserID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinOpenRsp), global::Matchvs.JoinOpenRsp.Parser, new[]{ "Status", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinOpenNotify), global::Matchvs.JoinOpenNotify.Parser, new[]{ "UserID", "RoomID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LeaveRoomReq), global::Matchvs.LeaveRoomReq.Parser, new[]{ "UserID", "GameID", "RoomID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LeaveRoomRsp), global::Matchvs.LeaveRoomRsp.Parser, new[]{ "Status", "RoomID", "UserID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TcpProtoHeader), global::Matchvs.TcpProtoHeader.Parser, new[]{ "Size", "Seq", "Cmd", "Version", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.ConnDetailV2), global::Matchvs.ConnDetailV2.Parser, new[]{ "UserID", "GameID", "FieldID", "RoomID", "HeartBeatTime", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.UserV2), global::Matchvs.UserV2.Parser, new[]{ "UserId", "GameId", "VersionSdk", "ConnectionId", "ServiceId", "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.RoomNetworkStateNotify), global::Matchvs.RoomNetworkStateNotify.Parser, new[]{ "RoomID", "UserID", "State", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CreateRoom), global::Matchvs.CreateRoom.Parser, new[]{ "PlayerInfo", "GameID", "RoomInfo", "WatchSetting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CreateRoomRsp), global::Matchvs.CreateRoomRsp.Parser, new[]{ "Status", "RoomID", "BookInfo", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetRoomList), global::Matchvs.GetRoomList.Parser, new[]{ "GameID", "RoomFilter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.RoomFilter), global::Matchvs.RoomFilter.Parser, new[]{ "MaxPlayer", "Mode", "CanWatch", "RoomProperty", "Full", "State", "GetSystemRoom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetRoomListRsp), global::Matchvs.GetRoomListRsp.Parser, new[]{ "Status", "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetRoomListExReq), global::Matchvs.GetRoomListExReq.Parser, new[]{ "GameID", "RoomFilter", "Sort", "Order", "PageNo", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.RoomInfoEx), global::Matchvs.RoomInfoEx.Parser, new[]{ "RoomID", "RoomName", "MaxPlayer", "GamePlayer", "WatchPlayer", "Mode", "CanWatch", "RoomProperty", "Owner", "State", "CreateTime", "WatchInfo", "SetID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetRoomListExRsp), global::Matchvs.GetRoomListExRsp.Parser, new[]{ "Status", "Total", "RoomInfoEx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.KickPlayer), global::Matchvs.KickPlayer.Parser, new[]{ "RoomID", "SrcUserID", "UserID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.KickPlayerRsp), global::Matchvs.KickPlayerRsp.Parser, new[]{ "Status", "UserID", "RoomID", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.KickPlayerNotify), global::Matchvs.KickPlayerNotify.Parser, new[]{ "SrcUserID", "UserID", "CpProto", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetRoomDetailReq), global::Matchvs.GetRoomDetailReq.Parser, new[]{ "GameID", "RoomID", "LatestWatcherNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetRoomDetailRsp), global::Matchvs.GetRoomDetailRsp.Parser, new[]{ "Status", "RoomDetail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.RoomDetail), global::Matchvs.RoomDetail.Parser, new[]{ "RoomID", "State", "MaxPlayer", "Mode", "CanWatch", "RoomProperty", "Owner", "CreateFlag", "PlayerInfos", "WatchRoom", "Brigades", "SetID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetRoomPropertyReq), global::Matchvs.SetRoomPropertyReq.Parser, new[]{ "GameID", "RoomID", "UserID", "RoomProperty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetRoomPropertyRsp), global::Matchvs.SetRoomPropertyRsp.Parser, new[]{ "Status", "RoomID", "UserID", "RoomProperty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.NoticeRoomProperty), global::Matchvs.NoticeRoomProperty.Parser, new[]{ "RoomID", "UserID", "RoomProperty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.WatchSetting), global::Matchvs.WatchSetting.Parser, new[]{ "MaxWatch", "WatchPersistent", "WatchDelayMs", "CacheTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.WatchInfo), global::Matchvs.WatchInfo.Parser, new[]{ "RoomID", "State", "WatchSetting", "CurWatch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.WatchRoom), global::Matchvs.WatchRoom.Parser, new[]{ "WatchInfo", "WatchPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.PlayRoom), global::Matchvs.PlayRoom.Parser, new[]{ "RoomInfo", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinWatchRoomReq), global::Matchvs.JoinWatchRoomReq.Parser, new[]{ "GameID", "UserID", "UserProfile", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinWatchRoomRsp), global::Matchvs.JoinWatchRoomRsp.Parser, new[]{ "Status", "BookInfo", "SetID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinWatchRoomNotify), global::Matchvs.JoinWatchRoomNotify.Parser, new[]{ "Watcher" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LeaveWatchRoomReq), global::Matchvs.LeaveWatchRoomReq.Parser, new[]{ "GameID", "UserID", "RoomID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LeaveWatchRoomRsp), global::Matchvs.LeaveWatchRoomRsp.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LeaveWatchRoomNotify), global::Matchvs.LeaveWatchRoomNotify.Parser, new[]{ "Watcher" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.RoomOverNotify), global::Matchvs.RoomOverNotify.Parser, new[]{ "RoomID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.ChangeRole), global::Matchvs.ChangeRole.Parser, new[]{ "UserID", "GameID", "RoomID", "TargetRoomType", "UserProfile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.ChangeRoleRsp), global::Matchvs.ChangeRoleRsp.Parser, new[]{ "Status", "TargetRoomType", "PlayRoom", "BookInfo", "RoomID", "SetID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetWatchRoomsReq), global::Matchvs.GetWatchRoomsReq.Parser, new[]{ "GameID", "RoomFilter", "Sort", "Order", "PageNo", "PageSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetWatchRoomsRsp), global::Matchvs.GetWatchRoomsRsp.Parser, new[]{ "Status", "Total", "RoomInfoEx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetWatchDataReq), global::Matchvs.GetWatchDataReq.Parser, new[]{ "UserID", "RoomID", "WatchTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetWatchDataRsp), global::Matchvs.GetWatchDataRsp.Parser, new[]{ "Status", "CacheState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamInfo), global::Matchvs.TeamInfo.Parser, new[]{ "TeamID", "Password", "Capacity", "Mode", "Visibility", "Owner", "TeamProperty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CreateTeamReq), global::Matchvs.CreateTeamReq.Parser, new[]{ "GameID", "TeamInfo", "PlayerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CreateTeamRsp), global::Matchvs.CreateTeamRsp.Parser, new[]{ "Status", "TeamID", "Owner", "SetID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinTeamReq), global::Matchvs.JoinTeamReq.Parser, new[]{ "GameID", "TeamID", "PlayerInfo", "Password", "JoinType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinTeamRsp), global::Matchvs.JoinTeamRsp.Parser, new[]{ "Status", "TeamInfo", "Users", "IsMatching" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.JoinTeamNotify), global::Matchvs.JoinTeamNotify.Parser, new[]{ "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LeaveTeamReq), global::Matchvs.LeaveTeamReq.Parser, new[]{ "GameID", "TeamID", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LeaveTeamRsp), global::Matchvs.LeaveTeamRsp.Parser, new[]{ "Status", "TeamID", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LeaveTeamNotify), global::Matchvs.LeaveTeamNotify.Parser, new[]{ "TeamID", "UserID", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamMatchCond), global::Matchvs.TeamMatchCond.Parser, new[]{ "TeamNum", "TeamMemberNum", "Timeout", "Weight", "WeightRange", "WeightRule", "Full", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamMatchReq), global::Matchvs.TeamMatchReq.Parser, new[]{ "GameID", "TeamID", "UserID", "Cond", "RoomInfo", "WatchSetting", "CancelType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamMatchRsp), global::Matchvs.TeamMatchRsp.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamDetail), global::Matchvs.TeamDetail.Parser, new[]{ "TeamInfo", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.BrigadeInfo), global::Matchvs.BrigadeInfo.Parser, new[]{ "BrigadeID", "Teams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamMatchResultNotify), global::Matchvs.TeamMatchResultNotify.Parser, new[]{ "Status", "Brigades", "RoomInfo", "BookInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamMatchStartNotify), global::Matchvs.TeamMatchStartNotify.Parser, new[]{ "TeamID", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CancelTeamMatchReq), global::Matchvs.CancelTeamMatchReq.Parser, new[]{ "GameID", "TeamID", "UserID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CancelTeamMatchRsp), global::Matchvs.CancelTeamMatchRsp.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CancelTeamMatchNotify), global::Matchvs.CancelTeamMatchNotify.Parser, new[]{ "TeamID", "UserID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SendTeamEventReq), global::Matchvs.SendTeamEventReq.Parser, new[]{ "GameID", "TeamID", "UserID", "DstType", "MsgType", "DstUids", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SendTeamEventRsp), global::Matchvs.SendTeamEventRsp.Parser, new[]{ "Status", "DstUserIDs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SendTeamEventNotify), global::Matchvs.SendTeamEventNotify.Parser, new[]{ "TeamID", "UserID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.KickTeamMemberReq), global::Matchvs.KickTeamMemberReq.Parser, new[]{ "GameID", "TeamID", "UserID", "DstUserID", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.KickTeamMemberRsp), global::Matchvs.KickTeamMemberRsp.Parser, new[]{ "Status", "TeamID", "Owner", "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.KickTeamMemberNotify), global::Matchvs.KickTeamMemberNotify.Parser, new[]{ "TeamID", "UserID", "DstUserID", "Owner", "Members", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetTeamPropertyReq), global::Matchvs.SetTeamPropertyReq.Parser, new[]{ "GameID", "TeamID", "UserID", "TeamProperty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetTeamPropertyRsp), global::Matchvs.SetTeamPropertyRsp.Parser, new[]{ "Status", "TeamID", "UserID", "TeamProperty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.NoticeTeamProperty), global::Matchvs.NoticeTeamProperty.Parser, new[]{ "TeamID", "UserID", "TeamProperty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetTeamUserProfileReq), global::Matchvs.SetTeamUserProfileReq.Parser, new[]{ "GameID", "TeamID", "UserID", "UserProfile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetTeamUserProfileRsp), global::Matchvs.SetTeamUserProfileRsp.Parser, new[]{ "Status", "TeamID", "UserID", "UserProfile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.NoticeTeamUserProfile), global::Matchvs.NoticeTeamUserProfile.Parser, new[]{ "TeamID", "UserID", "UserProfile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamNetworkStateReq), global::Matchvs.TeamNetworkStateReq.Parser, new[]{ "GameID", "TeamID", "UserID", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamNetworkStateRsp), global::Matchvs.TeamNetworkStateRsp.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.TeamNetworkStateNotify), global::Matchvs.TeamNetworkStateNotify.Parser, new[]{ "TeamID", "UserID", "State", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetTeamDetailReq), global::Matchvs.GetTeamDetailReq.Parser, new[]{ "GameID", "TeamID", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetTeamDetailRsp), global::Matchvs.GetTeamDetailRsp.Parser, new[]{ "Status", "TeamInfo", "Users", "IsMatching" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CmdId {
    [pbr::OriginalName("NoCmd")] NoCmd = 0,
    /// <summary>
    ///测速
    /// </summary>
    [pbr::OriginalName("speedReq")] SpeedReq = 1001,
    [pbr::OriginalName("speedRsp")] SpeedRsp = 1002,
    /// <summary>
    ///登录
    /// </summary>
    [pbr::OriginalName("loginReq")] LoginReq = 1101,
    [pbr::OriginalName("loginRsp")] LoginRsp = 1102,
    /// <summary>
    ///心跳
    /// </summary>
    [pbr::OriginalName("heartBeatReq")] HeartBeatReq = 1103,
    /// <summary>
    ///登出
    /// </summary>
    [pbr::OriginalName("logoutReq")] LogoutReq = 1105,
    [pbr::OriginalName("logoutRsp")] LogoutRsp = 1106,
    /// <summary>
    ///设置房间重连超时时间
    /// </summary>
    [pbr::OriginalName("setReconnectTimeoutReq")] SetReconnectTimeoutReq = 1109,
    [pbr::OriginalName("setReconnectTimeoutRsp")] SetReconnectTimeoutRsp = 1110,
    /// <summary>
    ///设置小队重连超时时间
    /// </summary>
    [pbr::OriginalName("setTeamReconnectTimeoutReq")] SetTeamReconnectTimeoutReq = 1111,
    [pbr::OriginalName("setTeamReconnectTimeoutRsp")] SetTeamReconnectTimeoutRsp = 1112,
    /// <summary>
    ///网络状态变化
    /// </summary>
    [pbr::OriginalName("noticeRoomNetworkState")] NoticeRoomNetworkState = 1122,
    [pbr::OriginalName("noticeTeamNetworkState")] NoticeTeamNetworkState = 1123,
    /// <summary>
    ///加入房间
    /// </summary>
    [pbr::OriginalName("joinRoomReq")] JoinRoomReq = 1201,
    [pbr::OriginalName("joinRoomRsp")] JoinRoomRsp = 1202,
    [pbr::OriginalName("noticeUserJoinReq")] NoticeUserJoinReq = 1301,
    /// <summary>
    ///创建房间
    /// </summary>
    [pbr::OriginalName("createRoomReq")] CreateRoomReq = 1203,
    [pbr::OriginalName("createRoomRsp")] CreateRoomRsp = 1204,
    /// <summary>
    ///离开房间
    /// </summary>
    [pbr::OriginalName("leaveRoomReq")] LeaveRoomReq = 1205,
    [pbr::OriginalName("leaveRoomRsp")] LeaveRoomRsp = 1206,
    [pbr::OriginalName("noticeUserLeaveReq")] NoticeUserLeaveReq = 1302,
    /// <summary>
    ///请求房间列表
    /// </summary>
    [pbr::OriginalName("getRoomListReq")] GetRoomListReq = 1207,
    [pbr::OriginalName("getRoomListRsp")] GetRoomListRsp = 1208,
    /// <summary>
    ///房间详情
    /// </summary>
    [pbr::OriginalName("getRoomDetailReq")] GetRoomDetailReq = 1209,
    [pbr::OriginalName("getRoomDetailRsp")] GetRoomDetailRsp = 1210,
    /// <summary>
    ///房间停止加人
    /// </summary>
    [pbr::OriginalName("joinOverReq")] JoinOverReq = 1213,
    [pbr::OriginalName("joinOverRsp")] JoinOverRsp = 1214,
    [pbr::OriginalName("joinOverNotify")] JoinOverNotify = 1306,
    /// <summary>
    ///房间列表扩展
    /// </summary>
    [pbr::OriginalName("roomListExReq")] RoomListExReq = 1215,
    [pbr::OriginalName("roomListExRsp")] RoomListExRsp = 1216,
    /// <summary>
    ///修改房间属性
    /// </summary>
    [pbr::OriginalName("setRoomPropertyReq")] SetRoomPropertyReq = 1219,
    [pbr::OriginalName("setRoomPropertyRsp")] SetRoomPropertyRsp = 1220,
    [pbr::OriginalName("noticeRoomProperty")] NoticeRoomProperty = 1307,
    /// <summary>
    ///重新打开房间
    /// </summary>
    [pbr::OriginalName("joinOpenReq")] JoinOpenReq = 1221,
    [pbr::OriginalName("joinOpenRsp")] JoinOpenRsp = 1222,
    [pbr::OriginalName("joinOpenNotify")] JoinOpenNotify = 1308,
    /// <summary>
    ///进入观战房间
    /// </summary>
    [pbr::OriginalName("joinWatchRoomReq")] JoinWatchRoomReq = 1225,
    [pbr::OriginalName("joinWatchRoomRsp")] JoinWatchRoomRsp = 1226,
    /// <summary>
    ///离开观战房间
    /// </summary>
    [pbr::OriginalName("leaveWatchRoomReq")] LeaveWatchRoomReq = 1227,
    [pbr::OriginalName("leaveWatchRoomRsp")] LeaveWatchRoomRsp = 1228,
    /// <summary>
    ///查询观战房间列表
    /// </summary>
    [pbr::OriginalName("getWatchRoomsReq")] GetWatchRoomsReq = 1229,
    [pbr::OriginalName("getWatchRoomsRsp")] GetWatchRoomsRsp = 1230,
    /// <summary>
    ///切换身份
    /// </summary>
    [pbr::OriginalName("changeRoleReq")] ChangeRoleReq = 1231,
    [pbr::OriginalName("changeRoleRsp")] ChangeRoleRsp = 1232,
    /// <summary>
    ///踢出玩家
    /// </summary>
    [pbr::OriginalName("kickPlayerReq")] KickPlayerReq = 1303,
    [pbr::OriginalName("kickPlayerRsp")] KickPlayerRsp = 1304,
    [pbr::OriginalName("kickPlayerNotify")] KickPlayerNotify = 1305,
    /// <summary>
    ///创建小队
    /// </summary>
    [pbr::OriginalName("createTeamReq")] CreateTeamReq = 1233,
    [pbr::OriginalName("createTeamRsp")] CreateTeamRsp = 1234,
    /// <summary>
    ///加入小队
    /// </summary>
    [pbr::OriginalName("joinTeamReq")] JoinTeamReq = 1235,
    [pbr::OriginalName("joinTeamRsp")] JoinTeamRsp = 1236,
    [pbr::OriginalName("joinTeamNotify")] JoinTeamNotify = 1309,
    /// <summary>
    ///离开小队
    /// </summary>
    [pbr::OriginalName("leaveTeamReq")] LeaveTeamReq = 1237,
    [pbr::OriginalName("leaveTeamRsp")] LeaveTeamRsp = 1238,
    [pbr::OriginalName("leaveTeamNotify")] LeaveTeamNotify = 1310,
    /// <summary>
    ///小队匹配
    /// </summary>
    [pbr::OriginalName("teamMatchReq")] TeamMatchReq = 1239,
    [pbr::OriginalName("teamMatchRsp")] TeamMatchRsp = 1240,
    [pbr::OriginalName("teamMatchResultNotify")] TeamMatchResultNotify = 1311,
    [pbr::OriginalName("teamMatchStartNotify")] TeamMatchStartNotify = 1312,
    /// <summary>
    ///取消匹配
    /// </summary>
    [pbr::OriginalName("cancelTeamMatchReq")] CancelTeamMatchReq = 1241,
    [pbr::OriginalName("cancelTeamMatchRsp")] CancelTeamMatchRsp = 1242,
    [pbr::OriginalName("cancelTeamMatchNotify")] CancelTeamMatchNotify = 1313,
    /// <summary>
    ///队内消息
    /// </summary>
    [pbr::OriginalName("sendTeamEventReq")] SendTeamEventReq = 1243,
    [pbr::OriginalName("sendTeamEventRsp")] SendTeamEventRsp = 1244,
    [pbr::OriginalName("sendTeamEventNotify")] SendTeamEventNotify = 1314,
    /// <summary>
    ///队内踢人
    /// </summary>
    [pbr::OriginalName("kickTeamMemberReq")] KickTeamMemberReq = 1245,
    [pbr::OriginalName("kickTeamMemberRsp")] KickTeamMemberRsp = 1246,
    [pbr::OriginalName("kickTeamMemberNotify")] KickTeamMemberNotify = 1315,
    [pbr::OriginalName("getWatchDataReq")] GetWatchDataReq = 1409,
    [pbr::OriginalName("getWatchDataRsp")] GetWatchDataRsp = 1410,
    [pbr::OriginalName("roomOverNotify")] RoomOverNotify = 1412,
    [pbr::OriginalName("joinWatchRoomNotify")] JoinWatchRoomNotify = 1414,
    [pbr::OriginalName("leaveWatchRoomNotify")] LeaveWatchRoomNotify = 1416,
    /// <summary>
    ///修改小队属性
    /// </summary>
    [pbr::OriginalName("setTeamPropertyReq")] SetTeamPropertyReq = 1247,
    [pbr::OriginalName("setTeamPropertyRsp")] SetTeamPropertyRsp = 1248,
    [pbr::OriginalName("noticeTeamProperty")] NoticeTeamProperty = 1316,
    /// <summary>
    ///修改小队玩家profile
    /// </summary>
    [pbr::OriginalName("setTeamUserProfileReq")] SetTeamUserProfileReq = 1249,
    [pbr::OriginalName("setTeamUserProfileRsp")] SetTeamUserProfileRsp = 1250,
    [pbr::OriginalName("noticeTeamUserProfile")] NoticeTeamUserProfile = 1317,
    /// <summary>
    ///获取小队详情
    /// </summary>
    [pbr::OriginalName("getTeamDetailReq")] GetTeamDetailReq = 1153,
    [pbr::OriginalName("getTeamDetailRsp")] GetTeamDetailRsp = 1154,
  }

  public enum JoinRoomType {
    [pbr::OriginalName("NoJoin")] NoJoin = 0,
    /// <summary>
    ///扩展接口,param(roomID, userProfile)
    /// </summary>
    [pbr::OriginalName("joinSpecialRoom")] JoinSpecialRoom = 1,
    /// <summary>
    ///扩展接口,param(roomProperty, userProfile)
    /// </summary>
    [pbr::OriginalName("joinRoomWithProperty")] JoinRoomWithProperty = 2,
    /// <summary>
    ///基本接口,param(maxPlayer, userProfile)
    /// </summary>
    [pbr::OriginalName("joinRandomRoom")] JoinRandomRoom = 3,
    [pbr::OriginalName("rejoinSpecialRoom")] RejoinSpecialRoom = 4,
    /// <summary>
    ///创建房间并随后自动加入房间
    /// </summary>
    [pbr::OriginalName("createJoinRoom")] CreateJoinRoom = 5,
    /// <summary>
    ///从观战者切换为玩家
    /// </summary>
    [pbr::OriginalName("watcherJoin")] WatcherJoin = 6,
    /// <summary>
    ///小队成员加入房间
    /// </summary>
    [pbr::OriginalName("teamJoin")] TeamJoin = 7,
  }

  /// <summary>
  ///房间状态
  /// </summary>
  public enum RoomState {
    [pbr::OriginalName("RoomStateNil")] Nil = 0,
    [pbr::OriginalName("RoomStateOpen")] Open = 1,
    [pbr::OriginalName("RoomStateClosed")] Closed = 2,
  }

  /// <summary>
  /// 房间创建途径
  /// </summary>
  public enum CreateFlag {
    [pbr::OriginalName("CreateRoomUnknown")] CreateRoomUnknown = 0,
    [pbr::OriginalName("CreateRoomSystem")] CreateRoomSystem = 1,
    [pbr::OriginalName("CreateRoomPlayer")] CreateRoomPlayer = 2,
    [pbr::OriginalName("CreateRoomGS")] CreateRoomGs = 3,
    [pbr::OriginalName("CreateRoomTeam")] CreateRoomTeam = 4,
  }

  /// <summary>
  ///请求房间列表排序依据
  /// </summary>
  public enum RoomListSort {
    /// <summary>
    /// 不排序
    /// </summary>
    [pbr::OriginalName("RoomSortNil")] RoomSortNil = 0,
    /// <summary>
    /// 房间创建时间
    /// </summary>
    [pbr::OriginalName("RoomSortCreateTime")] RoomSortCreateTime = 1,
    /// <summary>
    /// 房间当前人数
    /// </summary>
    [pbr::OriginalName("RoomSortPlayerNum")] RoomSortPlayerNum = 2,
    /// <summary>
    /// 房间状态
    /// </summary>
    [pbr::OriginalName("RoomSortState")] RoomSortState = 3,
  }

  /// <summary>
  ///排序方式
  /// </summary>
  public enum SortOrder {
    /// <summary>
    /// 升序
    /// </summary>
    [pbr::OriginalName("SortAsc")] SortAsc = 0,
    /// <summary>
    /// 降序
    /// </summary>
    [pbr::OriginalName("SortDesc")] SortDesc = 1,
  }

  public enum RoomType {
    /// <summary>
    /// 游戏房间
    /// </summary>
    [pbr::OriginalName("GameRoomType")] GameRoomType = 0,
    /// <summary>
    /// 观战房间
    /// </summary>
    [pbr::OriginalName("WatchRoomType")] WatchRoomType = 1,
  }

  public enum JoinTeamType {
    /// <summary>
    ///指定teamID加入
    /// </summary>
    [pbr::OriginalName("joinSpecialTeam")] JoinSpecialTeam = 0,
    /// <summary>
    ///重新加入
    /// </summary>
    [pbr::OriginalName("rejoinTeam")] RejoinTeam = 1,
  }

  /// <summary>
  /// 广播目标类型
  /// </summary>
  public enum TeamDstType {
    /// <summary>
    /// 包含
    /// </summary>
    [pbr::OriginalName("DST_TYPE_INCLUSIVE")] DstTypeInclusive = 0,
    /// <summary>
    /// 排除
    /// </summary>
    [pbr::OriginalName("DST_TYPE_EXCLUSIVE")] DstTypeExclusive = 1,
  }

  /// <summary>
  /// 消息类型
  /// </summary>
  public enum TeamMsgType {
    /// <summary>
    /// 只发给SDK
    /// </summary>
    [pbr::OriginalName("MSG_TYPE_SDK1_GS0")] MsgTypeSdk1Gs0 = 0,
    /// <summary>
    /// 只发给GS
    /// </summary>
    [pbr::OriginalName("MSG_TYPE_SDK0_GS1")] MsgTypeSdk0Gs1 = 1,
    /// <summary>
    /// 同时发给SDK和GS
    /// </summary>
    [pbr::OriginalName("MSG_TYPE_SDK1_GS1")] MsgTypeSdk1Gs1 = 2,
  }

  #endregion

  #region Messages
  public sealed partial class SpeedReq : pb::IMessage<SpeedReq> {
    private static readonly pb::MessageParser<SpeedReq> _parser = new pb::MessageParser<SpeedReq>(() => new SpeedReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedReq(SpeedReq other) : this() {
      gameID_ = other.gameID_;
      userID_ = other.userID_;
      sdkVersion_ = other.sdkVersion_;
      gameVersion_ = other.gameVersion_;
      echoData_ = other.echoData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedReq Clone() {
      return new SpeedReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "sdkVersion" field.</summary>
    public const int SdkVersionFieldNumber = 3;
    private string sdkVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkVersion {
      get { return sdkVersion_; }
      set {
        sdkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameVersion" field.</summary>
    public const int GameVersionFieldNumber = 4;
    private string gameVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameVersion {
      get { return gameVersion_; }
      set {
        gameVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "echoData" field.</summary>
    public const int EchoDataFieldNumber = 5;
    private pb::ByteString echoData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EchoData {
      get { return echoData_; }
      set {
        echoData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (UserID != other.UserID) return false;
      if (SdkVersion != other.SdkVersion) return false;
      if (GameVersion != other.GameVersion) return false;
      if (EchoData != other.EchoData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (SdkVersion.Length != 0) hash ^= SdkVersion.GetHashCode();
      if (GameVersion.Length != 0) hash ^= GameVersion.GetHashCode();
      if (EchoData.Length != 0) hash ^= EchoData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (SdkVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SdkVersion);
      }
      if (GameVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameVersion);
      }
      if (EchoData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EchoData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (SdkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkVersion);
      }
      if (GameVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameVersion);
      }
      if (EchoData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EchoData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.SdkVersion.Length != 0) {
        SdkVersion = other.SdkVersion;
      }
      if (other.GameVersion.Length != 0) {
        GameVersion = other.GameVersion;
      }
      if (other.EchoData.Length != 0) {
        EchoData = other.EchoData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 26: {
            SdkVersion = input.ReadString();
            break;
          }
          case 34: {
            GameVersion = input.ReadString();
            break;
          }
          case 42: {
            EchoData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SpeedRsp : pb::IMessage<SpeedRsp> {
    private static readonly pb::MessageParser<SpeedRsp> _parser = new pb::MessageParser<SpeedRsp>(() => new SpeedRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpeedRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedRsp(SpeedRsp other) : this() {
      status_ = other.status_;
      echoData_ = other.echoData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpeedRsp Clone() {
      return new SpeedRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "echoData" field.</summary>
    public const int EchoDataFieldNumber = 2;
    private pb::ByteString echoData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EchoData {
      get { return echoData_; }
      set {
        echoData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpeedRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpeedRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (EchoData != other.EchoData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (EchoData.Length != 0) hash ^= EchoData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (EchoData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EchoData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (EchoData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EchoData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpeedRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.EchoData.Length != 0) {
        EchoData = other.EchoData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            EchoData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginReq : pb::IMessage<LoginReq> {
    private static readonly pb::MessageParser<LoginReq> _parser = new pb::MessageParser<LoginReq>(() => new LoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq(LoginReq other) : this() {
      gameID_ = other.gameID_;
      appKey_ = other.appKey_;
      deviceID_ = other.deviceID_;
      sign_ = other.sign_;
      sdkVer_ = other.sdkVer_;
      vendor_ = other.vendor_;
      token_ = other.token_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginReq Clone() {
      return new LoginReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "appKey" field.</summary>
    public const int AppKeyFieldNumber = 2;
    private string appKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppKey {
      get { return appKey_; }
      set {
        appKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceID" field.</summary>
    public const int DeviceIDFieldNumber = 3;
    private string deviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 4;
    private string sign_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdkVer" field.</summary>
    public const int SdkVerFieldNumber = 5;
    private string sdkVer_ = "";
    /// <summary>
    /// sdk版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkVer {
      get { return sdkVer_; }
      set {
        sdkVer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vendor" field.</summary>
    public const int VendorFieldNumber = 6;
    private uint vendor_;
    /// <summary>
    /// 厂商
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vendor {
      get { return vendor_; }
      set {
        vendor_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 7;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (AppKey != other.AppKey) return false;
      if (DeviceID != other.DeviceID) return false;
      if (Sign != other.Sign) return false;
      if (SdkVer != other.SdkVer) return false;
      if (Vendor != other.Vendor) return false;
      if (Token != other.Token) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (AppKey.Length != 0) hash ^= AppKey.GetHashCode();
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (SdkVer.Length != 0) hash ^= SdkVer.GetHashCode();
      if (Vendor != 0) hash ^= Vendor.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (AppKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppKey);
      }
      if (DeviceID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeviceID);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Sign);
      }
      if (SdkVer.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SdkVer);
      }
      if (Vendor != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Vendor);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Token);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (AppKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppKey);
      }
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (SdkVer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkVer);
      }
      if (Vendor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Vendor);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.AppKey.Length != 0) {
        AppKey = other.AppKey;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.SdkVer.Length != 0) {
        SdkVer = other.SdkVer;
      }
      if (other.Vendor != 0) {
        Vendor = other.Vendor;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 18: {
            AppKey = input.ReadString();
            break;
          }
          case 26: {
            DeviceID = input.ReadString();
            break;
          }
          case 34: {
            Sign = input.ReadString();
            break;
          }
          case 42: {
            SdkVer = input.ReadString();
            break;
          }
          case 48: {
            Vendor = input.ReadUInt32();
            break;
          }
          case 58: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRsp : pb::IMessage<LoginRsp> {
    private static readonly pb::MessageParser<LoginRsp> _parser = new pb::MessageParser<LoginRsp>(() => new LoginRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp(LoginRsp other) : this() {
      status_ = other.status_;
      roomID_ = other.roomID_;
      setID_ = other.setID_;
      teamID_ = other.teamID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRsp Clone() {
      return new LoginRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "setID" field.</summary>
    public const int SetIDFieldNumber = 3;
    private uint setID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetID {
      get { return setID_; }
      set {
        setID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 4;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (RoomID != other.RoomID) return false;
      if (SetID != other.SetID) return false;
      if (TeamID != other.TeamID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (SetID != 0) hash ^= SetID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (SetID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SetID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TeamID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (SetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.SetID != 0) {
        SetID = other.SetID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            SetID = input.ReadUInt32();
            break;
          }
          case 32: {
            TeamID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartbeatReq : pb::IMessage<HeartbeatReq> {
    private static readonly pb::MessageParser<HeartbeatReq> _parser = new pb::MessageParser<HeartbeatReq>(() => new HeartbeatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartbeatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatReq(HeartbeatReq other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatReq Clone() {
      return new HeartbeatReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartbeatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartbeatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartbeatReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartbeatRsp : pb::IMessage<HeartbeatRsp> {
    private static readonly pb::MessageParser<HeartbeatRsp> _parser = new pb::MessageParser<HeartbeatRsp>(() => new HeartbeatRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartbeatRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatRsp(HeartbeatRsp other) : this() {
      gameID_ = other.gameID_;
      gsExist_ = other.gsExist_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatRsp Clone() {
      return new HeartbeatRsp(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "gsExist" field.</summary>
    public const int GsExistFieldNumber = 2;
    private int gsExist_;
    /// <summary>
    ///0.不存在  1.存在
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GsExist {
      get { return gsExist_; }
      set {
        gsExist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartbeatRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartbeatRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (GsExist != other.GsExist) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (GsExist != 0) hash ^= GsExist.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (GsExist != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GsExist);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (GsExist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GsExist);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartbeatRsp other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.GsExist != 0) {
        GsExist = other.GsExist;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            GsExist = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogoutRsp : pb::IMessage<LogoutRsp> {
    private static readonly pb::MessageParser<LogoutRsp> _parser = new pb::MessageParser<LogoutRsp>(() => new LogoutRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp(LogoutRsp other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutRsp Clone() {
      return new LogoutRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetReconnectTimeoutReq : pb::IMessage<SetReconnectTimeoutReq> {
    private static readonly pb::MessageParser<SetReconnectTimeoutReq> _parser = new pb::MessageParser<SetReconnectTimeoutReq>(() => new SetReconnectTimeoutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetReconnectTimeoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetReconnectTimeoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetReconnectTimeoutReq(SetReconnectTimeoutReq other) : this() {
      userID_ = other.userID_;
      timeout_ = other.timeout_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetReconnectTimeoutReq Clone() {
      return new SetReconnectTimeoutReq(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 2;
    private int timeout_;
    /// <summary>
    /// 超时时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetReconnectTimeoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetReconnectTimeoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Timeout != other.Timeout) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (Timeout != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timeout);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetReconnectTimeoutReq other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            Timeout = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetReconnectTimeoutRsp : pb::IMessage<SetReconnectTimeoutRsp> {
    private static readonly pb::MessageParser<SetReconnectTimeoutRsp> _parser = new pb::MessageParser<SetReconnectTimeoutRsp>(() => new SetReconnectTimeoutRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetReconnectTimeoutRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetReconnectTimeoutRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetReconnectTimeoutRsp(SetReconnectTimeoutRsp other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetReconnectTimeoutRsp Clone() {
      return new SetReconnectTimeoutRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetReconnectTimeoutRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetReconnectTimeoutRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetReconnectTimeoutRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置小队重连超时时间
  /// </summary>
  public sealed partial class SetTeamReconnectTimeoutReq : pb::IMessage<SetTeamReconnectTimeoutReq> {
    private static readonly pb::MessageParser<SetTeamReconnectTimeoutReq> _parser = new pb::MessageParser<SetTeamReconnectTimeoutReq>(() => new SetTeamReconnectTimeoutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTeamReconnectTimeoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamReconnectTimeoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamReconnectTimeoutReq(SetTeamReconnectTimeoutReq other) : this() {
      userID_ = other.userID_;
      timeout_ = other.timeout_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamReconnectTimeoutReq Clone() {
      return new SetTeamReconnectTimeoutReq(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 2;
    private int timeout_;
    /// <summary>
    /// 超时时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTeamReconnectTimeoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTeamReconnectTimeoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Timeout != other.Timeout) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (Timeout != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timeout);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timeout);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTeamReconnectTimeoutReq other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            Timeout = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTeamReconnectTimeoutRsp : pb::IMessage<SetTeamReconnectTimeoutRsp> {
    private static readonly pb::MessageParser<SetTeamReconnectTimeoutRsp> _parser = new pb::MessageParser<SetTeamReconnectTimeoutRsp>(() => new SetTeamReconnectTimeoutRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTeamReconnectTimeoutRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamReconnectTimeoutRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamReconnectTimeoutRsp(SetTeamReconnectTimeoutRsp other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamReconnectTimeoutRsp Clone() {
      return new SetTeamReconnectTimeoutRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTeamReconnectTimeoutRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTeamReconnectTimeoutRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTeamReconnectTimeoutRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class keyValue : pb::IMessage<keyValue> {
    private static readonly pb::MessageParser<keyValue> _parser = new pb::MessageParser<keyValue>(() => new keyValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<keyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public keyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public keyValue(keyValue other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public keyValue Clone() {
      return new keyValue(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as keyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(keyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(keyValue other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinRoomReq : pb::IMessage<JoinRoomReq> {
    private static readonly pb::MessageParser<JoinRoomReq> _parser = new pb::MessageParser<JoinRoomReq>(() => new JoinRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq(JoinRoomReq other) : this() {
      joinType_ = other.joinType_;
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      gameID_ = other.gameID_;
      RoomInfo = other.roomInfo_ != null ? other.RoomInfo.Clone() : null;
      tags_ = other.tags_.Clone();
      cpProto_ = other.cpProto_;
      WatchSetting = other.watchSetting_ != null ? other.WatchSetting.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomReq Clone() {
      return new JoinRoomReq(this);
    }

    /// <summary>Field number for the "joinType" field.</summary>
    public const int JoinTypeFieldNumber = 1;
    private global::Matchvs.JoinRoomType joinType_ = 0;
    /// <summary>
    ///具体参数根据此类型来区分需要填充参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.JoinRoomType JoinType {
      get { return joinType_; }
      set {
        joinType_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private global::Matchvs.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 3;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 4;
    private global::Matchvs.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Matchvs.keyValue> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(42, global::Matchvs.keyValue.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.keyValue> tags_ = new pbc::RepeatedField<global::Matchvs.keyValue>();
    /// <summary>
    /// 匹配标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.keyValue> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 6;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "watchSetting" field.</summary>
    public const int WatchSettingFieldNumber = 7;
    private global::Matchvs.WatchSetting watchSetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.WatchSetting WatchSetting {
      get { return watchSetting_; }
      set {
        watchSetting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JoinType != other.JoinType) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (GameID != other.GameID) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (CpProto != other.CpProto) return false;
      if (!object.Equals(WatchSetting, other.WatchSetting)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (JoinType != 0) hash ^= JoinType.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      if (watchSetting_ != null) hash ^= WatchSetting.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (JoinType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) JoinType);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (GameID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameID);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoomInfo);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (CpProto.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(CpProto);
      }
      if (watchSetting_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WatchSetting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (JoinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoinType);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      if (watchSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchSetting);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.JoinType != 0) {
        JoinType = other.JoinType;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Matchvs.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::Matchvs.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      tags_.Add(other.tags_);
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
      if (other.watchSetting_ != null) {
        if (watchSetting_ == null) {
          watchSetting_ = new global::Matchvs.WatchSetting();
        }
        WatchSetting.MergeFrom(other.WatchSetting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            joinType_ = (global::Matchvs.JoinRoomType) input.ReadEnum();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Matchvs.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 24: {
            GameID = input.ReadUInt32();
            break;
          }
          case 34: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::Matchvs.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 42: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 50: {
            CpProto = input.ReadBytes();
            break;
          }
          case 58: {
            if (watchSetting_ == null) {
              watchSetting_ = new global::Matchvs.WatchSetting();
            }
            input.ReadMessage(watchSetting_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinRoomRsp : pb::IMessage<JoinRoomRsp> {
    private static readonly pb::MessageParser<JoinRoomRsp> _parser = new pb::MessageParser<JoinRoomRsp>(() => new JoinRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp(JoinRoomRsp other) : this() {
      status_ = other.status_;
      users_ = other.users_.Clone();
      RoomInfo = other.roomInfo_ != null ? other.RoomInfo.Clone() : null;
      BookInfo = other.bookInfo_ != null ? other.BookInfo.Clone() : null;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRoomRsp Clone() {
      return new JoinRoomRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Matchvs.PlayerInfo> _repeated_users_codec
        = pb::FieldCodec.ForMessage(18, global::Matchvs.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.PlayerInfo> users_ = new pbc::RepeatedField<global::Matchvs.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.PlayerInfo> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::Matchvs.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "bookInfo" field.</summary>
    public const int BookInfoFieldNumber = 4;
    private global::Matchvs.BookInfo bookInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.BookInfo BookInfo {
      get { return bookInfo_; }
      set {
        bookInfo_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 5;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!users_.Equals(other.users_)) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (!object.Equals(BookInfo, other.BookInfo)) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= users_.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (bookInfo_ != null) hash ^= BookInfo.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      if (bookInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BookInfo);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (bookInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BookInfo);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      users_.Add(other.users_);
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::Matchvs.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.bookInfo_ != null) {
        if (bookInfo_ == null) {
          bookInfo_ = new global::Matchvs.BookInfo();
        }
        BookInfo.MergeFrom(other.BookInfo);
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::Matchvs.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 34: {
            if (bookInfo_ == null) {
              bookInfo_ = new global::Matchvs.BookInfo();
            }
            input.ReadMessage(bookInfo_);
            break;
          }
          case 42: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      userID_ = other.userID_;
      userProfile_ = other.userProfile_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userProfile" field.</summary>
    public const int UserProfileFieldNumber = 2;
    private pb::ByteString userProfile_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private uint state_;
    /// <summary>
    /// 0.网络连接正常 1.网络掉线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (UserProfile != other.UserProfile) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(UserProfile);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 18: {
            UserProfile = input.ReadBytes();
            break;
          }
          case 24: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BookInfo : pb::IMessage<BookInfo> {
    private static readonly pb::MessageParser<BookInfo> _parser = new pb::MessageParser<BookInfo>(() => new BookInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BookInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookInfo(BookInfo other) : this() {
      bookID_ = other.bookID_;
      bookKey_ = other.bookKey_;
      addr_ = other.addr_;
      wssProxy_ = other.wssProxy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookInfo Clone() {
      return new BookInfo(this);
    }

    /// <summary>Field number for the "bookID" field.</summary>
    public const int BookIDFieldNumber = 1;
    private string bookID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BookID {
      get { return bookID_; }
      set {
        bookID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bookKey" field.</summary>
    public const int BookKeyFieldNumber = 2;
    private string bookKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BookKey {
      get { return bookKey_; }
      set {
        bookKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Addr" field.</summary>
    public const int AddrFieldNumber = 3;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wssProxy" field.</summary>
    public const int WssProxyFieldNumber = 4;
    private string wssProxy_ = "";
    /// <summary>
    /// 微信小程序不能直连、wss代理
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WssProxy {
      get { return wssProxy_; }
      set {
        wssProxy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BookInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BookInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BookID != other.BookID) return false;
      if (BookKey != other.BookKey) return false;
      if (Addr != other.Addr) return false;
      if (WssProxy != other.WssProxy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BookID.Length != 0) hash ^= BookID.GetHashCode();
      if (BookKey.Length != 0) hash ^= BookKey.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (WssProxy.Length != 0) hash ^= WssProxy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BookID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BookID);
      }
      if (BookKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BookKey);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Addr);
      }
      if (WssProxy.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(WssProxy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BookID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BookID);
      }
      if (BookKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BookKey);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (WssProxy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WssProxy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BookInfo other) {
      if (other == null) {
        return;
      }
      if (other.BookID.Length != 0) {
        BookID = other.BookID;
      }
      if (other.BookKey.Length != 0) {
        BookKey = other.BookKey;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.WssProxy.Length != 0) {
        WssProxy = other.WssProxy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BookID = input.ReadString();
            break;
          }
          case 18: {
            BookKey = input.ReadString();
            break;
          }
          case 26: {
            Addr = input.ReadString();
            break;
          }
          case 34: {
            WssProxy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      roomID_ = other.roomID_;
      roomName_ = other.roomName_;
      maxPlayer_ = other.maxPlayer_;
      mode_ = other.mode_;
      canWatch_ = other.canWatch_;
      visibility_ = other.visibility_;
      roomProperty_ = other.roomProperty_;
      owner_ = other.owner_;
      state_ = other.state_;
      setID_ = other.setID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 3;
    private uint maxPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 4;
    private int mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "canWatch" field.</summary>
    public const int CanWatchFieldNumber = 5;
    private int canWatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanWatch {
      get { return canWatch_; }
      set {
        canWatch_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 6;
    private int visibility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "roomProperty" field.</summary>
    public const int RoomPropertyFieldNumber = 7;
    private pb::ByteString roomProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoomProperty {
      get { return roomProperty_; }
      set {
        roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 8;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 9;
    private global::Matchvs.RoomState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "setID" field.</summary>
    public const int SetIDFieldNumber = 10;
    private uint setID_;
    /// <summary>
    /// 房间所属节点ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetID {
      get { return setID_; }
      set {
        setID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (RoomName != other.RoomName) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if (Mode != other.Mode) return false;
      if (CanWatch != other.CanWatch) return false;
      if (Visibility != other.Visibility) return false;
      if (RoomProperty != other.RoomProperty) return false;
      if (Owner != other.Owner) return false;
      if (State != other.State) return false;
      if (SetID != other.SetID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (CanWatch != 0) hash ^= CanWatch.GetHashCode();
      if (Visibility != 0) hash ^= Visibility.GetHashCode();
      if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (SetID != 0) hash ^= SetID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxPlayer);
      }
      if (Mode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mode);
      }
      if (CanWatch != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanWatch);
      }
      if (Visibility != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Visibility);
      }
      if (RoomProperty.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(RoomProperty);
      }
      if (Owner != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Owner);
      }
      if (State != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) State);
      }
      if (SetID != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SetID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayer);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (CanWatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanWatch);
      }
      if (Visibility != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Visibility);
      }
      if (RoomProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (SetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.CanWatch != 0) {
        CanWatch = other.CanWatch;
      }
      if (other.Visibility != 0) {
        Visibility = other.Visibility;
      }
      if (other.RoomProperty.Length != 0) {
        RoomProperty = other.RoomProperty;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.SetID != 0) {
        SetID = other.SetID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 24: {
            MaxPlayer = input.ReadUInt32();
            break;
          }
          case 32: {
            Mode = input.ReadInt32();
            break;
          }
          case 40: {
            CanWatch = input.ReadInt32();
            break;
          }
          case 48: {
            Visibility = input.ReadInt32();
            break;
          }
          case 58: {
            RoomProperty = input.ReadBytes();
            break;
          }
          case 64: {
            Owner = input.ReadUInt32();
            break;
          }
          case 72: {
            state_ = (global::Matchvs.RoomState) input.ReadEnum();
            break;
          }
          case 80: {
            SetID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeJoin : pb::IMessage<NoticeJoin> {
    private static readonly pb::MessageParser<NoticeJoin> _parser = new pb::MessageParser<NoticeJoin>(() => new NoticeJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeJoin(NoticeJoin other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeJoin Clone() {
      return new NoticeJoin(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Matchvs.PlayerInfo user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.PlayerInfo User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeJoin other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Matchvs.PlayerInfo();
        }
        User.MergeFrom(other.User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Matchvs.PlayerInfo();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeLeave : pb::IMessage<NoticeLeave> {
    private static readonly pb::MessageParser<NoticeLeave> _parser = new pb::MessageParser<NoticeLeave>(() => new NoticeLeave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeLeave(NoticeLeave other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      owner_ = other.owner_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeLeave Clone() {
      return new NoticeLeave(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (Owner != other.Owner) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (Owner != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Owner);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeLeave other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            Owner = input.ReadUInt32();
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinOverReq : pb::IMessage<JoinOverReq> {
    private static readonly pb::MessageParser<JoinOverReq> _parser = new pb::MessageParser<JoinOverReq>(() => new JoinOverReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinOverReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOverReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOverReq(JoinOverReq other) : this() {
      roomID_ = other.roomID_;
      gameID_ = other.gameID_;
      cpProto_ = other.cpProto_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOverReq Clone() {
      return new JoinOverReq(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 2;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 4;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinOverReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinOverReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (GameID != other.GameID) return false;
      if (CpProto != other.CpProto) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (GameID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
      if (UserID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinOverReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            GameID = input.ReadUInt32();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
          case 32: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinOverRsp : pb::IMessage<JoinOverRsp> {
    private static readonly pb::MessageParser<JoinOverRsp> _parser = new pb::MessageParser<JoinOverRsp>(() => new JoinOverRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinOverRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOverRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOverRsp(JoinOverRsp other) : this() {
      status_ = other.status_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOverRsp Clone() {
      return new JoinOverRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    /// <summary>
    ///200.成功  403.房间关闭  404.房间不存在  500.服务器错误
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 2;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinOverRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinOverRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinOverRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinOverNotify : pb::IMessage<JoinOverNotify> {
    private static readonly pb::MessageParser<JoinOverNotify> _parser = new pb::MessageParser<JoinOverNotify>(() => new JoinOverNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinOverNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOverNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOverNotify(JoinOverNotify other) : this() {
      srcUserID_ = other.srcUserID_;
      roomID_ = other.roomID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOverNotify Clone() {
      return new JoinOverNotify(this);
    }

    /// <summary>Field number for the "srcUserID" field.</summary>
    public const int SrcUserIDFieldNumber = 1;
    private uint srcUserID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUserID {
      get { return srcUserID_; }
      set {
        srcUserID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinOverNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinOverNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcUserID != other.SrcUserID) return false;
      if (RoomID != other.RoomID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcUserID != 0) hash ^= SrcUserID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcUserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SrcUserID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcUserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUserID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinOverNotify other) {
      if (other == null) {
        return;
      }
      if (other.SrcUserID != 0) {
        SrcUserID = other.SrcUserID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcUserID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinOpenReq : pb::IMessage<JoinOpenReq> {
    private static readonly pb::MessageParser<JoinOpenReq> _parser = new pb::MessageParser<JoinOpenReq>(() => new JoinOpenReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinOpenReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOpenReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOpenReq(JoinOpenReq other) : this() {
      roomID_ = other.roomID_;
      gameID_ = other.gameID_;
      userID_ = other.userID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOpenReq Clone() {
      return new JoinOpenReq(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 2;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinOpenReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinOpenReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (GameID != other.GameID) return false;
      if (UserID != other.UserID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (GameID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinOpenReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            GameID = input.ReadUInt32();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinOpenRsp : pb::IMessage<JoinOpenRsp> {
    private static readonly pb::MessageParser<JoinOpenRsp> _parser = new pb::MessageParser<JoinOpenRsp>(() => new JoinOpenRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinOpenRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOpenRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOpenRsp(JoinOpenRsp other) : this() {
      status_ = other.status_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOpenRsp Clone() {
      return new JoinOpenRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 2;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinOpenRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinOpenRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinOpenRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinOpenNotify : pb::IMessage<JoinOpenNotify> {
    private static readonly pb::MessageParser<JoinOpenNotify> _parser = new pb::MessageParser<JoinOpenNotify>(() => new JoinOpenNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinOpenNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOpenNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOpenNotify(JoinOpenNotify other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinOpenNotify Clone() {
      return new JoinOpenNotify(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinOpenNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinOpenNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinOpenNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveRoomReq : pb::IMessage<LeaveRoomReq> {
    private static readonly pb::MessageParser<LeaveRoomReq> _parser = new pb::MessageParser<LeaveRoomReq>(() => new LeaveRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq(LeaveRoomReq other) : this() {
      userID_ = other.userID_;
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomReq Clone() {
      return new LeaveRoomReq(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 2;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 3;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (GameID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoomID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            GameID = input.ReadUInt32();
            break;
          }
          case 24: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveRoomRsp : pb::IMessage<LeaveRoomRsp> {
    private static readonly pb::MessageParser<LeaveRoomRsp> _parser = new pb::MessageParser<LeaveRoomRsp>(() => new LeaveRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp(LeaveRoomRsp other) : this() {
      status_ = other.status_;
      roomID_ = other.roomID_;
      userID_ = other.userID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveRoomRsp Clone() {
      return new LeaveRoomRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    /// <summary>
    ///200.成功  403.房间关闭  404.房间不存在  500.服务器错误
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TcpProtoHeader : pb::IMessage<TcpProtoHeader> {
    private static readonly pb::MessageParser<TcpProtoHeader> _parser = new pb::MessageParser<TcpProtoHeader>(() => new TcpProtoHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TcpProtoHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProtoHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProtoHeader(TcpProtoHeader other) : this() {
      size_ = other.size_;
      seq_ = other.seq_;
      cmd_ = other.cmd_;
      version_ = other.version_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TcpProtoHeader Clone() {
      return new TcpProtoHeader(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 2;
    private uint seq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 3;
    private uint cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 5;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TcpProtoHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TcpProtoHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Seq != other.Seq) return false;
      if (Cmd != other.Cmd) return false;
      if (Version != other.Version) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Seq != 0) hash ^= Seq.GetHashCode();
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Size);
      }
      if (Seq != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Seq);
      }
      if (Cmd != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Cmd);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Version);
      }
      if (UserID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Seq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
      }
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cmd);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TcpProtoHeader other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Seq != 0) {
        Seq = other.Seq;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Size = input.ReadUInt32();
            break;
          }
          case 16: {
            Seq = input.ReadUInt32();
            break;
          }
          case 24: {
            Cmd = input.ReadUInt32();
            break;
          }
          case 32: {
            Version = input.ReadUInt32();
            break;
          }
          case 40: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnDetailV2 : pb::IMessage<ConnDetailV2> {
    private static readonly pb::MessageParser<ConnDetailV2> _parser = new pb::MessageParser<ConnDetailV2>(() => new ConnDetailV2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnDetailV2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnDetailV2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnDetailV2(ConnDetailV2 other) : this() {
      userID_ = other.userID_;
      gameID_ = other.gameID_;
      fieldID_ = other.fieldID_;
      roomID_ = other.roomID_;
      heartBeatTime_ = other.heartBeatTime_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnDetailV2 Clone() {
      return new ConnDetailV2(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 2;
    private uint gameID_;
    /// <summary>
    ///游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "fieldID" field.</summary>
    public const int FieldIDFieldNumber = 3;
    private uint fieldID_;
    /// <summary>
    ///场次ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FieldID {
      get { return fieldID_; }
      set {
        fieldID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 4;
    private ulong roomID_;
    /// <summary>
    ///房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "heartBeatTime" field.</summary>
    public const int HeartBeatTimeFieldNumber = 5;
    private ulong heartBeatTime_;
    /// <summary>
    ///最近的心跳时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeartBeatTime {
      get { return heartBeatTime_; }
      set {
        heartBeatTime_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 6;
    private uint version_;
    /// <summary>
    ///版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnDetailV2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnDetailV2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (GameID != other.GameID) return false;
      if (FieldID != other.FieldID) return false;
      if (RoomID != other.RoomID) return false;
      if (HeartBeatTime != other.HeartBeatTime) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (FieldID != 0) hash ^= FieldID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (HeartBeatTime != 0UL) hash ^= HeartBeatTime.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (GameID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameID);
      }
      if (FieldID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FieldID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoomID);
      }
      if (HeartBeatTime != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(HeartBeatTime);
      }
      if (Version != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (FieldID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FieldID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (HeartBeatTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeartBeatTime);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnDetailV2 other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.FieldID != 0) {
        FieldID = other.FieldID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.HeartBeatTime != 0UL) {
        HeartBeatTime = other.HeartBeatTime;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            GameID = input.ReadUInt32();
            break;
          }
          case 24: {
            FieldID = input.ReadUInt32();
            break;
          }
          case 32: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 40: {
            HeartBeatTime = input.ReadUInt64();
            break;
          }
          case 48: {
            Version = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserV2 : pb::IMessage<UserV2> {
    private static readonly pb::MessageParser<UserV2> _parser = new pb::MessageParser<UserV2>(() => new UserV2());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserV2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserV2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserV2(UserV2 other) : this() {
      userId_ = other.userId_;
      gameId_ = other.gameId_;
      versionSdk_ = other.versionSdk_;
      connectionId_ = other.connectionId_;
      serviceId_ = other.serviceId_;
      deviceId_ = other.deviceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserV2 Clone() {
      return new UserV2(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    /// TODO _id 命名规则统一改为ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private uint gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "version_sdk" field.</summary>
    public const int VersionSdkFieldNumber = 3;
    private uint versionSdk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VersionSdk {
      get { return versionSdk_; }
      set {
        versionSdk_ = value;
      }
    }

    /// <summary>Field number for the "connection_id" field.</summary>
    public const int ConnectionIdFieldNumber = 4;
    private ulong connectionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = value;
      }
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 5;
    private uint serviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 6;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserV2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserV2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (GameId != other.GameId) return false;
      if (VersionSdk != other.VersionSdk) return false;
      if (ConnectionId != other.ConnectionId) return false;
      if (ServiceId != other.ServiceId) return false;
      if (DeviceId != other.DeviceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (VersionSdk != 0) hash ^= VersionSdk.GetHashCode();
      if (ConnectionId != 0UL) hash ^= ConnectionId.GetHashCode();
      if (ServiceId != 0) hash ^= ServiceId.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (GameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameId);
      }
      if (VersionSdk != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(VersionSdk);
      }
      if (ConnectionId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ConnectionId);
      }
      if (ServiceId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ServiceId);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeviceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      if (VersionSdk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionSdk);
      }
      if (ConnectionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConnectionId);
      }
      if (ServiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServiceId);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserV2 other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.VersionSdk != 0) {
        VersionSdk = other.VersionSdk;
      }
      if (other.ConnectionId != 0UL) {
        ConnectionId = other.ConnectionId;
      }
      if (other.ServiceId != 0) {
        ServiceId = other.ServiceId;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 16: {
            GameId = input.ReadUInt32();
            break;
          }
          case 24: {
            VersionSdk = input.ReadUInt32();
            break;
          }
          case 32: {
            ConnectionId = input.ReadUInt64();
            break;
          }
          case 40: {
            ServiceId = input.ReadUInt32();
            break;
          }
          case 50: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomNetworkStateNotify : pb::IMessage<RoomNetworkStateNotify> {
    private static readonly pb::MessageParser<RoomNetworkStateNotify> _parser = new pb::MessageParser<RoomNetworkStateNotify>(() => new RoomNetworkStateNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomNetworkStateNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomNetworkStateNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomNetworkStateNotify(RoomNetworkStateNotify other) : this() {
      roomID_ = other.roomID_;
      userID_ = other.userID_;
      state_ = other.state_;
      owner_ = other.owner_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomNetworkStateNotify Clone() {
      return new RoomNetworkStateNotify(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private uint state_;
    /// <summary>
    /// 1.网络异常、正在重连 2.重连成功 3.重连失败，退出房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomNetworkStateNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomNetworkStateNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      if (State != other.State) return false;
      if (Owner != other.Owner) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(State);
      }
      if (Owner != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Owner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomNetworkStateNotify other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 24: {
            State = input.ReadUInt32();
            break;
          }
          case 32: {
            Owner = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建房间
  /// </summary>
  public sealed partial class CreateRoom : pb::IMessage<CreateRoom> {
    private static readonly pb::MessageParser<CreateRoom> _parser = new pb::MessageParser<CreateRoom>(() => new CreateRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom(CreateRoom other) : this() {
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      gameID_ = other.gameID_;
      RoomInfo = other.roomInfo_ != null ? other.RoomInfo.Clone() : null;
      WatchSetting = other.watchSetting_ != null ? other.WatchSetting.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoom Clone() {
      return new CreateRoom(this);
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 1;
    private global::Matchvs.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 2;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::Matchvs.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "watchSetting" field.</summary>
    public const int WatchSettingFieldNumber = 4;
    private global::Matchvs.WatchSetting watchSetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.WatchSetting WatchSetting {
      get { return watchSetting_; }
      set {
        watchSetting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (GameID != other.GameID) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (!object.Equals(WatchSetting, other.WatchSetting)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (watchSetting_ != null) hash ^= WatchSetting.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      if (GameID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameID);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      if (watchSetting_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WatchSetting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (watchSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchSetting);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoom other) {
      if (other == null) {
        return;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Matchvs.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::Matchvs.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.watchSetting_ != null) {
        if (watchSetting_ == null) {
          watchSetting_ = new global::Matchvs.WatchSetting();
        }
        WatchSetting.MergeFrom(other.WatchSetting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Matchvs.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 16: {
            GameID = input.ReadUInt32();
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::Matchvs.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 34: {
            if (watchSetting_ == null) {
              watchSetting_ = new global::Matchvs.WatchSetting();
            }
            input.ReadMessage(watchSetting_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateRoomRsp : pb::IMessage<CreateRoomRsp> {
    private static readonly pb::MessageParser<CreateRoomRsp> _parser = new pb::MessageParser<CreateRoomRsp>(() => new CreateRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp(CreateRoomRsp other) : this() {
      status_ = other.status_;
      roomID_ = other.roomID_;
      BookInfo = other.bookInfo_ != null ? other.BookInfo.Clone() : null;
      owner_ = other.owner_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomRsp Clone() {
      return new CreateRoomRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    /// <summary>
    /// 200.成功  403.房间关闭  404.房间不存在  500.服务器错误
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "bookInfo" field.</summary>
    public const int BookInfoFieldNumber = 3;
    private global::Matchvs.BookInfo bookInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.BookInfo BookInfo {
      get { return bookInfo_; }
      set {
        bookInfo_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (RoomID != other.RoomID) return false;
      if (!object.Equals(BookInfo, other.BookInfo)) return false;
      if (Owner != other.Owner) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (bookInfo_ != null) hash ^= BookInfo.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (bookInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BookInfo);
      }
      if (Owner != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Owner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (bookInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BookInfo);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.bookInfo_ != null) {
        if (bookInfo_ == null) {
          bookInfo_ = new global::Matchvs.BookInfo();
        }
        BookInfo.MergeFrom(other.BookInfo);
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 26: {
            if (bookInfo_ == null) {
              bookInfo_ = new global::Matchvs.BookInfo();
            }
            input.ReadMessage(bookInfo_);
            break;
          }
          case 32: {
            Owner = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求房间列表
  /// </summary>
  public sealed partial class GetRoomList : pb::IMessage<GetRoomList> {
    private static readonly pb::MessageParser<GetRoomList> _parser = new pb::MessageParser<GetRoomList>(() => new GetRoomList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomList(GetRoomList other) : this() {
      gameID_ = other.gameID_;
      RoomFilter = other.roomFilter_ != null ? other.RoomFilter.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomList Clone() {
      return new GetRoomList(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    /// <summary>
    /// 游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomFilter" field.</summary>
    public const int RoomFilterFieldNumber = 2;
    private global::Matchvs.RoomFilter roomFilter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomFilter RoomFilter {
      get { return roomFilter_; }
      set {
        roomFilter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (!object.Equals(RoomFilter, other.RoomFilter)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (roomFilter_ != null) hash ^= RoomFilter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (roomFilter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomFilter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (roomFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomFilter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomList other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.roomFilter_ != null) {
        if (roomFilter_ == null) {
          roomFilter_ = new global::Matchvs.RoomFilter();
        }
        RoomFilter.MergeFrom(other.RoomFilter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (roomFilter_ == null) {
              roomFilter_ = new global::Matchvs.RoomFilter();
            }
            input.ReadMessage(roomFilter_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomFilter : pb::IMessage<RoomFilter> {
    private static readonly pb::MessageParser<RoomFilter> _parser = new pb::MessageParser<RoomFilter>(() => new RoomFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFilter(RoomFilter other) : this() {
      maxPlayer_ = other.maxPlayer_;
      mode_ = other.mode_;
      canWatch_ = other.canWatch_;
      roomProperty_ = other.roomProperty_;
      full_ = other.full_;
      state_ = other.state_;
      getSystemRoom_ = other.getSystemRoom_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomFilter Clone() {
      return new RoomFilter(this);
    }

    /// <summary>Field number for the "maxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 1;
    private uint maxPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private int mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "canWatch" field.</summary>
    public const int CanWatchFieldNumber = 3;
    private int canWatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanWatch {
      get { return canWatch_; }
      set {
        canWatch_ = value;
      }
    }

    /// <summary>Field number for the "roomProperty" field.</summary>
    public const int RoomPropertyFieldNumber = 4;
    private pb::ByteString roomProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoomProperty {
      get { return roomProperty_; }
      set {
        roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "full" field.</summary>
    public const int FullFieldNumber = 5;
    private int full_;
    /// <summary>
    /// 是否获取未满房间，0全部、1房间已满、2房间未满
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Full {
      get { return full_; }
      set {
        full_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::Matchvs.RoomState state_ = 0;
    /// <summary>
    /// 房间状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "getSystemRoom" field.</summary>
    public const int GetSystemRoomFieldNumber = 7;
    private int getSystemRoom_;
    /// <summary>
    /// 是否获取系统创建的房间（随机匹配、属性匹配创建的房间）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetSystemRoom {
      get { return getSystemRoom_; }
      set {
        getSystemRoom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxPlayer != other.MaxPlayer) return false;
      if (Mode != other.Mode) return false;
      if (CanWatch != other.CanWatch) return false;
      if (RoomProperty != other.RoomProperty) return false;
      if (Full != other.Full) return false;
      if (State != other.State) return false;
      if (GetSystemRoom != other.GetSystemRoom) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (CanWatch != 0) hash ^= CanWatch.GetHashCode();
      if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
      if (Full != 0) hash ^= Full.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (GetSystemRoom != 0) hash ^= GetSystemRoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPlayer != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxPlayer);
      }
      if (Mode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mode);
      }
      if (CanWatch != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CanWatch);
      }
      if (RoomProperty.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RoomProperty);
      }
      if (Full != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Full);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (GetSystemRoom != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GetSystemRoom);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayer);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (CanWatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanWatch);
      }
      if (RoomProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
      }
      if (Full != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Full);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (GetSystemRoom != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetSystemRoom);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomFilter other) {
      if (other == null) {
        return;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.CanWatch != 0) {
        CanWatch = other.CanWatch;
      }
      if (other.RoomProperty.Length != 0) {
        RoomProperty = other.RoomProperty;
      }
      if (other.Full != 0) {
        Full = other.Full;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.GetSystemRoom != 0) {
        GetSystemRoom = other.GetSystemRoom;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxPlayer = input.ReadUInt32();
            break;
          }
          case 16: {
            Mode = input.ReadInt32();
            break;
          }
          case 24: {
            CanWatch = input.ReadInt32();
            break;
          }
          case 34: {
            RoomProperty = input.ReadBytes();
            break;
          }
          case 40: {
            Full = input.ReadInt32();
            break;
          }
          case 48: {
            state_ = (global::Matchvs.RoomState) input.ReadEnum();
            break;
          }
          case 56: {
            GetSystemRoom = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRoomListRsp : pb::IMessage<GetRoomListRsp> {
    private static readonly pb::MessageParser<GetRoomListRsp> _parser = new pb::MessageParser<GetRoomListRsp>(() => new GetRoomListRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomListRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRsp(GetRoomListRsp other) : this() {
      status_ = other.status_;
      roomInfo_ = other.roomInfo_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListRsp Clone() {
      return new GetRoomListRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Matchvs.RoomInfo> _repeated_roomInfo_codec
        = pb::FieldCodec.ForMessage(18, global::Matchvs.RoomInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.RoomInfo> roomInfo_ = new pbc::RepeatedField<global::Matchvs.RoomInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.RoomInfo> RoomInfo {
      get { return roomInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomListRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomListRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!roomInfo_.Equals(other.roomInfo_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= roomInfo_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      roomInfo_.WriteTo(output, _repeated_roomInfo_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += roomInfo_.CalculateSize(_repeated_roomInfo_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomListRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      roomInfo_.Add(other.roomInfo_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            roomInfo_.AddEntriesFrom(input, _repeated_roomInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求房间列表扩展
  /// </summary>
  public sealed partial class GetRoomListExReq : pb::IMessage<GetRoomListExReq> {
    private static readonly pb::MessageParser<GetRoomListExReq> _parser = new pb::MessageParser<GetRoomListExReq>(() => new GetRoomListExReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomListExReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListExReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListExReq(GetRoomListExReq other) : this() {
      gameID_ = other.gameID_;
      RoomFilter = other.roomFilter_ != null ? other.RoomFilter.Clone() : null;
      sort_ = other.sort_;
      order_ = other.order_;
      pageNo_ = other.pageNo_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListExReq Clone() {
      return new GetRoomListExReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    /// <summary>
    /// 游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomFilter" field.</summary>
    public const int RoomFilterFieldNumber = 2;
    private global::Matchvs.RoomFilter roomFilter_;
    /// <summary>
    /// 房间过滤条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomFilter RoomFilter {
      get { return roomFilter_; }
      set {
        roomFilter_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 3;
    private global::Matchvs.RoomListSort sort_ = 0;
    /// <summary>
    /// 排序依据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomListSort Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 4;
    private global::Matchvs.SortOrder order_ = 0;
    /// <summary>
    /// 排序方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.SortOrder Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "pageNo" field.</summary>
    public const int PageNoFieldNumber = 5;
    private int pageNo_;
    /// <summary>
    /// 页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageNo {
      get { return pageNo_; }
      set {
        pageNo_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 6;
    private int pageSize_;
    /// <summary>
    /// 每页条目数，默认10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomListExReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomListExReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (!object.Equals(RoomFilter, other.RoomFilter)) return false;
      if (Sort != other.Sort) return false;
      if (Order != other.Order) return false;
      if (PageNo != other.PageNo) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (roomFilter_ != null) hash ^= RoomFilter.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      if (PageNo != 0) hash ^= PageNo.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (roomFilter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomFilter);
      }
      if (Sort != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Sort);
      }
      if (Order != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Order);
      }
      if (PageNo != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageNo);
      }
      if (PageSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (roomFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomFilter);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sort);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Order);
      }
      if (PageNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageNo);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomListExReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.roomFilter_ != null) {
        if (roomFilter_ == null) {
          roomFilter_ = new global::Matchvs.RoomFilter();
        }
        RoomFilter.MergeFrom(other.RoomFilter);
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      if (other.PageNo != 0) {
        PageNo = other.PageNo;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (roomFilter_ == null) {
              roomFilter_ = new global::Matchvs.RoomFilter();
            }
            input.ReadMessage(roomFilter_);
            break;
          }
          case 24: {
            sort_ = (global::Matchvs.RoomListSort) input.ReadEnum();
            break;
          }
          case 32: {
            order_ = (global::Matchvs.SortOrder) input.ReadEnum();
            break;
          }
          case 40: {
            PageNo = input.ReadInt32();
            break;
          }
          case 48: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomInfoEx : pb::IMessage<RoomInfoEx> {
    private static readonly pb::MessageParser<RoomInfoEx> _parser = new pb::MessageParser<RoomInfoEx>(() => new RoomInfoEx());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfoEx> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoEx() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoEx(RoomInfoEx other) : this() {
      roomID_ = other.roomID_;
      roomName_ = other.roomName_;
      maxPlayer_ = other.maxPlayer_;
      gamePlayer_ = other.gamePlayer_;
      watchPlayer_ = other.watchPlayer_;
      mode_ = other.mode_;
      canWatch_ = other.canWatch_;
      roomProperty_ = other.roomProperty_;
      owner_ = other.owner_;
      state_ = other.state_;
      createTime_ = other.createTime_;
      WatchInfo = other.watchInfo_ != null ? other.WatchInfo.Clone() : null;
      setID_ = other.setID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoEx Clone() {
      return new RoomInfoEx(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 3;
    private uint maxPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "gamePlayer" field.</summary>
    public const int GamePlayerFieldNumber = 4;
    private uint gamePlayer_;
    /// <summary>
    /// 游戏人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GamePlayer {
      get { return gamePlayer_; }
      set {
        gamePlayer_ = value;
      }
    }

    /// <summary>Field number for the "watchPlayer" field.</summary>
    public const int WatchPlayerFieldNumber = 5;
    private uint watchPlayer_;
    /// <summary>
    /// 观战人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WatchPlayer {
      get { return watchPlayer_; }
      set {
        watchPlayer_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 6;
    private int mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "canWatch" field.</summary>
    public const int CanWatchFieldNumber = 7;
    private int canWatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanWatch {
      get { return canWatch_; }
      set {
        canWatch_ = value;
      }
    }

    /// <summary>Field number for the "roomProperty" field.</summary>
    public const int RoomPropertyFieldNumber = 8;
    private pb::ByteString roomProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoomProperty {
      get { return roomProperty_; }
      set {
        roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 9;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 10;
    private global::Matchvs.RoomState state_ = 0;
    /// <summary>
    /// 房间状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 11;
    private ulong createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "watchInfo" field.</summary>
    public const int WatchInfoFieldNumber = 12;
    private global::Matchvs.WatchInfo watchInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.WatchInfo WatchInfo {
      get { return watchInfo_; }
      set {
        watchInfo_ = value;
      }
    }

    /// <summary>Field number for the "setID" field.</summary>
    public const int SetIDFieldNumber = 13;
    private uint setID_;
    /// <summary>
    /// 房间所属节点ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetID {
      get { return setID_; }
      set {
        setID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfoEx);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfoEx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (RoomName != other.RoomName) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if (GamePlayer != other.GamePlayer) return false;
      if (WatchPlayer != other.WatchPlayer) return false;
      if (Mode != other.Mode) return false;
      if (CanWatch != other.CanWatch) return false;
      if (RoomProperty != other.RoomProperty) return false;
      if (Owner != other.Owner) return false;
      if (State != other.State) return false;
      if (CreateTime != other.CreateTime) return false;
      if (!object.Equals(WatchInfo, other.WatchInfo)) return false;
      if (SetID != other.SetID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (GamePlayer != 0) hash ^= GamePlayer.GetHashCode();
      if (WatchPlayer != 0) hash ^= WatchPlayer.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (CanWatch != 0) hash ^= CanWatch.GetHashCode();
      if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
      if (watchInfo_ != null) hash ^= WatchInfo.GetHashCode();
      if (SetID != 0) hash ^= SetID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxPlayer);
      }
      if (GamePlayer != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GamePlayer);
      }
      if (WatchPlayer != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(WatchPlayer);
      }
      if (Mode != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Mode);
      }
      if (CanWatch != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CanWatch);
      }
      if (RoomProperty.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(RoomProperty);
      }
      if (Owner != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Owner);
      }
      if (State != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) State);
      }
      if (CreateTime != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(CreateTime);
      }
      if (watchInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(WatchInfo);
      }
      if (SetID != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(SetID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayer);
      }
      if (GamePlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamePlayer);
      }
      if (WatchPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WatchPlayer);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (CanWatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanWatch);
      }
      if (RoomProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (CreateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
      }
      if (watchInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchInfo);
      }
      if (SetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfoEx other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.GamePlayer != 0) {
        GamePlayer = other.GamePlayer;
      }
      if (other.WatchPlayer != 0) {
        WatchPlayer = other.WatchPlayer;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.CanWatch != 0) {
        CanWatch = other.CanWatch;
      }
      if (other.RoomProperty.Length != 0) {
        RoomProperty = other.RoomProperty;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.CreateTime != 0UL) {
        CreateTime = other.CreateTime;
      }
      if (other.watchInfo_ != null) {
        if (watchInfo_ == null) {
          watchInfo_ = new global::Matchvs.WatchInfo();
        }
        WatchInfo.MergeFrom(other.WatchInfo);
      }
      if (other.SetID != 0) {
        SetID = other.SetID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 24: {
            MaxPlayer = input.ReadUInt32();
            break;
          }
          case 32: {
            GamePlayer = input.ReadUInt32();
            break;
          }
          case 40: {
            WatchPlayer = input.ReadUInt32();
            break;
          }
          case 48: {
            Mode = input.ReadInt32();
            break;
          }
          case 56: {
            CanWatch = input.ReadInt32();
            break;
          }
          case 66: {
            RoomProperty = input.ReadBytes();
            break;
          }
          case 72: {
            Owner = input.ReadUInt32();
            break;
          }
          case 80: {
            state_ = (global::Matchvs.RoomState) input.ReadEnum();
            break;
          }
          case 88: {
            CreateTime = input.ReadUInt64();
            break;
          }
          case 98: {
            if (watchInfo_ == null) {
              watchInfo_ = new global::Matchvs.WatchInfo();
            }
            input.ReadMessage(watchInfo_);
            break;
          }
          case 104: {
            SetID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRoomListExRsp : pb::IMessage<GetRoomListExRsp> {
    private static readonly pb::MessageParser<GetRoomListExRsp> _parser = new pb::MessageParser<GetRoomListExRsp>(() => new GetRoomListExRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomListExRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListExRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListExRsp(GetRoomListExRsp other) : this() {
      status_ = other.status_;
      total_ = other.total_;
      roomInfoEx_ = other.roomInfoEx_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomListExRsp Clone() {
      return new GetRoomListExRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    /// <summary>
    /// 200.成功
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "roomInfoEx" field.</summary>
    public const int RoomInfoExFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Matchvs.RoomInfoEx> _repeated_roomInfoEx_codec
        = pb::FieldCodec.ForMessage(26, global::Matchvs.RoomInfoEx.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.RoomInfoEx> roomInfoEx_ = new pbc::RepeatedField<global::Matchvs.RoomInfoEx>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.RoomInfoEx> RoomInfoEx {
      get { return roomInfoEx_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomListExRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomListExRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Total != other.Total) return false;
      if(!roomInfoEx_.Equals(other.roomInfoEx_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      hash ^= roomInfoEx_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Total != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Total);
      }
      roomInfoEx_.WriteTo(output, _repeated_roomInfoEx_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      size += roomInfoEx_.CalculateSize(_repeated_roomInfoEx_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomListExRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      roomInfoEx_.Add(other.roomInfoEx_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            Total = input.ReadInt32();
            break;
          }
          case 26: {
            roomInfoEx_.AddEntriesFrom(input, _repeated_roomInfoEx_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///踢人
  /// </summary>
  public sealed partial class KickPlayer : pb::IMessage<KickPlayer> {
    private static readonly pb::MessageParser<KickPlayer> _parser = new pb::MessageParser<KickPlayer>(() => new KickPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickPlayer(KickPlayer other) : this() {
      roomID_ = other.roomID_;
      srcUserID_ = other.srcUserID_;
      userID_ = other.userID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickPlayer Clone() {
      return new KickPlayer(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "srcUserID" field.</summary>
    public const int SrcUserIDFieldNumber = 2;
    private uint srcUserID_;
    /// <summary>
    /// 踢人者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUserID {
      get { return srcUserID_; }
      set {
        srcUserID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    /// <summary>
    /// 被踢者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    /// <summary>
    /// 客户端自定义内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (SrcUserID != other.SrcUserID) return false;
      if (UserID != other.UserID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (SrcUserID != 0) hash ^= SrcUserID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (SrcUserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SrcUserID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (SrcUserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUserID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickPlayer other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.SrcUserID != 0) {
        SrcUserID = other.SrcUserID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            SrcUserID = input.ReadUInt32();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KickPlayerRsp : pb::IMessage<KickPlayerRsp> {
    private static readonly pb::MessageParser<KickPlayerRsp> _parser = new pb::MessageParser<KickPlayerRsp>(() => new KickPlayerRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickPlayerRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickPlayerRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickPlayerRsp(KickPlayerRsp other) : this() {
      status_ = other.status_;
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      owner_ = other.owner_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickPlayerRsp Clone() {
      return new KickPlayerRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    /// <summary>
    /// 被踢者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 3;
    private ulong roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickPlayerRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickPlayerRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (Owner != other.Owner) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoomID);
      }
      if (Owner != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Owner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickPlayerRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 24: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 32: {
            Owner = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KickPlayerNotify : pb::IMessage<KickPlayerNotify> {
    private static readonly pb::MessageParser<KickPlayerNotify> _parser = new pb::MessageParser<KickPlayerNotify>(() => new KickPlayerNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickPlayerNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickPlayerNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickPlayerNotify(KickPlayerNotify other) : this() {
      srcUserID_ = other.srcUserID_;
      userID_ = other.userID_;
      cpProto_ = other.cpProto_;
      owner_ = other.owner_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickPlayerNotify Clone() {
      return new KickPlayerNotify(this);
    }

    /// <summary>Field number for the "srcUserID" field.</summary>
    public const int SrcUserIDFieldNumber = 1;
    private uint srcUserID_;
    /// <summary>
    /// 踢人者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUserID {
      get { return srcUserID_; }
      set {
        srcUserID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    /// <summary>
    /// 被踢者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    /// <summary>
    /// 客户端自定义内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickPlayerNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickPlayerNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcUserID != other.SrcUserID) return false;
      if (UserID != other.UserID) return false;
      if (CpProto != other.CpProto) return false;
      if (Owner != other.Owner) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcUserID != 0) hash ^= SrcUserID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcUserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SrcUserID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
      if (Owner != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Owner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcUserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUserID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickPlayerNotify other) {
      if (other == null) {
        return;
      }
      if (other.SrcUserID != 0) {
        SrcUserID = other.SrcUserID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcUserID = input.ReadUInt32();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
          case 32: {
            Owner = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取房间详情
  /// </summary>
  public sealed partial class GetRoomDetailReq : pb::IMessage<GetRoomDetailReq> {
    private static readonly pb::MessageParser<GetRoomDetailReq> _parser = new pb::MessageParser<GetRoomDetailReq>(() => new GetRoomDetailReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomDetailReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomDetailReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomDetailReq(GetRoomDetailReq other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      latestWatcherNum_ = other.latestWatcherNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomDetailReq Clone() {
      return new GetRoomDetailReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    /// <summary>
    /// 游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "latestWatcherNum" field.</summary>
    public const int LatestWatcherNumFieldNumber = 3;
    private uint latestWatcherNum_;
    /// <summary>
    /// 最新加入的观战人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LatestWatcherNum {
      get { return latestWatcherNum_; }
      set {
        latestWatcherNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomDetailReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomDetailReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (LatestWatcherNum != other.LatestWatcherNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (LatestWatcherNum != 0) hash ^= LatestWatcherNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (LatestWatcherNum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LatestWatcherNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (LatestWatcherNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatestWatcherNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomDetailReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.LatestWatcherNum != 0) {
        LatestWatcherNum = other.LatestWatcherNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            LatestWatcherNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRoomDetailRsp : pb::IMessage<GetRoomDetailRsp> {
    private static readonly pb::MessageParser<GetRoomDetailRsp> _parser = new pb::MessageParser<GetRoomDetailRsp>(() => new GetRoomDetailRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRoomDetailRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomDetailRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomDetailRsp(GetRoomDetailRsp other) : this() {
      status_ = other.status_;
      RoomDetail = other.roomDetail_ != null ? other.RoomDetail.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRoomDetailRsp Clone() {
      return new GetRoomDetailRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomDetail" field.</summary>
    public const int RoomDetailFieldNumber = 2;
    private global::Matchvs.RoomDetail roomDetail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomDetail RoomDetail {
      get { return roomDetail_; }
      set {
        roomDetail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRoomDetailRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRoomDetailRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(RoomDetail, other.RoomDetail)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (roomDetail_ != null) hash ^= RoomDetail.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (roomDetail_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomDetail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (roomDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomDetail);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRoomDetailRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.roomDetail_ != null) {
        if (roomDetail_ == null) {
          roomDetail_ = new global::Matchvs.RoomDetail();
        }
        RoomDetail.MergeFrom(other.RoomDetail);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (roomDetail_ == null) {
              roomDetail_ = new global::Matchvs.RoomDetail();
            }
            input.ReadMessage(roomDetail_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomDetail : pb::IMessage<RoomDetail> {
    private static readonly pb::MessageParser<RoomDetail> _parser = new pb::MessageParser<RoomDetail>(() => new RoomDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomDetail(RoomDetail other) : this() {
      roomID_ = other.roomID_;
      state_ = other.state_;
      maxPlayer_ = other.maxPlayer_;
      mode_ = other.mode_;
      canWatch_ = other.canWatch_;
      roomProperty_ = other.roomProperty_;
      owner_ = other.owner_;
      createFlag_ = other.createFlag_;
      playerInfos_ = other.playerInfos_.Clone();
      WatchRoom = other.watchRoom_ != null ? other.WatchRoom.Clone() : null;
      brigades_ = other.brigades_.Clone();
      setID_ = other.setID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomDetail Clone() {
      return new RoomDetail(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Matchvs.RoomState state_ = 0;
    /// <summary>
    /// 开放/关闭
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "maxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 3;
    private uint maxPlayer_;
    /// <summary>
    /// 最大人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 4;
    private int mode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "canWatch" field.</summary>
    public const int CanWatchFieldNumber = 5;
    private int canWatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CanWatch {
      get { return canWatch_; }
      set {
        canWatch_ = value;
      }
    }

    /// <summary>Field number for the "roomProperty" field.</summary>
    public const int RoomPropertyFieldNumber = 6;
    private pb::ByteString roomProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoomProperty {
      get { return roomProperty_; }
      set {
        roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 7;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "createFlag" field.</summary>
    public const int CreateFlagFieldNumber = 8;
    private uint createFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateFlag {
      get { return createFlag_; }
      set {
        createFlag_ = value;
      }
    }

    /// <summary>Field number for the "playerInfos" field.</summary>
    public const int PlayerInfosFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Matchvs.PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(74, global::Matchvs.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::Matchvs.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
    }

    /// <summary>Field number for the "watchRoom" field.</summary>
    public const int WatchRoomFieldNumber = 10;
    private global::Matchvs.WatchRoom watchRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.WatchRoom WatchRoom {
      get { return watchRoom_; }
      set {
        watchRoom_ = value;
      }
    }

    /// <summary>Field number for the "brigades" field.</summary>
    public const int BrigadesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Matchvs.BrigadeInfo> _repeated_brigades_codec
        = pb::FieldCodec.ForMessage(90, global::Matchvs.BrigadeInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.BrigadeInfo> brigades_ = new pbc::RepeatedField<global::Matchvs.BrigadeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.BrigadeInfo> Brigades {
      get { return brigades_; }
    }

    /// <summary>Field number for the "setID" field.</summary>
    public const int SetIDFieldNumber = 12;
    private uint setID_;
    /// <summary>
    /// 房间所属节点ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetID {
      get { return setID_; }
      set {
        setID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (State != other.State) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if (Mode != other.Mode) return false;
      if (CanWatch != other.CanWatch) return false;
      if (RoomProperty != other.RoomProperty) return false;
      if (Owner != other.Owner) return false;
      if (CreateFlag != other.CreateFlag) return false;
      if(!playerInfos_.Equals(other.playerInfos_)) return false;
      if (!object.Equals(WatchRoom, other.WatchRoom)) return false;
      if(!brigades_.Equals(other.brigades_)) return false;
      if (SetID != other.SetID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (CanWatch != 0) hash ^= CanWatch.GetHashCode();
      if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (CreateFlag != 0) hash ^= CreateFlag.GetHashCode();
      hash ^= playerInfos_.GetHashCode();
      if (watchRoom_ != null) hash ^= WatchRoom.GetHashCode();
      hash ^= brigades_.GetHashCode();
      if (SetID != 0) hash ^= SetID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxPlayer);
      }
      if (Mode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mode);
      }
      if (CanWatch != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CanWatch);
      }
      if (RoomProperty.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(RoomProperty);
      }
      if (Owner != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Owner);
      }
      if (CreateFlag != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CreateFlag);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      if (watchRoom_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WatchRoom);
      }
      brigades_.WriteTo(output, _repeated_brigades_codec);
      if (SetID != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SetID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayer);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (CanWatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanWatch);
      }
      if (RoomProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      if (CreateFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateFlag);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      if (watchRoom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchRoom);
      }
      size += brigades_.CalculateSize(_repeated_brigades_codec);
      if (SetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomDetail other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.CanWatch != 0) {
        CanWatch = other.CanWatch;
      }
      if (other.RoomProperty.Length != 0) {
        RoomProperty = other.RoomProperty;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.CreateFlag != 0) {
        CreateFlag = other.CreateFlag;
      }
      playerInfos_.Add(other.playerInfos_);
      if (other.watchRoom_ != null) {
        if (watchRoom_ == null) {
          watchRoom_ = new global::Matchvs.WatchRoom();
        }
        WatchRoom.MergeFrom(other.WatchRoom);
      }
      brigades_.Add(other.brigades_);
      if (other.SetID != 0) {
        SetID = other.SetID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            state_ = (global::Matchvs.RoomState) input.ReadEnum();
            break;
          }
          case 24: {
            MaxPlayer = input.ReadUInt32();
            break;
          }
          case 32: {
            Mode = input.ReadInt32();
            break;
          }
          case 40: {
            CanWatch = input.ReadInt32();
            break;
          }
          case 50: {
            RoomProperty = input.ReadBytes();
            break;
          }
          case 56: {
            Owner = input.ReadUInt32();
            break;
          }
          case 64: {
            CreateFlag = input.ReadUInt32();
            break;
          }
          case 74: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 82: {
            if (watchRoom_ == null) {
              watchRoom_ = new global::Matchvs.WatchRoom();
            }
            input.ReadMessage(watchRoom_);
            break;
          }
          case 90: {
            brigades_.AddEntriesFrom(input, _repeated_brigades_codec);
            break;
          }
          case 96: {
            SetID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetRoomPropertyReq : pb::IMessage<SetRoomPropertyReq> {
    private static readonly pb::MessageParser<SetRoomPropertyReq> _parser = new pb::MessageParser<SetRoomPropertyReq>(() => new SetRoomPropertyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRoomPropertyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRoomPropertyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRoomPropertyReq(SetRoomPropertyReq other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      userID_ = other.userID_;
      roomProperty_ = other.roomProperty_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRoomPropertyReq Clone() {
      return new SetRoomPropertyReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomProperty" field.</summary>
    public const int RoomPropertyFieldNumber = 4;
    private pb::ByteString roomProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoomProperty {
      get { return roomProperty_; }
      set {
        roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetRoomPropertyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetRoomPropertyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      if (RoomProperty != other.RoomProperty) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (RoomProperty.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RoomProperty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (RoomProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetRoomPropertyReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.RoomProperty.Length != 0) {
        RoomProperty = other.RoomProperty;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            RoomProperty = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetRoomPropertyRsp : pb::IMessage<SetRoomPropertyRsp> {
    private static readonly pb::MessageParser<SetRoomPropertyRsp> _parser = new pb::MessageParser<SetRoomPropertyRsp>(() => new SetRoomPropertyRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRoomPropertyRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRoomPropertyRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRoomPropertyRsp(SetRoomPropertyRsp other) : this() {
      status_ = other.status_;
      roomID_ = other.roomID_;
      userID_ = other.userID_;
      roomProperty_ = other.roomProperty_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetRoomPropertyRsp Clone() {
      return new SetRoomPropertyRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomProperty" field.</summary>
    public const int RoomPropertyFieldNumber = 4;
    private pb::ByteString roomProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoomProperty {
      get { return roomProperty_; }
      set {
        roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetRoomPropertyRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetRoomPropertyRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      if (RoomProperty != other.RoomProperty) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (RoomProperty.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RoomProperty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (RoomProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetRoomPropertyRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.RoomProperty.Length != 0) {
        RoomProperty = other.RoomProperty;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            RoomProperty = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeRoomProperty : pb::IMessage<NoticeRoomProperty> {
    private static readonly pb::MessageParser<NoticeRoomProperty> _parser = new pb::MessageParser<NoticeRoomProperty>(() => new NoticeRoomProperty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeRoomProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeRoomProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeRoomProperty(NoticeRoomProperty other) : this() {
      roomID_ = other.roomID_;
      userID_ = other.userID_;
      roomProperty_ = other.roomProperty_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeRoomProperty Clone() {
      return new NoticeRoomProperty(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomProperty" field.</summary>
    public const int RoomPropertyFieldNumber = 3;
    private pb::ByteString roomProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoomProperty {
      get { return roomProperty_; }
      set {
        roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeRoomProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeRoomProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      if (RoomProperty != other.RoomProperty) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (RoomProperty.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RoomProperty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (RoomProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeRoomProperty other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.RoomProperty.Length != 0) {
        RoomProperty = other.RoomProperty;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 26: {
            RoomProperty = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 观战配置
  /// </summary>
  public sealed partial class WatchSetting : pb::IMessage<WatchSetting> {
    private static readonly pb::MessageParser<WatchSetting> _parser = new pb::MessageParser<WatchSetting>(() => new WatchSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchSetting(WatchSetting other) : this() {
      maxWatch_ = other.maxWatch_;
      watchPersistent_ = other.watchPersistent_;
      watchDelayMs_ = other.watchDelayMs_;
      cacheTime_ = other.cacheTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchSetting Clone() {
      return new WatchSetting(this);
    }

    /// <summary>Field number for the "maxWatch" field.</summary>
    public const int MaxWatchFieldNumber = 1;
    private uint maxWatch_;
    /// <summary>
    /// 最大观战人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxWatch {
      get { return maxWatch_; }
      set {
        maxWatch_ = value;
      }
    }

    /// <summary>Field number for the "watchPersistent" field.</summary>
    public const int WatchPersistentFieldNumber = 2;
    private bool watchPersistent_;
    /// <summary>
    /// 观战是否持久化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WatchPersistent {
      get { return watchPersistent_; }
      set {
        watchPersistent_ = value;
      }
    }

    /// <summary>Field number for the "watchDelayMs" field.</summary>
    public const int WatchDelayMsFieldNumber = 3;
    private uint watchDelayMs_;
    /// <summary>
    /// 观战延迟时间，单位为毫秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WatchDelayMs {
      get { return watchDelayMs_; }
      set {
        watchDelayMs_ = value;
      }
    }

    /// <summary>Field number for the "cacheTime" field.</summary>
    public const int CacheTimeFieldNumber = 4;
    private uint cacheTime_;
    /// <summary>
    /// 缓存时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CacheTime {
      get { return cacheTime_; }
      set {
        cacheTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxWatch != other.MaxWatch) return false;
      if (WatchPersistent != other.WatchPersistent) return false;
      if (WatchDelayMs != other.WatchDelayMs) return false;
      if (CacheTime != other.CacheTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxWatch != 0) hash ^= MaxWatch.GetHashCode();
      if (WatchPersistent != false) hash ^= WatchPersistent.GetHashCode();
      if (WatchDelayMs != 0) hash ^= WatchDelayMs.GetHashCode();
      if (CacheTime != 0) hash ^= CacheTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxWatch != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MaxWatch);
      }
      if (WatchPersistent != false) {
        output.WriteRawTag(16);
        output.WriteBool(WatchPersistent);
      }
      if (WatchDelayMs != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(WatchDelayMs);
      }
      if (CacheTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CacheTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxWatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxWatch);
      }
      if (WatchPersistent != false) {
        size += 1 + 1;
      }
      if (WatchDelayMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WatchDelayMs);
      }
      if (CacheTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CacheTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchSetting other) {
      if (other == null) {
        return;
      }
      if (other.MaxWatch != 0) {
        MaxWatch = other.MaxWatch;
      }
      if (other.WatchPersistent != false) {
        WatchPersistent = other.WatchPersistent;
      }
      if (other.WatchDelayMs != 0) {
        WatchDelayMs = other.WatchDelayMs;
      }
      if (other.CacheTime != 0) {
        CacheTime = other.CacheTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxWatch = input.ReadUInt32();
            break;
          }
          case 16: {
            WatchPersistent = input.ReadBool();
            break;
          }
          case 24: {
            WatchDelayMs = input.ReadUInt32();
            break;
          }
          case 32: {
            CacheTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 观战详情
  /// </summary>
  public sealed partial class WatchInfo : pb::IMessage<WatchInfo> {
    private static readonly pb::MessageParser<WatchInfo> _parser = new pb::MessageParser<WatchInfo>(() => new WatchInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchInfo(WatchInfo other) : this() {
      roomID_ = other.roomID_;
      state_ = other.state_;
      WatchSetting = other.watchSetting_ != null ? other.WatchSetting.Clone() : null;
      curWatch_ = other.curWatch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchInfo Clone() {
      return new WatchInfo(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private uint state_;
    /// <summary>
    /// 观战房间状态。1：回放房间；2：游戏中房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "watchSetting" field.</summary>
    public const int WatchSettingFieldNumber = 3;
    private global::Matchvs.WatchSetting watchSetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.WatchSetting WatchSetting {
      get { return watchSetting_; }
      set {
        watchSetting_ = value;
      }
    }

    /// <summary>Field number for the "curWatch" field.</summary>
    public const int CurWatchFieldNumber = 4;
    private uint curWatch_;
    /// <summary>
    /// 当前观战人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurWatch {
      get { return curWatch_; }
      set {
        curWatch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (State != other.State) return false;
      if (!object.Equals(WatchSetting, other.WatchSetting)) return false;
      if (CurWatch != other.CurWatch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (watchSetting_ != null) hash ^= WatchSetting.GetHashCode();
      if (CurWatch != 0) hash ^= CurWatch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(State);
      }
      if (watchSetting_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WatchSetting);
      }
      if (CurWatch != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurWatch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (watchSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchSetting);
      }
      if (CurWatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurWatch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.watchSetting_ != null) {
        if (watchSetting_ == null) {
          watchSetting_ = new global::Matchvs.WatchSetting();
        }
        WatchSetting.MergeFrom(other.WatchSetting);
      }
      if (other.CurWatch != 0) {
        CurWatch = other.CurWatch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            State = input.ReadUInt32();
            break;
          }
          case 26: {
            if (watchSetting_ == null) {
              watchSetting_ = new global::Matchvs.WatchSetting();
            }
            input.ReadMessage(watchSetting_);
            break;
          }
          case 32: {
            CurWatch = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WatchRoom : pb::IMessage<WatchRoom> {
    private static readonly pb::MessageParser<WatchRoom> _parser = new pb::MessageParser<WatchRoom>(() => new WatchRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchRoom(WatchRoom other) : this() {
      WatchInfo = other.watchInfo_ != null ? other.WatchInfo.Clone() : null;
      watchPlayers_ = other.watchPlayers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchRoom Clone() {
      return new WatchRoom(this);
    }

    /// <summary>Field number for the "watchInfo" field.</summary>
    public const int WatchInfoFieldNumber = 1;
    private global::Matchvs.WatchInfo watchInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.WatchInfo WatchInfo {
      get { return watchInfo_; }
      set {
        watchInfo_ = value;
      }
    }

    /// <summary>Field number for the "watchPlayers" field.</summary>
    public const int WatchPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Matchvs.PlayerInfo> _repeated_watchPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::Matchvs.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.PlayerInfo> watchPlayers_ = new pbc::RepeatedField<global::Matchvs.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.PlayerInfo> WatchPlayers {
      get { return watchPlayers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WatchInfo, other.WatchInfo)) return false;
      if(!watchPlayers_.Equals(other.watchPlayers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (watchInfo_ != null) hash ^= WatchInfo.GetHashCode();
      hash ^= watchPlayers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (watchInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WatchInfo);
      }
      watchPlayers_.WriteTo(output, _repeated_watchPlayers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (watchInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchInfo);
      }
      size += watchPlayers_.CalculateSize(_repeated_watchPlayers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchRoom other) {
      if (other == null) {
        return;
      }
      if (other.watchInfo_ != null) {
        if (watchInfo_ == null) {
          watchInfo_ = new global::Matchvs.WatchInfo();
        }
        WatchInfo.MergeFrom(other.WatchInfo);
      }
      watchPlayers_.Add(other.watchPlayers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (watchInfo_ == null) {
              watchInfo_ = new global::Matchvs.WatchInfo();
            }
            input.ReadMessage(watchInfo_);
            break;
          }
          case 18: {
            watchPlayers_.AddEntriesFrom(input, _repeated_watchPlayers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayRoom : pb::IMessage<PlayRoom> {
    private static readonly pb::MessageParser<PlayRoom> _parser = new pb::MessageParser<PlayRoom>(() => new PlayRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRoom(PlayRoom other) : this() {
      RoomInfo = other.roomInfo_ != null ? other.RoomInfo.Clone() : null;
      player_ = other.player_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayRoom Clone() {
      return new PlayRoom(this);
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 1;
    private global::Matchvs.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Matchvs.PlayerInfo> _repeated_player_codec
        = pb::FieldCodec.ForMessage(18, global::Matchvs.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.PlayerInfo> player_ = new pbc::RepeatedField<global::Matchvs.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.PlayerInfo> Player {
      get { return player_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if(!player_.Equals(other.player_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      hash ^= player_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roomInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoomInfo);
      }
      player_.WriteTo(output, _repeated_player_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      size += player_.CalculateSize(_repeated_player_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayRoom other) {
      if (other == null) {
        return;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::Matchvs.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      player_.Add(other.player_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::Matchvs.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 18: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 加入观战房间
  /// </summary>
  public sealed partial class JoinWatchRoomReq : pb::IMessage<JoinWatchRoomReq> {
    private static readonly pb::MessageParser<JoinWatchRoomReq> _parser = new pb::MessageParser<JoinWatchRoomReq>(() => new JoinWatchRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinWatchRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinWatchRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinWatchRoomReq(JoinWatchRoomReq other) : this() {
      gameID_ = other.gameID_;
      userID_ = other.userID_;
      userProfile_ = other.userProfile_;
      roomID_ = other.roomID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinWatchRoomReq Clone() {
      return new JoinWatchRoomReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userProfile" field.</summary>
    public const int UserProfileFieldNumber = 3;
    private pb::ByteString userProfile_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 4;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinWatchRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinWatchRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (UserID != other.UserID) return false;
      if (UserProfile != other.UserProfile) return false;
      if (RoomID != other.RoomID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(UserProfile);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoomID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinWatchRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 26: {
            UserProfile = input.ReadBytes();
            break;
          }
          case 32: {
            RoomID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinWatchRoomRsp : pb::IMessage<JoinWatchRoomRsp> {
    private static readonly pb::MessageParser<JoinWatchRoomRsp> _parser = new pb::MessageParser<JoinWatchRoomRsp>(() => new JoinWatchRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinWatchRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinWatchRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinWatchRoomRsp(JoinWatchRoomRsp other) : this() {
      status_ = other.status_;
      BookInfo = other.bookInfo_ != null ? other.BookInfo.Clone() : null;
      setID_ = other.setID_;
      roomID_ = other.roomID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinWatchRoomRsp Clone() {
      return new JoinWatchRoomRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "bookInfo" field.</summary>
    public const int BookInfoFieldNumber = 2;
    private global::Matchvs.BookInfo bookInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.BookInfo BookInfo {
      get { return bookInfo_; }
      set {
        bookInfo_ = value;
      }
    }

    /// <summary>Field number for the "setID" field.</summary>
    public const int SetIDFieldNumber = 3;
    private uint setID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetID {
      get { return setID_; }
      set {
        setID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 4;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinWatchRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinWatchRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(BookInfo, other.BookInfo)) return false;
      if (SetID != other.SetID) return false;
      if (RoomID != other.RoomID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (bookInfo_ != null) hash ^= BookInfo.GetHashCode();
      if (SetID != 0) hash ^= SetID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (bookInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BookInfo);
      }
      if (SetID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SetID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoomID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (bookInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BookInfo);
      }
      if (SetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinWatchRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.bookInfo_ != null) {
        if (bookInfo_ == null) {
          bookInfo_ = new global::Matchvs.BookInfo();
        }
        BookInfo.MergeFrom(other.BookInfo);
      }
      if (other.SetID != 0) {
        SetID = other.SetID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (bookInfo_ == null) {
              bookInfo_ = new global::Matchvs.BookInfo();
            }
            input.ReadMessage(bookInfo_);
            break;
          }
          case 24: {
            SetID = input.ReadUInt32();
            break;
          }
          case 32: {
            RoomID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinWatchRoomNotify : pb::IMessage<JoinWatchRoomNotify> {
    private static readonly pb::MessageParser<JoinWatchRoomNotify> _parser = new pb::MessageParser<JoinWatchRoomNotify>(() => new JoinWatchRoomNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinWatchRoomNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinWatchRoomNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinWatchRoomNotify(JoinWatchRoomNotify other) : this() {
      Watcher = other.watcher_ != null ? other.Watcher.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinWatchRoomNotify Clone() {
      return new JoinWatchRoomNotify(this);
    }

    /// <summary>Field number for the "watcher" field.</summary>
    public const int WatcherFieldNumber = 1;
    private global::Matchvs.PlayerInfo watcher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.PlayerInfo Watcher {
      get { return watcher_; }
      set {
        watcher_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinWatchRoomNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinWatchRoomNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Watcher, other.Watcher)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (watcher_ != null) hash ^= Watcher.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (watcher_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Watcher);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (watcher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watcher);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinWatchRoomNotify other) {
      if (other == null) {
        return;
      }
      if (other.watcher_ != null) {
        if (watcher_ == null) {
          watcher_ = new global::Matchvs.PlayerInfo();
        }
        Watcher.MergeFrom(other.Watcher);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (watcher_ == null) {
              watcher_ = new global::Matchvs.PlayerInfo();
            }
            input.ReadMessage(watcher_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 离开观战房间
  /// </summary>
  public sealed partial class LeaveWatchRoomReq : pb::IMessage<LeaveWatchRoomReq> {
    private static readonly pb::MessageParser<LeaveWatchRoomReq> _parser = new pb::MessageParser<LeaveWatchRoomReq>(() => new LeaveWatchRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveWatchRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveWatchRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveWatchRoomReq(LeaveWatchRoomReq other) : this() {
      gameID_ = other.gameID_;
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveWatchRoomReq Clone() {
      return new LeaveWatchRoomReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 3;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveWatchRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveWatchRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoomID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveWatchRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 24: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveWatchRoomRsp : pb::IMessage<LeaveWatchRoomRsp> {
    private static readonly pb::MessageParser<LeaveWatchRoomRsp> _parser = new pb::MessageParser<LeaveWatchRoomRsp>(() => new LeaveWatchRoomRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveWatchRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveWatchRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveWatchRoomRsp(LeaveWatchRoomRsp other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveWatchRoomRsp Clone() {
      return new LeaveWatchRoomRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveWatchRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveWatchRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveWatchRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveWatchRoomNotify : pb::IMessage<LeaveWatchRoomNotify> {
    private static readonly pb::MessageParser<LeaveWatchRoomNotify> _parser = new pb::MessageParser<LeaveWatchRoomNotify>(() => new LeaveWatchRoomNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveWatchRoomNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveWatchRoomNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveWatchRoomNotify(LeaveWatchRoomNotify other) : this() {
      Watcher = other.watcher_ != null ? other.Watcher.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveWatchRoomNotify Clone() {
      return new LeaveWatchRoomNotify(this);
    }

    /// <summary>Field number for the "watcher" field.</summary>
    public const int WatcherFieldNumber = 1;
    private global::Matchvs.PlayerInfo watcher_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.PlayerInfo Watcher {
      get { return watcher_; }
      set {
        watcher_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveWatchRoomNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveWatchRoomNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Watcher, other.Watcher)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (watcher_ != null) hash ^= Watcher.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (watcher_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Watcher);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (watcher_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Watcher);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveWatchRoomNotify other) {
      if (other == null) {
        return;
      }
      if (other.watcher_ != null) {
        if (watcher_ == null) {
          watcher_ = new global::Matchvs.PlayerInfo();
        }
        Watcher.MergeFrom(other.Watcher);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (watcher_ == null) {
              watcher_ = new global::Matchvs.PlayerInfo();
            }
            input.ReadMessage(watcher_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 房间解散推送
  /// </summary>
  public sealed partial class RoomOverNotify : pb::IMessage<RoomOverNotify> {
    private static readonly pb::MessageParser<RoomOverNotify> _parser = new pb::MessageParser<RoomOverNotify>(() => new RoomOverNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomOverNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomOverNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomOverNotify(RoomOverNotify other) : this() {
      roomID_ = other.roomID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomOverNotify Clone() {
      return new RoomOverNotify(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 2;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomOverNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomOverNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomOverNotify other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 18: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 身份切换
  /// </summary>
  public sealed partial class ChangeRole : pb::IMessage<ChangeRole> {
    private static readonly pb::MessageParser<ChangeRole> _parser = new pb::MessageParser<ChangeRole>(() => new ChangeRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRole(ChangeRole other) : this() {
      userID_ = other.userID_;
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      targetRoomType_ = other.targetRoomType_;
      userProfile_ = other.userProfile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRole Clone() {
      return new ChangeRole(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 2;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 3;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "targetRoomType" field.</summary>
    public const int TargetRoomTypeFieldNumber = 4;
    private global::Matchvs.RoomType targetRoomType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomType TargetRoomType {
      get { return targetRoomType_; }
      set {
        targetRoomType_ = value;
      }
    }

    /// <summary>Field number for the "userProfile" field.</summary>
    public const int UserProfileFieldNumber = 5;
    private pb::ByteString userProfile_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (TargetRoomType != other.TargetRoomType) return false;
      if (UserProfile != other.UserProfile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (TargetRoomType != 0) hash ^= TargetRoomType.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (GameID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoomID);
      }
      if (TargetRoomType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TargetRoomType);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(UserProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (TargetRoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetRoomType);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeRole other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.TargetRoomType != 0) {
        TargetRoomType = other.TargetRoomType;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            GameID = input.ReadUInt32();
            break;
          }
          case 24: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 32: {
            targetRoomType_ = (global::Matchvs.RoomType) input.ReadEnum();
            break;
          }
          case 42: {
            UserProfile = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeRoleRsp : pb::IMessage<ChangeRoleRsp> {
    private static readonly pb::MessageParser<ChangeRoleRsp> _parser = new pb::MessageParser<ChangeRoleRsp>(() => new ChangeRoleRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeRoleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoleRsp(ChangeRoleRsp other) : this() {
      status_ = other.status_;
      targetRoomType_ = other.targetRoomType_;
      PlayRoom = other.playRoom_ != null ? other.PlayRoom.Clone() : null;
      BookInfo = other.bookInfo_ != null ? other.BookInfo.Clone() : null;
      roomID_ = other.roomID_;
      setID_ = other.setID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeRoleRsp Clone() {
      return new ChangeRoleRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "targetRoomType" field.</summary>
    public const int TargetRoomTypeFieldNumber = 2;
    private global::Matchvs.RoomType targetRoomType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomType TargetRoomType {
      get { return targetRoomType_; }
      set {
        targetRoomType_ = value;
      }
    }

    /// <summary>Field number for the "playRoom" field.</summary>
    public const int PlayRoomFieldNumber = 3;
    private global::Matchvs.PlayRoom playRoom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.PlayRoom PlayRoom {
      get { return playRoom_; }
      set {
        playRoom_ = value;
      }
    }

    /// <summary>Field number for the "bookInfo" field.</summary>
    public const int BookInfoFieldNumber = 4;
    private global::Matchvs.BookInfo bookInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.BookInfo BookInfo {
      get { return bookInfo_; }
      set {
        bookInfo_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 5;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "setID" field.</summary>
    public const int SetIDFieldNumber = 6;
    private uint setID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetID {
      get { return setID_; }
      set {
        setID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeRoleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeRoleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (TargetRoomType != other.TargetRoomType) return false;
      if (!object.Equals(PlayRoom, other.PlayRoom)) return false;
      if (!object.Equals(BookInfo, other.BookInfo)) return false;
      if (RoomID != other.RoomID) return false;
      if (SetID != other.SetID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TargetRoomType != 0) hash ^= TargetRoomType.GetHashCode();
      if (playRoom_ != null) hash ^= PlayRoom.GetHashCode();
      if (bookInfo_ != null) hash ^= BookInfo.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (SetID != 0) hash ^= SetID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (TargetRoomType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TargetRoomType);
      }
      if (playRoom_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayRoom);
      }
      if (bookInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BookInfo);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(RoomID);
      }
      if (SetID != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SetID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (TargetRoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetRoomType);
      }
      if (playRoom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayRoom);
      }
      if (bookInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BookInfo);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (SetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeRoleRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TargetRoomType != 0) {
        TargetRoomType = other.TargetRoomType;
      }
      if (other.playRoom_ != null) {
        if (playRoom_ == null) {
          playRoom_ = new global::Matchvs.PlayRoom();
        }
        PlayRoom.MergeFrom(other.PlayRoom);
      }
      if (other.bookInfo_ != null) {
        if (bookInfo_ == null) {
          bookInfo_ = new global::Matchvs.BookInfo();
        }
        BookInfo.MergeFrom(other.BookInfo);
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.SetID != 0) {
        SetID = other.SetID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            targetRoomType_ = (global::Matchvs.RoomType) input.ReadEnum();
            break;
          }
          case 26: {
            if (playRoom_ == null) {
              playRoom_ = new global::Matchvs.PlayRoom();
            }
            input.ReadMessage(playRoom_);
            break;
          }
          case 34: {
            if (bookInfo_ == null) {
              bookInfo_ = new global::Matchvs.BookInfo();
            }
            input.ReadMessage(bookInfo_);
            break;
          }
          case 40: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 48: {
            SetID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取观战房间列表
  /// </summary>
  public sealed partial class GetWatchRoomsReq : pb::IMessage<GetWatchRoomsReq> {
    private static readonly pb::MessageParser<GetWatchRoomsReq> _parser = new pb::MessageParser<GetWatchRoomsReq>(() => new GetWatchRoomsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetWatchRoomsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchRoomsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchRoomsReq(GetWatchRoomsReq other) : this() {
      gameID_ = other.gameID_;
      RoomFilter = other.roomFilter_ != null ? other.RoomFilter.Clone() : null;
      sort_ = other.sort_;
      order_ = other.order_;
      pageNo_ = other.pageNo_;
      pageSize_ = other.pageSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchRoomsReq Clone() {
      return new GetWatchRoomsReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    /// <summary>
    /// 游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomFilter" field.</summary>
    public const int RoomFilterFieldNumber = 2;
    private global::Matchvs.RoomFilter roomFilter_;
    /// <summary>
    /// 房间过滤条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomFilter RoomFilter {
      get { return roomFilter_; }
      set {
        roomFilter_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 3;
    private global::Matchvs.RoomListSort sort_ = 0;
    /// <summary>
    /// 排序依据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomListSort Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 4;
    private global::Matchvs.SortOrder order_ = 0;
    /// <summary>
    /// 排序方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.SortOrder Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "pageNo" field.</summary>
    public const int PageNoFieldNumber = 5;
    private int pageNo_;
    /// <summary>
    /// 页码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageNo {
      get { return pageNo_; }
      set {
        pageNo_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 6;
    private int pageSize_;
    /// <summary>
    /// 每页条目数，默认10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetWatchRoomsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetWatchRoomsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (!object.Equals(RoomFilter, other.RoomFilter)) return false;
      if (Sort != other.Sort) return false;
      if (Order != other.Order) return false;
      if (PageNo != other.PageNo) return false;
      if (PageSize != other.PageSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (roomFilter_ != null) hash ^= RoomFilter.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      if (PageNo != 0) hash ^= PageNo.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (roomFilter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomFilter);
      }
      if (Sort != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Sort);
      }
      if (Order != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Order);
      }
      if (PageNo != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageNo);
      }
      if (PageSize != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PageSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (roomFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomFilter);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sort);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Order);
      }
      if (PageNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageNo);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetWatchRoomsReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.roomFilter_ != null) {
        if (roomFilter_ == null) {
          roomFilter_ = new global::Matchvs.RoomFilter();
        }
        RoomFilter.MergeFrom(other.RoomFilter);
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      if (other.PageNo != 0) {
        PageNo = other.PageNo;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (roomFilter_ == null) {
              roomFilter_ = new global::Matchvs.RoomFilter();
            }
            input.ReadMessage(roomFilter_);
            break;
          }
          case 24: {
            sort_ = (global::Matchvs.RoomListSort) input.ReadEnum();
            break;
          }
          case 32: {
            order_ = (global::Matchvs.SortOrder) input.ReadEnum();
            break;
          }
          case 40: {
            PageNo = input.ReadInt32();
            break;
          }
          case 48: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetWatchRoomsRsp : pb::IMessage<GetWatchRoomsRsp> {
    private static readonly pb::MessageParser<GetWatchRoomsRsp> _parser = new pb::MessageParser<GetWatchRoomsRsp>(() => new GetWatchRoomsRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetWatchRoomsRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchRoomsRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchRoomsRsp(GetWatchRoomsRsp other) : this() {
      status_ = other.status_;
      total_ = other.total_;
      roomInfoEx_ = other.roomInfoEx_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchRoomsRsp Clone() {
      return new GetWatchRoomsRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "roomInfoEx" field.</summary>
    public const int RoomInfoExFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Matchvs.RoomInfoEx> _repeated_roomInfoEx_codec
        = pb::FieldCodec.ForMessage(26, global::Matchvs.RoomInfoEx.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.RoomInfoEx> roomInfoEx_ = new pbc::RepeatedField<global::Matchvs.RoomInfoEx>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.RoomInfoEx> RoomInfoEx {
      get { return roomInfoEx_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetWatchRoomsRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetWatchRoomsRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Total != other.Total) return false;
      if(!roomInfoEx_.Equals(other.roomInfoEx_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      hash ^= roomInfoEx_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Total != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Total);
      }
      roomInfoEx_.WriteTo(output, _repeated_roomInfoEx_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      size += roomInfoEx_.CalculateSize(_repeated_roomInfoEx_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetWatchRoomsRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      roomInfoEx_.Add(other.roomInfoEx_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            Total = input.ReadInt32();
            break;
          }
          case 26: {
            roomInfoEx_.AddEntriesFrom(input, _repeated_roomInfoEx_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetWatchDataReq : pb::IMessage<GetWatchDataReq> {
    private static readonly pb::MessageParser<GetWatchDataReq> _parser = new pb::MessageParser<GetWatchDataReq>(() => new GetWatchDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetWatchDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchDataReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchDataReq(GetWatchDataReq other) : this() {
      userID_ = other.userID_;
      roomID_ = other.roomID_;
      watchTime_ = other.watchTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchDataReq Clone() {
      return new GetWatchDataReq(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "watchTime" field.</summary>
    public const int WatchTimeFieldNumber = 3;
    private uint watchTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WatchTime {
      get { return watchTime_; }
      set {
        watchTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetWatchDataReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetWatchDataReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (RoomID != other.RoomID) return false;
      if (WatchTime != other.WatchTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (WatchTime != 0) hash ^= WatchTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (WatchTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(WatchTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (WatchTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WatchTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetWatchDataReq other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.WatchTime != 0) {
        WatchTime = other.WatchTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            WatchTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetWatchDataRsp : pb::IMessage<GetWatchDataRsp> {
    private static readonly pb::MessageParser<GetWatchDataRsp> _parser = new pb::MessageParser<GetWatchDataRsp>(() => new GetWatchDataRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetWatchDataRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchDataRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchDataRsp(GetWatchDataRsp other) : this() {
      status_ = other.status_;
      cacheState_ = other.cacheState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWatchDataRsp Clone() {
      return new GetWatchDataRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "cacheState" field.</summary>
    public const int CacheStateFieldNumber = 2;
    private uint cacheState_;
    /// <summary>
    /// 缓存状态。0：正常；1：缓存超限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CacheState {
      get { return cacheState_; }
      set {
        cacheState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetWatchDataRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetWatchDataRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (CacheState != other.CacheState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CacheState != 0) hash ^= CacheState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (CacheState != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CacheState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (CacheState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CacheState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetWatchDataRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CacheState != 0) {
        CacheState = other.CacheState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            CacheState = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamInfo : pb::IMessage<TeamInfo> {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo(TeamInfo other) : this() {
      teamID_ = other.teamID_;
      password_ = other.password_;
      capacity_ = other.capacity_;
      mode_ = other.mode_;
      visibility_ = other.visibility_;
      owner_ = other.owner_;
      teamProperty_ = other.teamProperty_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo Clone() {
      return new TeamInfo(this);
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// 密码，空表示无密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 3;
    private uint capacity_;
    /// <summary>
    /// 队伍人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 4;
    private int mode_;
    /// <summary>
    /// 游戏模式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 5;
    private int visibility_;
    /// <summary>
    /// 是否可见，0不可见、1可见
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 6;
    private uint owner_;
    /// <summary>
    /// 队长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "teamProperty" field.</summary>
    public const int TeamPropertyFieldNumber = 7;
    private pb::ByteString teamProperty_ = pb::ByteString.Empty;
    /// <summary>
    /// 小队属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamProperty {
      get { return teamProperty_; }
      set {
        teamProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (Password != other.Password) return false;
      if (Capacity != other.Capacity) return false;
      if (Mode != other.Mode) return false;
      if (Visibility != other.Visibility) return false;
      if (Owner != other.Owner) return false;
      if (TeamProperty != other.TeamProperty) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Capacity != 0) hash ^= Capacity.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Visibility != 0) hash ^= Visibility.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (TeamProperty.Length != 0) hash ^= TeamProperty.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Capacity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Capacity);
      }
      if (Mode != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Mode);
      }
      if (Visibility != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Visibility);
      }
      if (Owner != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Owner);
      }
      if (TeamProperty.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(TeamProperty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Capacity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (Visibility != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Visibility);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      if (TeamProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamProperty);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Capacity != 0) {
        Capacity = other.Capacity;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Visibility != 0) {
        Visibility = other.Visibility;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.TeamProperty.Length != 0) {
        TeamProperty = other.TeamProperty;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 24: {
            Capacity = input.ReadUInt32();
            break;
          }
          case 32: {
            Mode = input.ReadInt32();
            break;
          }
          case 40: {
            Visibility = input.ReadInt32();
            break;
          }
          case 48: {
            Owner = input.ReadUInt32();
            break;
          }
          case 58: {
            TeamProperty = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateTeamReq : pb::IMessage<CreateTeamReq> {
    private static readonly pb::MessageParser<CreateTeamReq> _parser = new pb::MessageParser<CreateTeamReq>(() => new CreateTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTeamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamReq(CreateTeamReq other) : this() {
      gameID_ = other.gameID_;
      TeamInfo = other.teamInfo_ != null ? other.TeamInfo.Clone() : null;
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamReq Clone() {
      return new CreateTeamReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamInfo" field.</summary>
    public const int TeamInfoFieldNumber = 2;
    private global::Matchvs.TeamInfo teamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.TeamInfo TeamInfo {
      get { return teamInfo_; }
      set {
        teamInfo_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 3;
    private global::Matchvs.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTeamReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTeamReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (!object.Equals(TeamInfo, other.TeamInfo)) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (teamInfo_ != null) hash ^= TeamInfo.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (teamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamInfo);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (teamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamInfo);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTeamReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.teamInfo_ != null) {
        if (teamInfo_ == null) {
          teamInfo_ = new global::Matchvs.TeamInfo();
        }
        TeamInfo.MergeFrom(other.TeamInfo);
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Matchvs.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 18: {
            if (teamInfo_ == null) {
              teamInfo_ = new global::Matchvs.TeamInfo();
            }
            input.ReadMessage(teamInfo_);
            break;
          }
          case 26: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Matchvs.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateTeamRsp : pb::IMessage<CreateTeamRsp> {
    private static readonly pb::MessageParser<CreateTeamRsp> _parser = new pb::MessageParser<CreateTeamRsp>(() => new CreateTeamRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTeamRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamRsp(CreateTeamRsp other) : this() {
      status_ = other.status_;
      teamID_ = other.teamID_;
      owner_ = other.owner_;
      setID_ = other.setID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTeamRsp Clone() {
      return new CreateTeamRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "setID" field.</summary>
    public const int SetIDFieldNumber = 4;
    private uint setID_;
    /// <summary>
    /// team所属节点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetID {
      get { return setID_; }
      set {
        setID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTeamRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTeamRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (TeamID != other.TeamID) return false;
      if (Owner != other.Owner) return false;
      if (SetID != other.SetID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (SetID != 0) hash ^= SetID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (Owner != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Owner);
      }
      if (SetID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SetID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      if (SetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTeamRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.SetID != 0) {
        SetID = other.SetID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            Owner = input.ReadUInt32();
            break;
          }
          case 32: {
            SetID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinTeamReq : pb::IMessage<JoinTeamReq> {
    private static readonly pb::MessageParser<JoinTeamReq> _parser = new pb::MessageParser<JoinTeamReq>(() => new JoinTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTeamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamReq(JoinTeamReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      password_ = other.password_;
      joinType_ = other.joinType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamReq Clone() {
      return new JoinTeamReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 3;
    private global::Matchvs.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joinType" field.</summary>
    public const int JoinTypeFieldNumber = 5;
    private global::Matchvs.JoinTeamType joinType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.JoinTeamType JoinType {
      get { return joinType_; }
      set {
        joinType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTeamReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTeamReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (Password != other.Password) return false;
      if (JoinType != other.JoinType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (JoinType != 0) hash ^= JoinType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerInfo);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (JoinType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) JoinType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (JoinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoinType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTeamReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Matchvs.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.JoinType != 0) {
        JoinType = other.JoinType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 26: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Matchvs.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 40: {
            joinType_ = (global::Matchvs.JoinTeamType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinTeamRsp : pb::IMessage<JoinTeamRsp> {
    private static readonly pb::MessageParser<JoinTeamRsp> _parser = new pb::MessageParser<JoinTeamRsp>(() => new JoinTeamRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTeamRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamRsp(JoinTeamRsp other) : this() {
      status_ = other.status_;
      TeamInfo = other.teamInfo_ != null ? other.TeamInfo.Clone() : null;
      users_ = other.users_.Clone();
      isMatching_ = other.isMatching_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamRsp Clone() {
      return new JoinTeamRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "teamInfo" field.</summary>
    public const int TeamInfoFieldNumber = 2;
    private global::Matchvs.TeamInfo teamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.TeamInfo TeamInfo {
      get { return teamInfo_; }
      set {
        teamInfo_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Matchvs.PlayerInfo> _repeated_users_codec
        = pb::FieldCodec.ForMessage(26, global::Matchvs.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.PlayerInfo> users_ = new pbc::RepeatedField<global::Matchvs.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.PlayerInfo> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "isMatching" field.</summary>
    public const int IsMatchingFieldNumber = 4;
    private bool isMatching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMatching {
      get { return isMatching_; }
      set {
        isMatching_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTeamRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTeamRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(TeamInfo, other.TeamInfo)) return false;
      if(!users_.Equals(other.users_)) return false;
      if (IsMatching != other.IsMatching) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (teamInfo_ != null) hash ^= TeamInfo.GetHashCode();
      hash ^= users_.GetHashCode();
      if (IsMatching != false) hash ^= IsMatching.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (teamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamInfo);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (IsMatching != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMatching);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (teamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamInfo);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (IsMatching != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTeamRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.teamInfo_ != null) {
        if (teamInfo_ == null) {
          teamInfo_ = new global::Matchvs.TeamInfo();
        }
        TeamInfo.MergeFrom(other.TeamInfo);
      }
      users_.Add(other.users_);
      if (other.IsMatching != false) {
        IsMatching = other.IsMatching;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (teamInfo_ == null) {
              teamInfo_ = new global::Matchvs.TeamInfo();
            }
            input.ReadMessage(teamInfo_);
            break;
          }
          case 26: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 32: {
            IsMatching = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinTeamNotify : pb::IMessage<JoinTeamNotify> {
    private static readonly pb::MessageParser<JoinTeamNotify> _parser = new pb::MessageParser<JoinTeamNotify>(() => new JoinTeamNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTeamNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamNotify(JoinTeamNotify other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTeamNotify Clone() {
      return new JoinTeamNotify(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Matchvs.PlayerInfo user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.PlayerInfo User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTeamNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTeamNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTeamNotify other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::Matchvs.PlayerInfo();
        }
        User.MergeFrom(other.User);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::Matchvs.PlayerInfo();
            }
            input.ReadMessage(user_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveTeamReq : pb::IMessage<LeaveTeamReq> {
    private static readonly pb::MessageParser<LeaveTeamReq> _parser = new pb::MessageParser<LeaveTeamReq>(() => new LeaveTeamReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveTeamReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamReq(LeaveTeamReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamReq Clone() {
      return new LeaveTeamReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveTeamReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveTeamReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveTeamReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveTeamRsp : pb::IMessage<LeaveTeamRsp> {
    private static readonly pb::MessageParser<LeaveTeamRsp> _parser = new pb::MessageParser<LeaveTeamRsp>(() => new LeaveTeamRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveTeamRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamRsp(LeaveTeamRsp other) : this() {
      status_ = other.status_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamRsp Clone() {
      return new LeaveTeamRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveTeamRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveTeamRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveTeamRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaveTeamNotify : pb::IMessage<LeaveTeamNotify> {
    private static readonly pb::MessageParser<LeaveTeamNotify> _parser = new pb::MessageParser<LeaveTeamNotify>(() => new LeaveTeamNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveTeamNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamNotify(LeaveTeamNotify other) : this() {
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      owner_ = other.owner_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveTeamNotify Clone() {
      return new LeaveTeamNotify(this);
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveTeamNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveTeamNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (Owner != other.Owner) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (Owner != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Owner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveTeamNotify other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 24: {
            Owner = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamMatchCond : pb::IMessage<TeamMatchCond> {
    private static readonly pb::MessageParser<TeamMatchCond> _parser = new pb::MessageParser<TeamMatchCond>(() => new TeamMatchCond());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMatchCond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchCond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchCond(TeamMatchCond other) : this() {
      teamNum_ = other.teamNum_;
      teamMemberNum_ = other.teamMemberNum_;
      timeout_ = other.timeout_;
      weight_ = other.weight_;
      weightRange_ = other.weightRange_;
      weightRule_ = other.weightRule_;
      full_ = other.full_;
      tags_ = other.tags_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchCond Clone() {
      return new TeamMatchCond(this);
    }

    /// <summary>Field number for the "teamNum" field.</summary>
    public const int TeamNumFieldNumber = 1;
    private uint teamNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamNum {
      get { return teamNum_; }
      set {
        teamNum_ = value;
      }
    }

    /// <summary>Field number for the "teamMemberNum" field.</summary>
    public const int TeamMemberNumFieldNumber = 2;
    private uint teamMemberNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamMemberNum {
      get { return teamMemberNum_; }
      set {
        teamMemberNum_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 3;
    private uint timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 4;
    private uint weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "weightRange" field.</summary>
    public const int WeightRangeFieldNumber = 5;
    private uint weightRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeightRange {
      get { return weightRange_; }
      set {
        weightRange_ = value;
      }
    }

    /// <summary>Field number for the "weightRule" field.</summary>
    public const int WeightRuleFieldNumber = 6;
    private uint weightRule_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeightRule {
      get { return weightRule_; }
      set {
        weightRule_ = value;
      }
    }

    /// <summary>Field number for the "full" field.</summary>
    public const int FullFieldNumber = 7;
    private uint full_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Full {
      get { return full_; }
      set {
        full_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Matchvs.keyValue> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(66, global::Matchvs.keyValue.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.keyValue> tags_ = new pbc::RepeatedField<global::Matchvs.keyValue>();
    /// <summary>
    ///匹配标签
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.keyValue> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMatchCond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMatchCond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamNum != other.TeamNum) return false;
      if (TeamMemberNum != other.TeamMemberNum) return false;
      if (Timeout != other.Timeout) return false;
      if (Weight != other.Weight) return false;
      if (WeightRange != other.WeightRange) return false;
      if (WeightRule != other.WeightRule) return false;
      if (Full != other.Full) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamNum != 0) hash ^= TeamNum.GetHashCode();
      if (TeamMemberNum != 0) hash ^= TeamMemberNum.GetHashCode();
      if (Timeout != 0) hash ^= Timeout.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (WeightRange != 0) hash ^= WeightRange.GetHashCode();
      if (WeightRule != 0) hash ^= WeightRule.GetHashCode();
      if (Full != 0) hash ^= Full.GetHashCode();
      hash ^= tags_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TeamNum);
      }
      if (TeamMemberNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TeamMemberNum);
      }
      if (Timeout != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Timeout);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Weight);
      }
      if (WeightRange != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(WeightRange);
      }
      if (WeightRule != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(WeightRule);
      }
      if (Full != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Full);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamNum);
      }
      if (TeamMemberNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TeamMemberNum);
      }
      if (Timeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeout);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
      }
      if (WeightRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeightRange);
      }
      if (WeightRule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeightRule);
      }
      if (Full != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Full);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMatchCond other) {
      if (other == null) {
        return;
      }
      if (other.TeamNum != 0) {
        TeamNum = other.TeamNum;
      }
      if (other.TeamMemberNum != 0) {
        TeamMemberNum = other.TeamMemberNum;
      }
      if (other.Timeout != 0) {
        Timeout = other.Timeout;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.WeightRange != 0) {
        WeightRange = other.WeightRange;
      }
      if (other.WeightRule != 0) {
        WeightRule = other.WeightRule;
      }
      if (other.Full != 0) {
        Full = other.Full;
      }
      tags_.Add(other.tags_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamNum = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamMemberNum = input.ReadUInt32();
            break;
          }
          case 24: {
            Timeout = input.ReadUInt32();
            break;
          }
          case 32: {
            Weight = input.ReadUInt32();
            break;
          }
          case 40: {
            WeightRange = input.ReadUInt32();
            break;
          }
          case 48: {
            WeightRule = input.ReadUInt32();
            break;
          }
          case 56: {
            Full = input.ReadUInt32();
            break;
          }
          case 66: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamMatchReq : pb::IMessage<TeamMatchReq> {
    private static readonly pb::MessageParser<TeamMatchReq> _parser = new pb::MessageParser<TeamMatchReq>(() => new TeamMatchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMatchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchReq(TeamMatchReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      Cond = other.cond_ != null ? other.Cond.Clone() : null;
      RoomInfo = other.roomInfo_ != null ? other.RoomInfo.Clone() : null;
      WatchSetting = other.watchSetting_ != null ? other.WatchSetting.Clone() : null;
      cancelType_ = other.cancelType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchReq Clone() {
      return new TeamMatchReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "cond" field.</summary>
    public const int CondFieldNumber = 4;
    private global::Matchvs.TeamMatchCond cond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.TeamMatchCond Cond {
      get { return cond_; }
      set {
        cond_ = value;
      }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 5;
    private global::Matchvs.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "watchSetting" field.</summary>
    public const int WatchSettingFieldNumber = 6;
    private global::Matchvs.WatchSetting watchSetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.WatchSetting WatchSetting {
      get { return watchSetting_; }
      set {
        watchSetting_ = value;
      }
    }

    /// <summary>Field number for the "cancelType" field.</summary>
    public const int CancelTypeFieldNumber = 7;
    private uint cancelType_;
    /// <summary>
    /// 取消类型，0有人掉线仍然继续匹配、1有人掉线立即取消匹配
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CancelType {
      get { return cancelType_; }
      set {
        cancelType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMatchReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMatchReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (!object.Equals(Cond, other.Cond)) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (!object.Equals(WatchSetting, other.WatchSetting)) return false;
      if (CancelType != other.CancelType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (cond_ != null) hash ^= Cond.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (watchSetting_ != null) hash ^= WatchSetting.GetHashCode();
      if (CancelType != 0) hash ^= CancelType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (cond_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Cond);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RoomInfo);
      }
      if (watchSetting_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WatchSetting);
      }
      if (CancelType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CancelType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (cond_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cond);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (watchSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchSetting);
      }
      if (CancelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CancelType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMatchReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.cond_ != null) {
        if (cond_ == null) {
          cond_ = new global::Matchvs.TeamMatchCond();
        }
        Cond.MergeFrom(other.Cond);
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::Matchvs.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.watchSetting_ != null) {
        if (watchSetting_ == null) {
          watchSetting_ = new global::Matchvs.WatchSetting();
        }
        WatchSetting.MergeFrom(other.WatchSetting);
      }
      if (other.CancelType != 0) {
        CancelType = other.CancelType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            if (cond_ == null) {
              cond_ = new global::Matchvs.TeamMatchCond();
            }
            input.ReadMessage(cond_);
            break;
          }
          case 42: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::Matchvs.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 50: {
            if (watchSetting_ == null) {
              watchSetting_ = new global::Matchvs.WatchSetting();
            }
            input.ReadMessage(watchSetting_);
            break;
          }
          case 56: {
            CancelType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamMatchRsp : pb::IMessage<TeamMatchRsp> {
    private static readonly pb::MessageParser<TeamMatchRsp> _parser = new pb::MessageParser<TeamMatchRsp>(() => new TeamMatchRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMatchRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchRsp(TeamMatchRsp other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchRsp Clone() {
      return new TeamMatchRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMatchRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMatchRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMatchRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamDetail : pb::IMessage<TeamDetail> {
    private static readonly pb::MessageParser<TeamDetail> _parser = new pb::MessageParser<TeamDetail>(() => new TeamDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamDetail(TeamDetail other) : this() {
      TeamInfo = other.teamInfo_ != null ? other.TeamInfo.Clone() : null;
      player_ = other.player_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamDetail Clone() {
      return new TeamDetail(this);
    }

    /// <summary>Field number for the "teamInfo" field.</summary>
    public const int TeamInfoFieldNumber = 1;
    private global::Matchvs.TeamInfo teamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.TeamInfo TeamInfo {
      get { return teamInfo_; }
      set {
        teamInfo_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Matchvs.PlayerInfo> _repeated_player_codec
        = pb::FieldCodec.ForMessage(18, global::Matchvs.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.PlayerInfo> player_ = new pbc::RepeatedField<global::Matchvs.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.PlayerInfo> Player {
      get { return player_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TeamInfo, other.TeamInfo)) return false;
      if(!player_.Equals(other.player_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (teamInfo_ != null) hash ^= TeamInfo.GetHashCode();
      hash ^= player_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (teamInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TeamInfo);
      }
      player_.WriteTo(output, _repeated_player_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (teamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamInfo);
      }
      size += player_.CalculateSize(_repeated_player_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamDetail other) {
      if (other == null) {
        return;
      }
      if (other.teamInfo_ != null) {
        if (teamInfo_ == null) {
          teamInfo_ = new global::Matchvs.TeamInfo();
        }
        TeamInfo.MergeFrom(other.TeamInfo);
      }
      player_.Add(other.player_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (teamInfo_ == null) {
              teamInfo_ = new global::Matchvs.TeamInfo();
            }
            input.ReadMessage(teamInfo_);
            break;
          }
          case 18: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大队
  /// </summary>
  public sealed partial class BrigadeInfo : pb::IMessage<BrigadeInfo> {
    private static readonly pb::MessageParser<BrigadeInfo> _parser = new pb::MessageParser<BrigadeInfo>(() => new BrigadeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BrigadeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrigadeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrigadeInfo(BrigadeInfo other) : this() {
      brigadeID_ = other.brigadeID_;
      teams_ = other.teams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BrigadeInfo Clone() {
      return new BrigadeInfo(this);
    }

    /// <summary>Field number for the "brigadeID" field.</summary>
    public const int BrigadeIDFieldNumber = 1;
    private uint brigadeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BrigadeID {
      get { return brigadeID_; }
      set {
        brigadeID_ = value;
      }
    }

    /// <summary>Field number for the "teams" field.</summary>
    public const int TeamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Matchvs.TeamDetail> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(18, global::Matchvs.TeamDetail.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.TeamDetail> teams_ = new pbc::RepeatedField<global::Matchvs.TeamDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.TeamDetail> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BrigadeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BrigadeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BrigadeID != other.BrigadeID) return false;
      if(!teams_.Equals(other.teams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BrigadeID != 0) hash ^= BrigadeID.GetHashCode();
      hash ^= teams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BrigadeID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BrigadeID);
      }
      teams_.WriteTo(output, _repeated_teams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BrigadeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BrigadeID);
      }
      size += teams_.CalculateSize(_repeated_teams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BrigadeInfo other) {
      if (other == null) {
        return;
      }
      if (other.BrigadeID != 0) {
        BrigadeID = other.BrigadeID;
      }
      teams_.Add(other.teams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BrigadeID = input.ReadUInt32();
            break;
          }
          case 18: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamMatchResultNotify : pb::IMessage<TeamMatchResultNotify> {
    private static readonly pb::MessageParser<TeamMatchResultNotify> _parser = new pb::MessageParser<TeamMatchResultNotify>(() => new TeamMatchResultNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMatchResultNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchResultNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchResultNotify(TeamMatchResultNotify other) : this() {
      status_ = other.status_;
      brigades_ = other.brigades_.Clone();
      RoomInfo = other.roomInfo_ != null ? other.RoomInfo.Clone() : null;
      BookInfo = other.bookInfo_ != null ? other.BookInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchResultNotify Clone() {
      return new TeamMatchResultNotify(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "brigades" field.</summary>
    public const int BrigadesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Matchvs.BrigadeInfo> _repeated_brigades_codec
        = pb::FieldCodec.ForMessage(18, global::Matchvs.BrigadeInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.BrigadeInfo> brigades_ = new pbc::RepeatedField<global::Matchvs.BrigadeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.BrigadeInfo> Brigades {
      get { return brigades_; }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::Matchvs.RoomInfo roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.RoomInfo RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    /// <summary>Field number for the "bookInfo" field.</summary>
    public const int BookInfoFieldNumber = 4;
    private global::Matchvs.BookInfo bookInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.BookInfo BookInfo {
      get { return bookInfo_; }
      set {
        bookInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMatchResultNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMatchResultNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!brigades_.Equals(other.brigades_)) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (!object.Equals(BookInfo, other.BookInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= brigades_.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (bookInfo_ != null) hash ^= BookInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      brigades_.WriteTo(output, _repeated_brigades_codec);
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      if (bookInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BookInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += brigades_.CalculateSize(_repeated_brigades_codec);
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (bookInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BookInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMatchResultNotify other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      brigades_.Add(other.brigades_);
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::Matchvs.RoomInfo();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      if (other.bookInfo_ != null) {
        if (bookInfo_ == null) {
          bookInfo_ = new global::Matchvs.BookInfo();
        }
        BookInfo.MergeFrom(other.BookInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            brigades_.AddEntriesFrom(input, _repeated_brigades_codec);
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::Matchvs.RoomInfo();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
          case 34: {
            if (bookInfo_ == null) {
              bookInfo_ = new global::Matchvs.BookInfo();
            }
            input.ReadMessage(bookInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamMatchStartNotify : pb::IMessage<TeamMatchStartNotify> {
    private static readonly pb::MessageParser<TeamMatchStartNotify> _parser = new pb::MessageParser<TeamMatchStartNotify>(() => new TeamMatchStartNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamMatchStartNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchStartNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchStartNotify(TeamMatchStartNotify other) : this() {
      teamID_ = other.teamID_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamMatchStartNotify Clone() {
      return new TeamMatchStartNotify(this);
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamMatchStartNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamMatchStartNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamMatchStartNotify other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelTeamMatchReq : pb::IMessage<CancelTeamMatchReq> {
    private static readonly pb::MessageParser<CancelTeamMatchReq> _parser = new pb::MessageParser<CancelTeamMatchReq>(() => new CancelTeamMatchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelTeamMatchReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelTeamMatchReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelTeamMatchReq(CancelTeamMatchReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelTeamMatchReq Clone() {
      return new CancelTeamMatchReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelTeamMatchReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelTeamMatchReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelTeamMatchReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelTeamMatchRsp : pb::IMessage<CancelTeamMatchRsp> {
    private static readonly pb::MessageParser<CancelTeamMatchRsp> _parser = new pb::MessageParser<CancelTeamMatchRsp>(() => new CancelTeamMatchRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelTeamMatchRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelTeamMatchRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelTeamMatchRsp(CancelTeamMatchRsp other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelTeamMatchRsp Clone() {
      return new CancelTeamMatchRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelTeamMatchRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelTeamMatchRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelTeamMatchRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelTeamMatchNotify : pb::IMessage<CancelTeamMatchNotify> {
    private static readonly pb::MessageParser<CancelTeamMatchNotify> _parser = new pb::MessageParser<CancelTeamMatchNotify>(() => new CancelTeamMatchNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelTeamMatchNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelTeamMatchNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelTeamMatchNotify(CancelTeamMatchNotify other) : this() {
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelTeamMatchNotify Clone() {
      return new CancelTeamMatchNotify(this);
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelTeamMatchNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelTeamMatchNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelTeamMatchNotify other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendTeamEventReq : pb::IMessage<SendTeamEventReq> {
    private static readonly pb::MessageParser<SendTeamEventReq> _parser = new pb::MessageParser<SendTeamEventReq>(() => new SendTeamEventReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTeamEventReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTeamEventReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTeamEventReq(SendTeamEventReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      dstType_ = other.dstType_;
      msgType_ = other.msgType_;
      dstUids_ = other.dstUids_.Clone();
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTeamEventReq Clone() {
      return new SendTeamEventReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "dstType" field.</summary>
    public const int DstTypeFieldNumber = 4;
    private global::Matchvs.TeamDstType dstType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.TeamDstType DstType {
      get { return dstType_; }
      set {
        dstType_ = value;
      }
    }

    /// <summary>Field number for the "msgType" field.</summary>
    public const int MsgTypeFieldNumber = 5;
    private global::Matchvs.TeamMsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.TeamMsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "dstUids" field.</summary>
    public const int DstUidsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_dstUids_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> dstUids_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DstUids {
      get { return dstUids_; }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 7;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTeamEventReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTeamEventReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (DstType != other.DstType) return false;
      if (MsgType != other.MsgType) return false;
      if(!dstUids_.Equals(other.dstUids_)) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (DstType != 0) hash ^= DstType.GetHashCode();
      if (MsgType != 0) hash ^= MsgType.GetHashCode();
      hash ^= dstUids_.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (DstType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DstType);
      }
      if (MsgType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) MsgType);
      }
      dstUids_.WriteTo(output, _repeated_dstUids_codec);
      if (CpProto.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (DstType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DstType);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      size += dstUids_.CalculateSize(_repeated_dstUids_codec);
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTeamEventReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.DstType != 0) {
        DstType = other.DstType;
      }
      if (other.MsgType != 0) {
        MsgType = other.MsgType;
      }
      dstUids_.Add(other.dstUids_);
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 32: {
            dstType_ = (global::Matchvs.TeamDstType) input.ReadEnum();
            break;
          }
          case 40: {
            msgType_ = (global::Matchvs.TeamMsgType) input.ReadEnum();
            break;
          }
          case 50:
          case 48: {
            dstUids_.AddEntriesFrom(input, _repeated_dstUids_codec);
            break;
          }
          case 58: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendTeamEventRsp : pb::IMessage<SendTeamEventRsp> {
    private static readonly pb::MessageParser<SendTeamEventRsp> _parser = new pb::MessageParser<SendTeamEventRsp>(() => new SendTeamEventRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTeamEventRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTeamEventRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTeamEventRsp(SendTeamEventRsp other) : this() {
      status_ = other.status_;
      dstUserIDs_ = other.dstUserIDs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTeamEventRsp Clone() {
      return new SendTeamEventRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "dstUserIDs" field.</summary>
    public const int DstUserIDsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_dstUserIDs_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> dstUserIDs_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 表示发送给了哪些队内成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DstUserIDs {
      get { return dstUserIDs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTeamEventRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTeamEventRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!dstUserIDs_.Equals(other.dstUserIDs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= dstUserIDs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      dstUserIDs_.WriteTo(output, _repeated_dstUserIDs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += dstUserIDs_.CalculateSize(_repeated_dstUserIDs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTeamEventRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      dstUserIDs_.Add(other.dstUserIDs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            dstUserIDs_.AddEntriesFrom(input, _repeated_dstUserIDs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendTeamEventNotify : pb::IMessage<SendTeamEventNotify> {
    private static readonly pb::MessageParser<SendTeamEventNotify> _parser = new pb::MessageParser<SendTeamEventNotify>(() => new SendTeamEventNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTeamEventNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTeamEventNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTeamEventNotify(SendTeamEventNotify other) : this() {
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTeamEventNotify Clone() {
      return new SendTeamEventNotify(this);
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTeamEventNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTeamEventNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTeamEventNotify other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KickTeamMemberReq : pb::IMessage<KickTeamMemberReq> {
    private static readonly pb::MessageParser<KickTeamMemberReq> _parser = new pb::MessageParser<KickTeamMemberReq>(() => new KickTeamMemberReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickTeamMemberReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberReq(KickTeamMemberReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      dstUserID_ = other.dstUserID_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberReq Clone() {
      return new KickTeamMemberReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "dstUserID" field.</summary>
    public const int DstUserIDFieldNumber = 4;
    private uint dstUserID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstUserID {
      get { return dstUserID_; }
      set {
        dstUserID_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 5;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickTeamMemberReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickTeamMemberReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (DstUserID != other.DstUserID) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (DstUserID != 0) hash ^= DstUserID.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (DstUserID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DstUserID);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (DstUserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstUserID);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickTeamMemberReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.DstUserID != 0) {
        DstUserID = other.DstUserID;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 32: {
            DstUserID = input.ReadUInt32();
            break;
          }
          case 42: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KickTeamMemberRsp : pb::IMessage<KickTeamMemberRsp> {
    private static readonly pb::MessageParser<KickTeamMemberRsp> _parser = new pb::MessageParser<KickTeamMemberRsp>(() => new KickTeamMemberRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickTeamMemberRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberRsp(KickTeamMemberRsp other) : this() {
      status_ = other.status_;
      teamID_ = other.teamID_;
      owner_ = other.owner_;
      members_ = other.members_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberRsp Clone() {
      return new KickTeamMemberRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_members_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> members_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickTeamMemberRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickTeamMemberRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (TeamID != other.TeamID) return false;
      if (Owner != other.Owner) return false;
      if(!members_.Equals(other.members_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      hash ^= members_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (Owner != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Owner);
      }
      members_.WriteTo(output, _repeated_members_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickTeamMemberRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      members_.Add(other.members_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            Owner = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KickTeamMemberNotify : pb::IMessage<KickTeamMemberNotify> {
    private static readonly pb::MessageParser<KickTeamMemberNotify> _parser = new pb::MessageParser<KickTeamMemberNotify>(() => new KickTeamMemberNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickTeamMemberNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberNotify(KickTeamMemberNotify other) : this() {
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      dstUserID_ = other.dstUserID_;
      owner_ = other.owner_;
      members_ = other.members_.Clone();
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickTeamMemberNotify Clone() {
      return new KickTeamMemberNotify(this);
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "dstUserID" field.</summary>
    public const int DstUserIDFieldNumber = 3;
    private uint dstUserID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstUserID {
      get { return dstUserID_; }
      set {
        dstUserID_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private uint owner_;
    /// <summary>
    /// 队长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_members_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> members_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 6;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickTeamMemberNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickTeamMemberNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (DstUserID != other.DstUserID) return false;
      if (Owner != other.Owner) return false;
      if(!members_.Equals(other.members_)) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (DstUserID != 0) hash ^= DstUserID.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      hash ^= members_.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (DstUserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DstUserID);
      }
      if (Owner != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Owner);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (CpProto.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (DstUserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstUserID);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickTeamMemberNotify other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.DstUserID != 0) {
        DstUserID = other.DstUserID;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      members_.Add(other.members_);
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 24: {
            DstUserID = input.ReadUInt32();
            break;
          }
          case 32: {
            Owner = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 50: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置小队属性
  /// </summary>
  public sealed partial class SetTeamPropertyReq : pb::IMessage<SetTeamPropertyReq> {
    private static readonly pb::MessageParser<SetTeamPropertyReq> _parser = new pb::MessageParser<SetTeamPropertyReq>(() => new SetTeamPropertyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTeamPropertyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamPropertyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamPropertyReq(SetTeamPropertyReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      teamProperty_ = other.teamProperty_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamPropertyReq Clone() {
      return new SetTeamPropertyReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "teamProperty" field.</summary>
    public const int TeamPropertyFieldNumber = 4;
    private pb::ByteString teamProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamProperty {
      get { return teamProperty_; }
      set {
        teamProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTeamPropertyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTeamPropertyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (TeamProperty != other.TeamProperty) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (TeamProperty.Length != 0) hash ^= TeamProperty.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (TeamProperty.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(TeamProperty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (TeamProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamProperty);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTeamPropertyReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.TeamProperty.Length != 0) {
        TeamProperty = other.TeamProperty;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            TeamProperty = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTeamPropertyRsp : pb::IMessage<SetTeamPropertyRsp> {
    private static readonly pb::MessageParser<SetTeamPropertyRsp> _parser = new pb::MessageParser<SetTeamPropertyRsp>(() => new SetTeamPropertyRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTeamPropertyRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamPropertyRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamPropertyRsp(SetTeamPropertyRsp other) : this() {
      status_ = other.status_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      teamProperty_ = other.teamProperty_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamPropertyRsp Clone() {
      return new SetTeamPropertyRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "teamProperty" field.</summary>
    public const int TeamPropertyFieldNumber = 4;
    private pb::ByteString teamProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamProperty {
      get { return teamProperty_; }
      set {
        teamProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTeamPropertyRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTeamPropertyRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (TeamProperty != other.TeamProperty) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (TeamProperty.Length != 0) hash ^= TeamProperty.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (TeamProperty.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(TeamProperty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (TeamProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamProperty);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTeamPropertyRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.TeamProperty.Length != 0) {
        TeamProperty = other.TeamProperty;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            TeamProperty = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeTeamProperty : pb::IMessage<NoticeTeamProperty> {
    private static readonly pb::MessageParser<NoticeTeamProperty> _parser = new pb::MessageParser<NoticeTeamProperty>(() => new NoticeTeamProperty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeTeamProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeTeamProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeTeamProperty(NoticeTeamProperty other) : this() {
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      teamProperty_ = other.teamProperty_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeTeamProperty Clone() {
      return new NoticeTeamProperty(this);
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "teamProperty" field.</summary>
    public const int TeamPropertyFieldNumber = 3;
    private pb::ByteString teamProperty_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TeamProperty {
      get { return teamProperty_; }
      set {
        teamProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeTeamProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeTeamProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (TeamProperty != other.TeamProperty) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (TeamProperty.Length != 0) hash ^= TeamProperty.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (TeamProperty.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TeamProperty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (TeamProperty.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TeamProperty);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeTeamProperty other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.TeamProperty.Length != 0) {
        TeamProperty = other.TeamProperty;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 26: {
            TeamProperty = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置小队userprofile
  /// </summary>
  public sealed partial class SetTeamUserProfileReq : pb::IMessage<SetTeamUserProfileReq> {
    private static readonly pb::MessageParser<SetTeamUserProfileReq> _parser = new pb::MessageParser<SetTeamUserProfileReq>(() => new SetTeamUserProfileReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTeamUserProfileReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamUserProfileReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamUserProfileReq(SetTeamUserProfileReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      userProfile_ = other.userProfile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamUserProfileReq Clone() {
      return new SetTeamUserProfileReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userProfile" field.</summary>
    public const int UserProfileFieldNumber = 4;
    private pb::ByteString userProfile_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTeamUserProfileReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTeamUserProfileReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (UserProfile != other.UserProfile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(UserProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTeamUserProfileReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            UserProfile = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTeamUserProfileRsp : pb::IMessage<SetTeamUserProfileRsp> {
    private static readonly pb::MessageParser<SetTeamUserProfileRsp> _parser = new pb::MessageParser<SetTeamUserProfileRsp>(() => new SetTeamUserProfileRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTeamUserProfileRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamUserProfileRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamUserProfileRsp(SetTeamUserProfileRsp other) : this() {
      status_ = other.status_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      userProfile_ = other.userProfile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTeamUserProfileRsp Clone() {
      return new SetTeamUserProfileRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userProfile" field.</summary>
    public const int UserProfileFieldNumber = 4;
    private pb::ByteString userProfile_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTeamUserProfileRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTeamUserProfileRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (UserProfile != other.UserProfile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(UserProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTeamUserProfileRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            UserProfile = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeTeamUserProfile : pb::IMessage<NoticeTeamUserProfile> {
    private static readonly pb::MessageParser<NoticeTeamUserProfile> _parser = new pb::MessageParser<NoticeTeamUserProfile>(() => new NoticeTeamUserProfile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeTeamUserProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeTeamUserProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeTeamUserProfile(NoticeTeamUserProfile other) : this() {
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      userProfile_ = other.userProfile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeTeamUserProfile Clone() {
      return new NoticeTeamUserProfile(this);
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userProfile" field.</summary>
    public const int UserProfileFieldNumber = 3;
    private pb::ByteString userProfile_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeTeamUserProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeTeamUserProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (UserProfile != other.UserProfile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(UserProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeTeamUserProfile other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 26: {
            UserProfile = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamNetworkStateReq : pb::IMessage<TeamNetworkStateReq> {
    private static readonly pb::MessageParser<TeamNetworkStateReq> _parser = new pb::MessageParser<TeamNetworkStateReq>(() => new TeamNetworkStateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamNetworkStateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNetworkStateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNetworkStateReq(TeamNetworkStateReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNetworkStateReq Clone() {
      return new TeamNetworkStateReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 4;
    private uint state_;
    /// <summary>
    /// 1.网络异常、正在重连 2.重连成功 3.重连失败，退出房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamNetworkStateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamNetworkStateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamNetworkStateReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 32: {
            State = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamNetworkStateRsp : pb::IMessage<TeamNetworkStateRsp> {
    private static readonly pb::MessageParser<TeamNetworkStateRsp> _parser = new pb::MessageParser<TeamNetworkStateRsp>(() => new TeamNetworkStateRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamNetworkStateRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNetworkStateRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNetworkStateRsp(TeamNetworkStateRsp other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNetworkStateRsp Clone() {
      return new TeamNetworkStateRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamNetworkStateRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamNetworkStateRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamNetworkStateRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamNetworkStateNotify : pb::IMessage<TeamNetworkStateNotify> {
    private static readonly pb::MessageParser<TeamNetworkStateNotify> _parser = new pb::MessageParser<TeamNetworkStateNotify>(() => new TeamNetworkStateNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamNetworkStateNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNetworkStateNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNetworkStateNotify(TeamNetworkStateNotify other) : this() {
      teamID_ = other.teamID_;
      userID_ = other.userID_;
      state_ = other.state_;
      owner_ = other.owner_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamNetworkStateNotify Clone() {
      return new TeamNetworkStateNotify(this);
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 1;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private uint state_;
    /// <summary>
    /// 1.网络异常、正在重连 2.重连成功 3.重连失败，退出房间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private uint owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamNetworkStateNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamNetworkStateNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      if (State != other.State) return false;
      if (Owner != other.Owner) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserID);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(State);
      }
      if (Owner != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Owner);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamNetworkStateNotify other) {
      if (other == null) {
        return;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 16: {
            UserID = input.ReadUInt32();
            break;
          }
          case 24: {
            State = input.ReadUInt32();
            break;
          }
          case 32: {
            Owner = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取小队详情
  /// </summary>
  public sealed partial class GetTeamDetailReq : pb::IMessage<GetTeamDetailReq> {
    private static readonly pb::MessageParser<GetTeamDetailReq> _parser = new pb::MessageParser<GetTeamDetailReq>(() => new GetTeamDetailReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTeamDetailReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamDetailReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamDetailReq(GetTeamDetailReq other) : this() {
      gameID_ = other.gameID_;
      teamID_ = other.teamID_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamDetailReq Clone() {
      return new GetTeamDetailReq(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "teamID" field.</summary>
    public const int TeamIDFieldNumber = 2;
    private ulong teamID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamID {
      get { return teamID_; }
      set {
        teamID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTeamDetailReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTeamDetailReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (TeamID != other.TeamID) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (TeamID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TeamID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (TeamID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTeamDetailReq other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.TeamID != 0UL) {
        TeamID = other.TeamID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            TeamID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTeamDetailRsp : pb::IMessage<GetTeamDetailRsp> {
    private static readonly pb::MessageParser<GetTeamDetailRsp> _parser = new pb::MessageParser<GetTeamDetailRsp>(() => new GetTeamDetailRsp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTeamDetailRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.GatewayReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamDetailRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamDetailRsp(GetTeamDetailRsp other) : this() {
      status_ = other.status_;
      TeamInfo = other.teamInfo_ != null ? other.TeamInfo.Clone() : null;
      users_ = other.users_.Clone();
      isMatching_ = other.isMatching_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTeamDetailRsp Clone() {
      return new GetTeamDetailRsp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Matchvs.ErrorCode status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.ErrorCode Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "teamInfo" field.</summary>
    public const int TeamInfoFieldNumber = 2;
    private global::Matchvs.TeamInfo teamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.TeamInfo TeamInfo {
      get { return teamInfo_; }
      set {
        teamInfo_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Matchvs.PlayerInfo> _repeated_users_codec
        = pb::FieldCodec.ForMessage(26, global::Matchvs.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Matchvs.PlayerInfo> users_ = new pbc::RepeatedField<global::Matchvs.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Matchvs.PlayerInfo> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "isMatching" field.</summary>
    public const int IsMatchingFieldNumber = 4;
    private bool isMatching_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMatching {
      get { return isMatching_; }
      set {
        isMatching_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTeamDetailRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTeamDetailRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(TeamInfo, other.TeamInfo)) return false;
      if(!users_.Equals(other.users_)) return false;
      if (IsMatching != other.IsMatching) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (teamInfo_ != null) hash ^= TeamInfo.GetHashCode();
      hash ^= users_.GetHashCode();
      if (IsMatching != false) hash ^= IsMatching.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (teamInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamInfo);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (IsMatching != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMatching);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (teamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamInfo);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (IsMatching != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTeamDetailRsp other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.teamInfo_ != null) {
        if (teamInfo_ == null) {
          teamInfo_ = new global::Matchvs.TeamInfo();
        }
        TeamInfo.MergeFrom(other.TeamInfo);
      }
      users_.Add(other.users_);
      if (other.IsMatching != false) {
        IsMatching = other.IsMatching;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Matchvs.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (teamInfo_ == null) {
              teamInfo_ = new global::Matchvs.TeamInfo();
            }
            input.ReadMessage(teamInfo_);
            break;
          }
          case 26: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 32: {
            IsMatching = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
