// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Matchvs {

  /// <summary>Holder for reflection information generated from sdk.proto</summary>
  public static partial class SdkReflection {

    #region Descriptor
    /// <summary>File descriptor for sdk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SdkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglzZGsucHJvdG8SBnN0cmVhbSJaCgdDaGVja0luEg4KBmdhbWVJRBgBIAEo",
            "DRISCgZyb29tSUQYAiABKARCAjABEg4KBnVzZXJJRBgDIAEoDRIOCgZib29r",
            "SUQYBCABKAkSCwoDa2V5GAUgASgJImMKCkNoZWNrSW5BY2sSDgoGc3RhdHVz",
            "GAEgASgNEg4KBmJvb2tJRBgCIAEoCRIQCghjaGVja2lucxgDIAMoDRIPCgdw",
            "bGF5ZXJzGAQgAygNEhIKCm1heFBsYXllcnMYBSABKA0iPwoJSGVhcnRiZWF0",
            "Eg4KBmdhbWVJRBgBIAEoDRISCgZyb29tSUQYAiABKARCAjABEg4KBnVzZXJJ",
            "RBgDIAEoDSIeCgxIZWFydGJlYXRBY2sSDgoGc3RhdHVzGAEgASgNIk8KCUJy",
            "b2FkY2FzdBISCgZyb29tSUQYASABKARCAjABEgwKBGZsYWcYAiABKA0SDwoH",
            "ZHN0VWlkcxgDIAMoDRIPCgdjcFByb3RvGAQgASgMIh4KDEJyb2FkY2FzdEFj",
            "axIOCgZzdGF0dXMYASABKA0iZgoNQ2hlY2tJbk5vdGlmeRIOCgZ1c2VySUQY",
            "ASABKA0SDgoGYm9va0lEGAIgASgJEhAKCGNoZWNraW5zGAMgAygNEg8KB3Bs",
            "YXllcnMYBCADKA0SEgoKbWF4UGxheWVycxgFIAEoDSI7CgZOb3RpZnkSDgoG",
            "c3JjVWlkGAEgASgNEhAKCHByaW9yaXR5GAIgASgNEg8KB2NwUHJvdG8YAyAB",
            "KAwiUgoJU3Vic2NyaWJlEg4KBmdhbWVJRBgBIAEoDRISCgZyb29tSUQYAiAB",
            "KARCAjABEhAKCGNvbmZpcm1zGAMgAygJEg8KB2NhbmNlbHMYBCADKAkiLgoM",
            "U3Vic2NyaWJlQWNrEg4KBnN0YXR1cxgBIAEoDRIOCgZncm91cHMYAiADKAki",
            "UAoHUHVibGlzaBISCgZyb29tSUQYASABKARCAjABEhAKCHByaW9yaXR5GAIg",
            "ASgNEg4KBmdyb3VwcxgDIAMoCRIPCgdjcFByb3RvGAQgASgMIiwKClB1Ymxp",
            "c2hBY2sSDgoGc3RhdHVzGAEgASgNEg4KBmRzdE51bRgCIAEoDSJSCg1QdWJs",
            "aXNoTm90aWZ5Eg4KBnNyY1VpZBgBIAEoDRIQCghwcmlvcml0eRgCIAEoDRIO",
            "CgZncm91cHMYAyADKAkSDwoHY3BQcm90bxgEIAEoDCJdCg9TZXRVc2VUaW1l",
            "U3RhbXASDgoGZ2FtZUlEGAEgASgNEhIKBnJvb21JRBgCIAEoBEICMAESEAoI",
            "cHJpb3JpdHkYAyABKA0SFAoMdXNlVGltZVN0YW1wGAQgASgIIjsKElNldFVz",
            "ZVRpbWVTdGFtcEFjaxIOCgZzdGF0dXMYASABKA0SFQoJdGltZVN0YW1wGAIg",
            "ASgEQgIwASKVAQoQU2V0RnJhbWVTeW5jUmF0ZRIOCgZnYW1lSUQYASABKA0S",
            "EgoGcm9vbUlEGAIgASgEQgIwARIQCghwcmlvcml0eRgDIAEoDRIRCglmcmFt",
            "ZVJhdGUYBCABKA0SEAoIZnJhbWVJZHgYBSABKA0SEAoIZW5hYmxlR1MYBiAB",
            "KA0SFAoMY2FjaGVGcmFtZU1TGAcgASgFIiUKE1NldEZyYW1lU3luY1JhdGVB",
            "Y2sSDgoGc3RhdHVzGAEgASgNIo4BChZTZXRGcmFtZVN5bmNSYXRlTm90aWZ5",
            "EhAKCHByaW9yaXR5GAEgASgNEhEKCWZyYW1lUmF0ZRgCIAEoDRIQCghmcmFt",
            "ZUlkeBgDIAEoDRIVCgl0aW1lU3RhbXAYBCABKARCAjABEhAKCGVuYWJsZUdT",
            "GAUgASgNEhQKDGNhY2hlRnJhbWVNUxgGIAEoBSJaCg5GcmFtZUJyb2FkY2Fz",
            "dBISCgZyb29tSUQYASABKARCAjABEhAKCHByaW9yaXR5GAIgASgNEg8KB2Nw",
            "UHJvdG8YAyABKAwSEQoJb3BlcmF0aW9uGAQgASgFIiMKEUZyYW1lQnJvYWRj",
            "YXN0QWNrEg4KBnN0YXR1cxgBIAEoDSJtCg9GcmFtZURhdGFOb3RpZnkSDgoG",
            "c3JjVWlkGAEgASgNEhAKCHByaW9yaXR5GAIgASgNEg8KB2NwUHJvdG8YAyAB",
            "KAwSFQoJdGltZVN0YW1wGAQgASgEQgIwARIQCghmcmFtZUlkeBgFIAEoDSKE",
            "AQoPRnJhbWVTeW5jTm90aWZ5EhAKCHByaW9yaXR5GAEgASgNEg8KB2xhc3RJ",
            "ZHgYAiABKA0SDwoHbmV4dElkeBgDIAEoDRITCgdzdGFydFRTGAQgASgEQgIw",
            "ARIRCgVlbmRUUxgFIAEoBEICMAESFQoJdGltZVN0YW1wGAYgASgEQgIwASJI",
            "CgxHZXRDYWNoZURhdGESDgoGZ2FtZUlEGAEgASgNEhIKBnJvb21JRBgCIAEo",
            "BEICMAESFAoMY2FjaGVGcmFtZU1TGAMgASgFIkcKD0dldENhY2hlRGF0YUFj",
            "axIOCgZzdGF0dXMYASABKA0SEgoKZnJhbWVDb3VudBgCIAEoDRIQCghNc2dD",
            "b3VudBgDIAEoDSr6BAoNU0RLSG90ZWxDbWRJRBIRCg1JblZhbGlkU0RLQ21k",
            "EAASEQoMQ2hlY2tpbkNNRElEEPkKEhQKD0NoZWNraW5BY2tDTURJRBD6ChIT",
            "Cg5IZWFydGJlYXRDTURJRBD7ChIWChFIZWFydGJlYXRBY2tDTURJRBD8ChIT",
            "Cg5Ccm9hZGNhc3RDTURJRBD9ChIWChFCcm9hZGNhc3RBY2tDTURJRBD+ChIQ",
            "CgtOb3RpZnlDTURJRBCACxIXChJDaGVja0luTm90aWZ5Q01ESUQQggsSEwoO",
            "U3Vic2NyaWJlQ01ESUQQgwsSFgoRU3Vic2NyaWJlQWNrQ01ESUQQhAsSEQoM",
            "UHVibGlzaENNRElEEIULEhQKD1B1Ymxpc2hBY2tDTURJRBCGCxIXChJQdWJs",
            "aXNoTm90aWZ5Q01ESUQQiAsSGQoUU2V0VXNlVGltZVN0YW1wQ01ESUQQiQsS",
            "HAoXU2V0VXNlVGltZVN0YW1wQWNrQ01ESUQQigsSGgoVU2V0RnJhbWVTeW5j",
            "UmF0ZUNNRElEEIsLEh0KGFNldEZyYW1lU3luY1JhdGVBY2tDTURJRBCMCxIg",
            "ChtTZXRGcmFtZVN5bmNSYXRlTm90aWZ5Q01ESUQQjgsSGAoTRnJhbWVCcm9h",
            "ZGNhc3RDTURJRBCPCxIbChZGcmFtZUJyb2FkY2FzdEFja0NNRElEEJALEhkK",
            "FEZyYW1lRGF0YU5vdGlmeUNNRElEEJILEhkKFEZyYW1lU3luY05vdGlmeUNN",
            "RElEEJQLEhYKEUdldENhY2hlRGF0YUNNRElEEJULEh4KGUdldENhY2hlRGF0",
            "YUNNRElEQWNrQ01ESUQQlgtCCqoCB01hdGNodnNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Matchvs.SDKHotelCmdID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CheckIn), global::Matchvs.CheckIn.Parser, new[]{ "GameID", "RoomID", "UserID", "BookID", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CheckInAck), global::Matchvs.CheckInAck.Parser, new[]{ "Status", "BookID", "Checkins", "Players", "MaxPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.Heartbeat), global::Matchvs.Heartbeat.Parser, new[]{ "GameID", "RoomID", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.HeartbeatAck), global::Matchvs.HeartbeatAck.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.Broadcast), global::Matchvs.Broadcast.Parser, new[]{ "RoomID", "Flag", "DstUids", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.BroadcastAck), global::Matchvs.BroadcastAck.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.CheckInNotify), global::Matchvs.CheckInNotify.Parser, new[]{ "UserID", "BookID", "Checkins", "Players", "MaxPlayers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.Notify), global::Matchvs.Notify.Parser, new[]{ "SrcUid", "Priority", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.Subscribe), global::Matchvs.Subscribe.Parser, new[]{ "GameID", "RoomID", "Confirms", "Cancels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SubscribeAck), global::Matchvs.SubscribeAck.Parser, new[]{ "Status", "Groups" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.Publish), global::Matchvs.Publish.Parser, new[]{ "RoomID", "Priority", "Groups", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.PublishAck), global::Matchvs.PublishAck.Parser, new[]{ "Status", "DstNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.PublishNotify), global::Matchvs.PublishNotify.Parser, new[]{ "SrcUid", "Priority", "Groups", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetUseTimeStamp), global::Matchvs.SetUseTimeStamp.Parser, new[]{ "GameID", "RoomID", "Priority", "UseTimeStamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetUseTimeStampAck), global::Matchvs.SetUseTimeStampAck.Parser, new[]{ "Status", "TimeStamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetFrameSyncRate), global::Matchvs.SetFrameSyncRate.Parser, new[]{ "GameID", "RoomID", "Priority", "FrameRate", "FrameIdx", "EnableGS", "CacheFrameMS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetFrameSyncRateAck), global::Matchvs.SetFrameSyncRateAck.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetFrameSyncRateNotify), global::Matchvs.SetFrameSyncRateNotify.Parser, new[]{ "Priority", "FrameRate", "FrameIdx", "TimeStamp", "EnableGS", "CacheFrameMS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.FrameBroadcast), global::Matchvs.FrameBroadcast.Parser, new[]{ "RoomID", "Priority", "CpProto", "Operation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.FrameBroadcastAck), global::Matchvs.FrameBroadcastAck.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.FrameDataNotify), global::Matchvs.FrameDataNotify.Parser, new[]{ "SrcUid", "Priority", "CpProto", "TimeStamp", "FrameIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.FrameSyncNotify), global::Matchvs.FrameSyncNotify.Parser, new[]{ "Priority", "LastIdx", "NextIdx", "StartTS", "EndTS", "TimeStamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetCacheData), global::Matchvs.GetCacheData.Parser, new[]{ "GameID", "RoomID", "CacheFrameMS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.GetCacheDataAck), global::Matchvs.GetCacheDataAck.Parser, new[]{ "Status", "FrameCount", "MsgCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SDKHotelCmdID {
    [pbr::OriginalName("InValidSDKCmd")] InValidSdkcmd = 0,
    /// <summary>
    /// 二进制checkin协议
    /// </summary>
    [pbr::OriginalName("CheckinCMDID")] CheckinCmdid = 1401,
    [pbr::OriginalName("CheckinAckCMDID")] CheckinAckCmdid = 1402,
    /// <summary>
    /// 二进制heartbeat协议
    /// </summary>
    [pbr::OriginalName("HeartbeatCMDID")] HeartbeatCmdid = 1403,
    [pbr::OriginalName("HeartbeatAckCMDID")] HeartbeatAckCmdid = 1404,
    /// <summary>
    /// 二进制broadcast协议
    /// </summary>
    [pbr::OriginalName("BroadcastCMDID")] BroadcastCmdid = 1405,
    [pbr::OriginalName("BroadcastAckCMDID")] BroadcastAckCmdid = 1406,
    /// <summary>
    /// 二进制notify协议
    /// </summary>
    [pbr::OriginalName("NotifyCMDID")] NotifyCmdid = 1408,
    /// <summary>
    /// 二进制checkin通知协议
    /// </summary>
    [pbr::OriginalName("CheckInNotifyCMDID")] CheckInNotifyCmdid = 1410,
    /// <summary>
    /// 二进制Subscribe协议
    /// </summary>
    [pbr::OriginalName("SubscribeCMDID")] SubscribeCmdid = 1411,
    [pbr::OriginalName("SubscribeAckCMDID")] SubscribeAckCmdid = 1412,
    /// <summary>
    /// 二进制Publish协议
    /// </summary>
    [pbr::OriginalName("PublishCMDID")] PublishCmdid = 1413,
    [pbr::OriginalName("PublishAckCMDID")] PublishAckCmdid = 1414,
    /// <summary>
    /// 二进制Publish通知协议，不同于普通notify
    /// </summary>
    [pbr::OriginalName("PublishNotifyCMDID")] PublishNotifyCmdid = 1416,
    /// <summary>
    /// 二进制SetUseTimeStamp协议
    /// </summary>
    [pbr::OriginalName("SetUseTimeStampCMDID")] SetUseTimeStampCmdid = 1417,
    [pbr::OriginalName("SetUseTimeStampAckCMDID")] SetUseTimeStampAckCmdid = 1418,
    /// <summary>
    /// 二进制SetUseTimeStamp协议
    /// </summary>
    [pbr::OriginalName("SetFrameSyncRateCMDID")] SetFrameSyncRateCmdid = 1419,
    [pbr::OriginalName("SetFrameSyncRateAckCMDID")] SetFrameSyncRateAckCmdid = 1420,
    /// <summary>
    /// 二进制设置帧同步帧率通知协议
    /// </summary>
    [pbr::OriginalName("SetFrameSyncRateNotifyCMDID")] SetFrameSyncRateNotifyCmdid = 1422,
    /// <summary>
    /// 二进制发送帧同步数据
    /// </summary>
    [pbr::OriginalName("FrameBroadcastCMDID")] FrameBroadcastCmdid = 1423,
    [pbr::OriginalName("FrameBroadcastAckCMDID")] FrameBroadcastAckCmdid = 1424,
    /// <summary>
    /// 二进制FrameData通知协议，不同于普通notify
    /// </summary>
    [pbr::OriginalName("FrameDataNotifyCMDID")] FrameDataNotifyCmdid = 1426,
    /// <summary>
    /// 二进制帧同步通知协议
    /// </summary>
    [pbr::OriginalName("FrameSyncNotifyCMDID")] FrameSyncNotifyCmdid = 1428,
    /// <summary>
    /// 二进制GetCacheData协议
    /// </summary>
    [pbr::OriginalName("GetCacheDataCMDID")] GetCacheDataCmdid = 1429,
    [pbr::OriginalName("GetCacheDataCMDIDAckCMDID")] GetCacheDataCmdidackCmdid = 1430,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 1 checkin
  /// </summary>
  public sealed partial class CheckIn : pb::IMessage<CheckIn> {
    private static readonly pb::MessageParser<CheckIn> _parser = new pb::MessageParser<CheckIn>(() => new CheckIn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckIn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckIn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckIn(CheckIn other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      userID_ = other.userID_;
      bookID_ = other.bookID_;
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckIn Clone() {
      return new CheckIn(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "bookID" field.</summary>
    public const int BookIDFieldNumber = 4;
    private string bookID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BookID {
      get { return bookID_; }
      set {
        bookID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 5;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckIn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckIn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      if (BookID != other.BookID) return false;
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (BookID.Length != 0) hash ^= BookID.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (BookID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BookID);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (BookID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BookID);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckIn other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.BookID.Length != 0) {
        BookID = other.BookID;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            BookID = input.ReadString();
            break;
          }
          case 42: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckInAck : pb::IMessage<CheckInAck> {
    private static readonly pb::MessageParser<CheckInAck> _parser = new pb::MessageParser<CheckInAck>(() => new CheckInAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckInAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInAck(CheckInAck other) : this() {
      status_ = other.status_;
      bookID_ = other.bookID_;
      checkins_ = other.checkins_.Clone();
      players_ = other.players_.Clone();
      maxPlayers_ = other.maxPlayers_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInAck Clone() {
      return new CheckInAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "bookID" field.</summary>
    public const int BookIDFieldNumber = 2;
    private string bookID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BookID {
      get { return bookID_; }
      set {
        bookID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "checkins" field.</summary>
    public const int CheckinsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_checkins_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> checkins_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 已经checkIn的玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Checkins {
      get { return checkins_; }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_players_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> players_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 所有房间中玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "maxPlayers" field.</summary>
    public const int MaxPlayersFieldNumber = 5;
    private uint maxPlayers_;
    /// <summary>
    /// 房间可容纳最大玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckInAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckInAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (BookID != other.BookID) return false;
      if(!checkins_.Equals(other.checkins_)) return false;
      if(!players_.Equals(other.players_)) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (BookID.Length != 0) hash ^= BookID.GetHashCode();
      hash ^= checkins_.GetHashCode();
      hash ^= players_.GetHashCode();
      if (MaxPlayers != 0) hash ^= MaxPlayers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      if (BookID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BookID);
      }
      checkins_.WriteTo(output, _repeated_checkins_codec);
      players_.WriteTo(output, _repeated_players_codec);
      if (MaxPlayers != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxPlayers);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (BookID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BookID);
      }
      size += checkins_.CalculateSize(_repeated_checkins_codec);
      size += players_.CalculateSize(_repeated_players_codec);
      if (MaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayers);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckInAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.BookID.Length != 0) {
        BookID = other.BookID;
      }
      checkins_.Add(other.checkins_);
      players_.Add(other.players_);
      if (other.MaxPlayers != 0) {
        MaxPlayers = other.MaxPlayers;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 18: {
            BookID = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            checkins_.AddEntriesFrom(input, _repeated_checkins_codec);
            break;
          }
          case 34:
          case 32: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 40: {
            MaxPlayers = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 2 heartbeat
  /// </summary>
  public sealed partial class Heartbeat : pb::IMessage<Heartbeat> {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeartbeatAck : pb::IMessage<HeartbeatAck> {
    private static readonly pb::MessageParser<HeartbeatAck> _parser = new pb::MessageParser<HeartbeatAck>(() => new HeartbeatAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartbeatAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatAck(HeartbeatAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartbeatAck Clone() {
      return new HeartbeatAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartbeatAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartbeatAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartbeatAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 3 broadcast和notify属于高频命令，尽量减少冗余字段
  /// </summary>
  public sealed partial class Broadcast : pb::IMessage<Broadcast> {
    private static readonly pb::MessageParser<Broadcast> _parser = new pb::MessageParser<Broadcast>(() => new Broadcast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Broadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broadcast(Broadcast other) : this() {
      roomID_ = other.roomID_;
      flag_ = other.flag_;
      dstUids_ = other.dstUids_.Clone();
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Broadcast Clone() {
      return new Broadcast(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private uint flag_;
    /// <summary>
    /// 0000 00 00 priority, dstType 和 msgType 合并
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "dstUids" field.</summary>
    public const int DstUidsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_dstUids_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> dstUids_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DstUids {
      get { return dstUids_; }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Broadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Broadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (Flag != other.Flag) return false;
      if(!dstUids_.Equals(other.dstUids_)) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      hash ^= dstUids_.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (Flag != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Flag);
      }
      dstUids_.WriteTo(output, _repeated_dstUids_codec);
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      size += dstUids_.CalculateSize(_repeated_dstUids_codec);
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Broadcast other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      dstUids_.Add(other.dstUids_);
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            Flag = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            dstUids_.AddEntriesFrom(input, _repeated_dstUids_codec);
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BroadcastAck : pb::IMessage<BroadcastAck> {
    private static readonly pb::MessageParser<BroadcastAck> _parser = new pb::MessageParser<BroadcastAck>(() => new BroadcastAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastAck(BroadcastAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastAck Clone() {
      return new BroadcastAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 4 推送CheckIn
  /// </summary>
  public sealed partial class CheckInNotify : pb::IMessage<CheckInNotify> {
    private static readonly pb::MessageParser<CheckInNotify> _parser = new pb::MessageParser<CheckInNotify>(() => new CheckInNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckInNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInNotify(CheckInNotify other) : this() {
      userID_ = other.userID_;
      bookID_ = other.bookID_;
      checkins_ = other.checkins_.Clone();
      players_ = other.players_.Clone();
      maxPlayers_ = other.maxPlayers_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckInNotify Clone() {
      return new CheckInNotify(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    /// <summary>
    /// 刚checkIn的玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "bookID" field.</summary>
    public const int BookIDFieldNumber = 2;
    private string bookID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BookID {
      get { return bookID_; }
      set {
        bookID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "checkins" field.</summary>
    public const int CheckinsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_checkins_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> checkins_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 已经checkIn的玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Checkins {
      get { return checkins_; }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_players_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> players_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 所有房间中玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "maxPlayers" field.</summary>
    public const int MaxPlayersFieldNumber = 5;
    private uint maxPlayers_;
    /// <summary>
    /// 房间可容纳最大玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPlayers {
      get { return maxPlayers_; }
      set {
        maxPlayers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckInNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckInNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (BookID != other.BookID) return false;
      if(!checkins_.Equals(other.checkins_)) return false;
      if(!players_.Equals(other.players_)) return false;
      if (MaxPlayers != other.MaxPlayers) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (BookID.Length != 0) hash ^= BookID.GetHashCode();
      hash ^= checkins_.GetHashCode();
      hash ^= players_.GetHashCode();
      if (MaxPlayers != 0) hash ^= MaxPlayers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (BookID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BookID);
      }
      checkins_.WriteTo(output, _repeated_checkins_codec);
      players_.WriteTo(output, _repeated_players_codec);
      if (MaxPlayers != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxPlayers);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (BookID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BookID);
      }
      size += checkins_.CalculateSize(_repeated_checkins_codec);
      size += players_.CalculateSize(_repeated_players_codec);
      if (MaxPlayers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayers);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckInNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.BookID.Length != 0) {
        BookID = other.BookID;
      }
      checkins_.Add(other.checkins_);
      players_.Add(other.players_);
      if (other.MaxPlayers != 0) {
        MaxPlayers = other.MaxPlayers;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 18: {
            BookID = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            checkins_.AddEntriesFrom(input, _repeated_checkins_codec);
            break;
          }
          case 34:
          case 32: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 40: {
            MaxPlayers = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify : pb::IMessage<Notify> {
    private static readonly pb::MessageParser<Notify> _parser = new pb::MessageParser<Notify>(() => new Notify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify(Notify other) : this() {
      srcUid_ = other.srcUid_;
      priority_ = other.priority_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify Clone() {
      return new Notify(this);
    }

    /// <summary>Field number for the "srcUid" field.</summary>
    public const int SrcUidFieldNumber = 1;
    private uint srcUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUid {
      get { return srcUid_; }
      set {
        srcUid_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcUid != other.SrcUid) return false;
      if (Priority != other.Priority) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcUid != 0) hash ^= SrcUid.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SrcUid);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUid);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify other) {
      if (other == null) {
        return;
      }
      if (other.SrcUid != 0) {
        SrcUid = other.SrcUid;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcUid = input.ReadUInt32();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 6 订阅/取消 groups
  /// </summary>
  public sealed partial class Subscribe : pb::IMessage<Subscribe> {
    private static readonly pb::MessageParser<Subscribe> _parser = new pb::MessageParser<Subscribe>(() => new Subscribe());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Subscribe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscribe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscribe(Subscribe other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      confirms_ = other.confirms_.Clone();
      cancels_ = other.cancels_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Subscribe Clone() {
      return new Subscribe(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "confirms" field.</summary>
    public const int ConfirmsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_confirms_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> confirms_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 要订阅的groups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Confirms {
      get { return confirms_; }
    }

    /// <summary>Field number for the "cancels" field.</summary>
    public const int CancelsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_cancels_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> cancels_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 要取消订阅的groups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cancels {
      get { return cancels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Subscribe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Subscribe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if(!confirms_.Equals(other.confirms_)) return false;
      if(!cancels_.Equals(other.cancels_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      hash ^= confirms_.GetHashCode();
      hash ^= cancels_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      confirms_.WriteTo(output, _repeated_confirms_codec);
      cancels_.WriteTo(output, _repeated_cancels_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      size += confirms_.CalculateSize(_repeated_confirms_codec);
      size += cancels_.CalculateSize(_repeated_cancels_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Subscribe other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      confirms_.Add(other.confirms_);
      cancels_.Add(other.cancels_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 26: {
            confirms_.AddEntriesFrom(input, _repeated_confirms_codec);
            break;
          }
          case 34: {
            cancels_.AddEntriesFrom(input, _repeated_cancels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscribeAck : pb::IMessage<SubscribeAck> {
    private static readonly pb::MessageParser<SubscribeAck> _parser = new pb::MessageParser<SubscribeAck>(() => new SubscribeAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeAck(SubscribeAck other) : this() {
      status_ = other.status_;
      groups_ = other.groups_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeAck Clone() {
      return new SubscribeAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_groups_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> groups_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 玩家当前任然订阅的groups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!groups_.Equals(other.groups_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= groups_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      groups_.Add(other.groups_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 18: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 7 发布消息
  /// </summary>
  public sealed partial class Publish : pb::IMessage<Publish> {
    private static readonly pb::MessageParser<Publish> _parser = new pb::MessageParser<Publish>(() => new Publish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Publish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Publish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Publish(Publish other) : this() {
      roomID_ = other.roomID_;
      priority_ = other.priority_;
      groups_ = other.groups_.Clone();
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Publish Clone() {
      return new Publish(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_groups_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> groups_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 要发布的groups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Publish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Publish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (Priority != other.Priority) return false;
      if(!groups_.Equals(other.groups_)) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      hash ^= groups_.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Publish other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      groups_.Add(other.groups_);
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 26: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublishAck : pb::IMessage<PublishAck> {
    private static readonly pb::MessageParser<PublishAck> _parser = new pb::MessageParser<PublishAck>(() => new PublishAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishAck(PublishAck other) : this() {
      status_ = other.status_;
      dstNum_ = other.dstNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishAck Clone() {
      return new PublishAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "dstNum" field.</summary>
    public const int DstNumFieldNumber = 2;
    private uint dstNum_;
    /// <summary>
    /// 目标玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstNum {
      get { return dstNum_; }
      set {
        dstNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (DstNum != other.DstNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (DstNum != 0) hash ^= DstNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      if (DstNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DstNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (DstNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.DstNum != 0) {
        DstNum = other.DstNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 16: {
            DstNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// publish通知
  /// </summary>
  public sealed partial class PublishNotify : pb::IMessage<PublishNotify> {
    private static readonly pb::MessageParser<PublishNotify> _parser = new pb::MessageParser<PublishNotify>(() => new PublishNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishNotify(PublishNotify other) : this() {
      srcUid_ = other.srcUid_;
      priority_ = other.priority_;
      groups_ = other.groups_.Clone();
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishNotify Clone() {
      return new PublishNotify(this);
    }

    /// <summary>Field number for the "srcUid" field.</summary>
    public const int SrcUidFieldNumber = 1;
    private uint srcUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUid {
      get { return srcUid_; }
      set {
        srcUid_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_groups_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> groups_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 来自哪些groups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcUid != other.SrcUid) return false;
      if (Priority != other.Priority) return false;
      if(!groups_.Equals(other.groups_)) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcUid != 0) hash ^= SrcUid.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      hash ^= groups_.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SrcUid);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUid);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishNotify other) {
      if (other == null) {
        return;
      }
      if (other.SrcUid != 0) {
        SrcUid = other.SrcUid;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      groups_.Add(other.groups_);
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcUid = input.ReadUInt32();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 26: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 8 设置是否启用时间戳
  /// </summary>
  public sealed partial class SetUseTimeStamp : pb::IMessage<SetUseTimeStamp> {
    private static readonly pb::MessageParser<SetUseTimeStamp> _parser = new pb::MessageParser<SetUseTimeStamp>(() => new SetUseTimeStamp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetUseTimeStamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUseTimeStamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUseTimeStamp(SetUseTimeStamp other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      priority_ = other.priority_;
      useTimeStamp_ = other.useTimeStamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUseTimeStamp Clone() {
      return new SetUseTimeStamp(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 3;
    private uint priority_;
    /// <summary>
    /// 要设置的通道的优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "useTimeStamp" field.</summary>
    public const int UseTimeStampFieldNumber = 4;
    private bool useTimeStamp_;
    /// <summary>
    /// 是否启用时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseTimeStamp {
      get { return useTimeStamp_; }
      set {
        useTimeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetUseTimeStamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetUseTimeStamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (Priority != other.Priority) return false;
      if (UseTimeStamp != other.UseTimeStamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (UseTimeStamp != false) hash ^= UseTimeStamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (Priority != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Priority);
      }
      if (UseTimeStamp != false) {
        output.WriteRawTag(32);
        output.WriteBool(UseTimeStamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (UseTimeStamp != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetUseTimeStamp other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.UseTimeStamp != false) {
        UseTimeStamp = other.UseTimeStamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            Priority = input.ReadUInt32();
            break;
          }
          case 32: {
            UseTimeStamp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetUseTimeStampAck : pb::IMessage<SetUseTimeStampAck> {
    private static readonly pb::MessageParser<SetUseTimeStampAck> _parser = new pb::MessageParser<SetUseTimeStampAck>(() => new SetUseTimeStampAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetUseTimeStampAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUseTimeStampAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUseTimeStampAck(SetUseTimeStampAck other) : this() {
      status_ = other.status_;
      timeStamp_ = other.timeStamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUseTimeStampAck Clone() {
      return new SetUseTimeStampAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 2;
    private ulong timeStamp_;
    /// <summary>
    /// 当前服务器时间戳？
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetUseTimeStampAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetUseTimeStampAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (TimeStamp != other.TimeStamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TimeStamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetUseTimeStampAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 16: {
            TimeStamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 9 设置帧同步帧率
  /// 只支持:  打开: 关 -> 开 (rate = 0 -> rate > 0)
  ///         关闭: 开 -> 关 (rate > 0 -> rate = 0)
  /// </summary>
  public sealed partial class SetFrameSyncRate : pb::IMessage<SetFrameSyncRate> {
    private static readonly pb::MessageParser<SetFrameSyncRate> _parser = new pb::MessageParser<SetFrameSyncRate>(() => new SetFrameSyncRate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetFrameSyncRate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFrameSyncRate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFrameSyncRate(SetFrameSyncRate other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      priority_ = other.priority_;
      frameRate_ = other.frameRate_;
      frameIdx_ = other.frameIdx_;
      enableGS_ = other.enableGS_;
      cacheFrameMS_ = other.cacheFrameMS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFrameSyncRate Clone() {
      return new SetFrameSyncRate(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    /// <summary>
    /// 房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 3;
    private uint priority_;
    /// <summary>
    /// 要设置的通道的优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "frameRate" field.</summary>
    public const int FrameRateFieldNumber = 4;
    private uint frameRate_;
    /// <summary>
    /// 同步帧率(0-20,且能被1000整除)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameRate {
      get { return frameRate_; }
      set {
        frameRate_ = value;
      }
    }

    /// <summary>Field number for the "frameIdx" field.</summary>
    public const int FrameIdxFieldNumber = 5;
    private uint frameIdx_;
    /// <summary>
    /// 初始帧编号(frameRate > 0 时有效),frameIdx 需 > 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameIdx {
      get { return frameIdx_; }
      set {
        frameIdx_ = value;
      }
    }

    /// <summary>Field number for the "enableGS" field.</summary>
    public const int EnableGSFieldNumber = 6;
    private uint enableGS_;
    /// <summary>
    /// GameServer是否参与帧同步（0：不参与；1：参与）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnableGS {
      get { return enableGS_; }
      set {
        enableGS_ = value;
      }
    }

    /// <summary>Field number for the "cacheFrameMS" field.</summary>
    public const int CacheFrameMSFieldNumber = 7;
    private int cacheFrameMS_;
    /// <summary>
    /// 缓存帧的毫秒数 0 为不开启缓存功能；-1 为缓存所有数据；
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CacheFrameMS {
      get { return cacheFrameMS_; }
      set {
        cacheFrameMS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetFrameSyncRate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetFrameSyncRate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (Priority != other.Priority) return false;
      if (FrameRate != other.FrameRate) return false;
      if (FrameIdx != other.FrameIdx) return false;
      if (EnableGS != other.EnableGS) return false;
      if (CacheFrameMS != other.CacheFrameMS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (FrameRate != 0) hash ^= FrameRate.GetHashCode();
      if (FrameIdx != 0) hash ^= FrameIdx.GetHashCode();
      if (EnableGS != 0) hash ^= EnableGS.GetHashCode();
      if (CacheFrameMS != 0) hash ^= CacheFrameMS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (Priority != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Priority);
      }
      if (FrameRate != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FrameRate);
      }
      if (FrameIdx != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FrameIdx);
      }
      if (EnableGS != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(EnableGS);
      }
      if (CacheFrameMS != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CacheFrameMS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (FrameRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameRate);
      }
      if (FrameIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameIdx);
      }
      if (EnableGS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnableGS);
      }
      if (CacheFrameMS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CacheFrameMS);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetFrameSyncRate other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.FrameRate != 0) {
        FrameRate = other.FrameRate;
      }
      if (other.FrameIdx != 0) {
        FrameIdx = other.FrameIdx;
      }
      if (other.EnableGS != 0) {
        EnableGS = other.EnableGS;
      }
      if (other.CacheFrameMS != 0) {
        CacheFrameMS = other.CacheFrameMS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            Priority = input.ReadUInt32();
            break;
          }
          case 32: {
            FrameRate = input.ReadUInt32();
            break;
          }
          case 40: {
            FrameIdx = input.ReadUInt32();
            break;
          }
          case 48: {
            EnableGS = input.ReadUInt32();
            break;
          }
          case 56: {
            CacheFrameMS = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetFrameSyncRateAck : pb::IMessage<SetFrameSyncRateAck> {
    private static readonly pb::MessageParser<SetFrameSyncRateAck> _parser = new pb::MessageParser<SetFrameSyncRateAck>(() => new SetFrameSyncRateAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetFrameSyncRateAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFrameSyncRateAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFrameSyncRateAck(SetFrameSyncRateAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFrameSyncRateAck Clone() {
      return new SetFrameSyncRateAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetFrameSyncRateAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetFrameSyncRateAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetFrameSyncRateAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SDK收到frameRate > 0 表示通道帧同步开始, 可开始缓存帧数据
  ///    收到frameRate = 0 表示通道帧同步结束， 可结束缓存帧数据
  /// </summary>
  public sealed partial class SetFrameSyncRateNotify : pb::IMessage<SetFrameSyncRateNotify> {
    private static readonly pb::MessageParser<SetFrameSyncRateNotify> _parser = new pb::MessageParser<SetFrameSyncRateNotify>(() => new SetFrameSyncRateNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetFrameSyncRateNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFrameSyncRateNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFrameSyncRateNotify(SetFrameSyncRateNotify other) : this() {
      priority_ = other.priority_;
      frameRate_ = other.frameRate_;
      frameIdx_ = other.frameIdx_;
      timeStamp_ = other.timeStamp_;
      enableGS_ = other.enableGS_;
      cacheFrameMS_ = other.cacheFrameMS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFrameSyncRateNotify Clone() {
      return new SetFrameSyncRateNotify(this);
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 1;
    private uint priority_;
    /// <summary>
    /// 要设置的通道的优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "frameRate" field.</summary>
    public const int FrameRateFieldNumber = 2;
    private uint frameRate_;
    /// <summary>
    /// 同步帧率
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameRate {
      get { return frameRate_; }
      set {
        frameRate_ = value;
      }
    }

    /// <summary>Field number for the "frameIdx" field.</summary>
    public const int FrameIdxFieldNumber = 3;
    private uint frameIdx_;
    /// <summary>
    /// 初始帧编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameIdx {
      get { return frameIdx_; }
      set {
        frameIdx_ = value;
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 4;
    private ulong timeStamp_;
    /// <summary>
    /// 系统时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "enableGS" field.</summary>
    public const int EnableGSFieldNumber = 5;
    private uint enableGS_;
    /// <summary>
    /// GameServer是否参与帧同步（0：不参与；1：参与）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnableGS {
      get { return enableGS_; }
      set {
        enableGS_ = value;
      }
    }

    /// <summary>Field number for the "cacheFrameMS" field.</summary>
    public const int CacheFrameMSFieldNumber = 6;
    private int cacheFrameMS_;
    /// <summary>
    /// 帧缓存设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CacheFrameMS {
      get { return cacheFrameMS_; }
      set {
        cacheFrameMS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetFrameSyncRateNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetFrameSyncRateNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Priority != other.Priority) return false;
      if (FrameRate != other.FrameRate) return false;
      if (FrameIdx != other.FrameIdx) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (EnableGS != other.EnableGS) return false;
      if (CacheFrameMS != other.CacheFrameMS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (FrameRate != 0) hash ^= FrameRate.GetHashCode();
      if (FrameIdx != 0) hash ^= FrameIdx.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (EnableGS != 0) hash ^= EnableGS.GetHashCode();
      if (CacheFrameMS != 0) hash ^= CacheFrameMS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Priority != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Priority);
      }
      if (FrameRate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameRate);
      }
      if (FrameIdx != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FrameIdx);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TimeStamp);
      }
      if (EnableGS != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(EnableGS);
      }
      if (CacheFrameMS != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CacheFrameMS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (FrameRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameRate);
      }
      if (FrameIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameIdx);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (EnableGS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnableGS);
      }
      if (CacheFrameMS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CacheFrameMS);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetFrameSyncRateNotify other) {
      if (other == null) {
        return;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.FrameRate != 0) {
        FrameRate = other.FrameRate;
      }
      if (other.FrameIdx != 0) {
        FrameIdx = other.FrameIdx;
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.EnableGS != 0) {
        EnableGS = other.EnableGS;
      }
      if (other.CacheFrameMS != 0) {
        CacheFrameMS = other.CacheFrameMS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Priority = input.ReadUInt32();
            break;
          }
          case 16: {
            FrameRate = input.ReadUInt32();
            break;
          }
          case 24: {
            FrameIdx = input.ReadUInt32();
            break;
          }
          case 32: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 40: {
            EnableGS = input.ReadUInt32();
            break;
          }
          case 48: {
            CacheFrameMS = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发送帧数据
  /// </summary>
  public sealed partial class FrameBroadcast : pb::IMessage<FrameBroadcast> {
    private static readonly pb::MessageParser<FrameBroadcast> _parser = new pb::MessageParser<FrameBroadcast>(() => new FrameBroadcast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameBroadcast(FrameBroadcast other) : this() {
      roomID_ = other.roomID_;
      priority_ = other.priority_;
      cpProto_ = other.cpProto_;
      operation_ = other.operation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameBroadcast Clone() {
      return new FrameBroadcast(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 4;
    private int operation_;
    /// <summary>
    /// 0：只发客户端；1：只发GS；2：同时发送客户端和GS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (Priority != other.Priority) return false;
      if (CpProto != other.CpProto) return false;
      if (Operation != other.Operation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      if (Operation != 0) hash ^= Operation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
      if (Operation != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Operation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
          case 32: {
            Operation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FrameBroadcastAck : pb::IMessage<FrameBroadcastAck> {
    private static readonly pb::MessageParser<FrameBroadcastAck> _parser = new pb::MessageParser<FrameBroadcastAck>(() => new FrameBroadcastAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameBroadcastAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameBroadcastAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameBroadcastAck(FrameBroadcastAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameBroadcastAck Clone() {
      return new FrameBroadcastAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameBroadcastAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameBroadcastAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameBroadcastAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 10 帧数据通知
  /// </summary>
  public sealed partial class FrameDataNotify : pb::IMessage<FrameDataNotify> {
    private static readonly pb::MessageParser<FrameDataNotify> _parser = new pb::MessageParser<FrameDataNotify>(() => new FrameDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameDataNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameDataNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameDataNotify(FrameDataNotify other) : this() {
      srcUid_ = other.srcUid_;
      priority_ = other.priority_;
      cpProto_ = other.cpProto_;
      timeStamp_ = other.timeStamp_;
      frameIdx_ = other.frameIdx_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameDataNotify Clone() {
      return new FrameDataNotify(this);
    }

    /// <summary>Field number for the "srcUid" field.</summary>
    public const int SrcUidFieldNumber = 1;
    private uint srcUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUid {
      get { return srcUid_; }
      set {
        srcUid_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 4;
    private ulong timeStamp_;
    /// <summary>
    /// 帧数据时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "frameIdx" field.</summary>
    public const int FrameIdxFieldNumber = 5;
    private uint frameIdx_;
    /// <summary>
    /// 帧编号-帧同步时有效(>0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameIdx {
      get { return frameIdx_; }
      set {
        frameIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameDataNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameDataNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcUid != other.SrcUid) return false;
      if (Priority != other.Priority) return false;
      if (CpProto != other.CpProto) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (FrameIdx != other.FrameIdx) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcUid != 0) hash ^= SrcUid.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (FrameIdx != 0) hash ^= FrameIdx.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SrcUid);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TimeStamp);
      }
      if (FrameIdx != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FrameIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUid);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (FrameIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameDataNotify other) {
      if (other == null) {
        return;
      }
      if (other.SrcUid != 0) {
        SrcUid = other.SrcUid;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.FrameIdx != 0) {
        FrameIdx = other.FrameIdx;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcUid = input.ReadUInt32();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
          case 32: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 40: {
            FrameIdx = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 11 帧同步通知(每一帧结束时通知)
  /// </summary>
  public sealed partial class FrameSyncNotify : pb::IMessage<FrameSyncNotify> {
    private static readonly pb::MessageParser<FrameSyncNotify> _parser = new pb::MessageParser<FrameSyncNotify>(() => new FrameSyncNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameSyncNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncNotify(FrameSyncNotify other) : this() {
      priority_ = other.priority_;
      lastIdx_ = other.lastIdx_;
      nextIdx_ = other.nextIdx_;
      startTS_ = other.startTS_;
      endTS_ = other.endTS_;
      timeStamp_ = other.timeStamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncNotify Clone() {
      return new FrameSyncNotify(this);
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 1;
    private uint priority_;
    /// <summary>
    /// 要设置的通道的优先级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "lastIdx" field.</summary>
    public const int LastIdxFieldNumber = 2;
    private uint lastIdx_;
    /// <summary>
    /// 当前帧编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastIdx {
      get { return lastIdx_; }
      set {
        lastIdx_ = value;
      }
    }

    /// <summary>Field number for the "nextIdx" field.</summary>
    public const int NextIdxFieldNumber = 3;
    private uint nextIdx_;
    /// <summary>
    /// 下一帧编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextIdx {
      get { return nextIdx_; }
      set {
        nextIdx_ = value;
      }
    }

    /// <summary>Field number for the "startTS" field.</summary>
    public const int StartTSFieldNumber = 4;
    private ulong startTS_;
    /// <summary>
    /// 本帧开始时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTS {
      get { return startTS_; }
      set {
        startTS_ = value;
      }
    }

    /// <summary>Field number for the "endTS" field.</summary>
    public const int EndTSFieldNumber = 5;
    private ulong endTS_;
    /// <summary>
    /// 本帧结束时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTS {
      get { return endTS_; }
      set {
        endTS_ = value;
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private ulong timeStamp_;
    /// <summary>
    /// 系统时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameSyncNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameSyncNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Priority != other.Priority) return false;
      if (LastIdx != other.LastIdx) return false;
      if (NextIdx != other.NextIdx) return false;
      if (StartTS != other.StartTS) return false;
      if (EndTS != other.EndTS) return false;
      if (TimeStamp != other.TimeStamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (LastIdx != 0) hash ^= LastIdx.GetHashCode();
      if (NextIdx != 0) hash ^= NextIdx.GetHashCode();
      if (StartTS != 0UL) hash ^= StartTS.GetHashCode();
      if (EndTS != 0UL) hash ^= EndTS.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Priority != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Priority);
      }
      if (LastIdx != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastIdx);
      }
      if (NextIdx != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NextIdx);
      }
      if (StartTS != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(StartTS);
      }
      if (EndTS != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(EndTS);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TimeStamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (LastIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastIdx);
      }
      if (NextIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextIdx);
      }
      if (StartTS != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTS);
      }
      if (EndTS != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTS);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameSyncNotify other) {
      if (other == null) {
        return;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.LastIdx != 0) {
        LastIdx = other.LastIdx;
      }
      if (other.NextIdx != 0) {
        NextIdx = other.NextIdx;
      }
      if (other.StartTS != 0UL) {
        StartTS = other.StartTS;
      }
      if (other.EndTS != 0UL) {
        EndTS = other.EndTS;
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Priority = input.ReadUInt32();
            break;
          }
          case 16: {
            LastIdx = input.ReadUInt32();
            break;
          }
          case 24: {
            NextIdx = input.ReadUInt32();
            break;
          }
          case 32: {
            StartTS = input.ReadUInt64();
            break;
          }
          case 40: {
            EndTS = input.ReadUInt64();
            break;
          }
          case 48: {
            TimeStamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取缓存的帧数据
  /// </summary>
  public sealed partial class GetCacheData : pb::IMessage<GetCacheData> {
    private static readonly pb::MessageParser<GetCacheData> _parser = new pb::MessageParser<GetCacheData>(() => new GetCacheData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCacheData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCacheData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCacheData(GetCacheData other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      cacheFrameMS_ = other.cacheFrameMS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCacheData Clone() {
      return new GetCacheData(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "cacheFrameMS" field.</summary>
    public const int CacheFrameMSFieldNumber = 3;
    private int cacheFrameMS_;
    /// <summary>
    /// 想要获取的毫秒数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CacheFrameMS {
      get { return cacheFrameMS_; }
      set {
        cacheFrameMS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCacheData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCacheData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (CacheFrameMS != other.CacheFrameMS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (CacheFrameMS != 0) hash ^= CacheFrameMS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (CacheFrameMS != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CacheFrameMS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (CacheFrameMS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CacheFrameMS);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCacheData other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.CacheFrameMS != 0) {
        CacheFrameMS = other.CacheFrameMS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            CacheFrameMS = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCacheDataAck : pb::IMessage<GetCacheDataAck> {
    private static readonly pb::MessageParser<GetCacheDataAck> _parser = new pb::MessageParser<GetCacheDataAck>(() => new GetCacheDataAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCacheDataAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.SdkReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCacheDataAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCacheDataAck(GetCacheDataAck other) : this() {
      status_ = other.status_;
      frameCount_ = other.frameCount_;
      msgCount_ = other.msgCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCacheDataAck Clone() {
      return new GetCacheDataAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "frameCount" field.</summary>
    public const int FrameCountFieldNumber = 2;
    private uint frameCount_;
    /// <summary>
    /// 帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameCount {
      get { return frameCount_; }
      set {
        frameCount_ = value;
      }
    }

    /// <summary>Field number for the "MsgCount" field.</summary>
    public const int MsgCountFieldNumber = 3;
    private uint msgCount_;
    /// <summary>
    /// 消息数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MsgCount {
      get { return msgCount_; }
      set {
        msgCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCacheDataAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCacheDataAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (FrameCount != other.FrameCount) return false;
      if (MsgCount != other.MsgCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (FrameCount != 0) hash ^= FrameCount.GetHashCode();
      if (MsgCount != 0) hash ^= MsgCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      if (FrameCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameCount);
      }
      if (MsgCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MsgCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (FrameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameCount);
      }
      if (MsgCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MsgCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCacheDataAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.FrameCount != 0) {
        FrameCount = other.FrameCount;
      }
      if (other.MsgCount != 0) {
        MsgCount = other.MsgCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 16: {
            FrameCount = input.ReadUInt32();
            break;
          }
          case 24: {
            MsgCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
