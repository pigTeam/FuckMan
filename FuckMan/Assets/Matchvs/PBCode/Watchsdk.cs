// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: watchsdk.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Matchvs {

  /// <summary>Holder for reflection information generated from watchsdk.proto</summary>
  public static partial class WatchsdkReflection {

    #region Descriptor
    /// <summary>File descriptor for watchsdk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WatchsdkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg53YXRjaHNkay5wcm90bxIGc3RyZWFtGgxjb21tb24ucHJvdG8ihwEKDUVu",
            "dGVyTGl2ZVJvb20SDgoGZ2FtZUlEGAEgASgNEhIKBnJvb21JRBgCIAEoBEIC",
            "MAESDgoGdXNlcklEGAMgASgNEhMKC3VzZXJQcm9maWxlGAQgASgMEg4KBmJv",
            "b2tJRBgFIAEoCRIOCgZ0aWNrZXQYBiABKAkSDQoFc2V0SUQYByABKA0icwoQ",
            "RW50ZXJMaXZlUm9vbUFjaxIOCgZzdGF0dXMYASABKA0SEgoKcm9vbVN0YXR1",
            "cxgCIAEoDRIQCghyZXNlcnZlZBgDIAEoCRIpCgp3YXRoY2hJbmZvGAQgASgL",
            "MhUuc3RyZWFtLkxpdmVXYXRjaEluZm8iQwoNTGl2ZUhlYXJ0YmVhdBIOCgZn",
            "YW1lSUQYASABKA0SEgoGcm9vbUlEGAIgASgEQgIwARIOCgZ1c2VySUQYAyAB",
            "KA0iIgoQTGl2ZUhlYXJ0YmVhdEFjaxIOCgZzdGF0dXMYASABKA0iUwoNTGl2",
            "ZUJyb2FkY2FzdBISCgZyb29tSUQYASABKARCAjABEgwKBGZsYWcYAiABKA0S",
            "DwoHZHN0VWlkcxgDIAMoDRIPCgdjcFByb3RvGAQgASgMIiIKEExpdmVCcm9h",
            "ZGNhc3RBY2sSDgoGc3RhdHVzGAEgASgNIlUKDVNldExpdmVPZmZzZXQSDgoG",
            "Z2FtZUlEGAEgASgNEhIKBnJvb21JRBgCIAEoBEICMAESDgoGdXNlcklEGAMg",
            "ASgNEhAKCG9mZnNldE1TGAQgASgFIiIKEFNldExpdmVPZmZzZXRBY2sSDgoG",
            "c3RhdHVzGAEgASgNIjoKE0VudGVyTGl2ZVJvb21Ob3RpZnkSDgoGdXNlcklE",
            "GAEgASgNEhMKC3VzZXJQcm9maWxlGAIgASgMIjkKEkV4aXRMaXZlUm9vbU5v",
            "dGlmeRIOCgZ1c2VySUQYASABKA0SEwoLdXNlclByb2ZpbGUYAiABKAwiSAoT",
            "TGl2ZUJyb2FkY2FzdE5vdGlmeRIOCgZzcmNVaWQYASABKA0SEAoIcHJpb3Jp",
            "dHkYAiABKA0SDwoHY3BQcm90bxgDIAEoDCI0Cg5MaXZlT3Zlck5vdGlmeRIO",
            "CgZnYW1lSUQYASABKA0SEgoGcm9vbUlEGAIgASgEQgIwASJtChNMaXZlRnJh",
            "bWVEYXRhTm90aWZ5Eg4KBnNyY1VpZBgBIAEoDRIQCghwcmlvcml0eRgCIAEo",
            "DRIPCgdjcFByb3RvGAMgASgMEhEKCXRpbWVTdGFtcBgEIAEoBBIQCghmcmFt",
            "ZUlkeBgFIAEoDSJ8ChNMaXZlRnJhbWVTeW5jTm90aWZ5EhAKCHByaW9yaXR5",
            "GAEgASgNEg8KB2xhc3RJZHgYAiABKA0SDwoHbmV4dElkeBgDIAEoDRIPCgdz",
            "dGFydFRTGAQgASgEEg0KBWVuZFRTGAUgASgEEhEKCXRpbWVTdGFtcBgGIAEo",
            "BCqsAwoNU0RLV2F0Y2hDbWRJRBITCg9JblZhbGlkV2F0Y2hDbWQQABIXChJF",
            "bnRlckxpdmVSb29tQ01ESUQQyRoSGgoVRW50ZXJMaXZlUm9vbUFja0NNRElE",
            "EMoaEhcKEkxpdmVIZWFydGJlYXRDTURJRBDLGhIaChVMaXZlSGVhcnRiZWF0",
            "QWNrQ01ESUQQzBoSFwoSTGl2ZUJyb2FkY2FzdENNRElEEM0aEhoKFUxpdmVC",
            "cm9hZGNhc3RBY2tDTURJRBDOGhIXChJTZXRMaXZlT2Zmc2V0Q01ESUQQzxoS",
            "GgoVU2V0TGl2ZU9mZnNldEFja0NNRElEENAaEh0KGEVudGVyTGl2ZVJvb21O",
            "b3RpZnlDTURJRBDcGhIcChdFeGl0TGl2ZVJvb21Ob3RpZnlDTURJRBDeGhId",
            "ChhMaXZlQnJvYWRjYXN0Tm90aWZ5Q01ESUQQ4BoSGAoTTGl2ZU92ZXJOb3Rp",
            "ZnlDTURJRBDiGhIdChhMaXZlRnJhbWVEYXRhTm90aWZ5Q01ESUQQ5BoSHQoY",
            "TGl2ZUZyYW1lU3luY05vdGlmeUNNRElEEOYaQgqqAgdNYXRjaHZzYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Matchvs.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Matchvs.SDKWatchCmdID), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.EnterLiveRoom), global::Matchvs.EnterLiveRoom.Parser, new[]{ "GameID", "RoomID", "UserID", "UserProfile", "BookID", "Ticket", "SetID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.EnterLiveRoomAck), global::Matchvs.EnterLiveRoomAck.Parser, new[]{ "Status", "RoomStatus", "Reserved", "WathchInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LiveHeartbeat), global::Matchvs.LiveHeartbeat.Parser, new[]{ "GameID", "RoomID", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LiveHeartbeatAck), global::Matchvs.LiveHeartbeatAck.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LiveBroadcast), global::Matchvs.LiveBroadcast.Parser, new[]{ "RoomID", "Flag", "DstUids", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LiveBroadcastAck), global::Matchvs.LiveBroadcastAck.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetLiveOffset), global::Matchvs.SetLiveOffset.Parser, new[]{ "GameID", "RoomID", "UserID", "OffsetMS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.SetLiveOffsetAck), global::Matchvs.SetLiveOffsetAck.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.EnterLiveRoomNotify), global::Matchvs.EnterLiveRoomNotify.Parser, new[]{ "UserID", "UserProfile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.ExitLiveRoomNotify), global::Matchvs.ExitLiveRoomNotify.Parser, new[]{ "UserID", "UserProfile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LiveBroadcastNotify), global::Matchvs.LiveBroadcastNotify.Parser, new[]{ "SrcUid", "Priority", "CpProto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LiveOverNotify), global::Matchvs.LiveOverNotify.Parser, new[]{ "GameID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LiveFrameDataNotify), global::Matchvs.LiveFrameDataNotify.Parser, new[]{ "SrcUid", "Priority", "CpProto", "TimeStamp", "FrameIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Matchvs.LiveFrameSyncNotify), global::Matchvs.LiveFrameSyncNotify.Parser, new[]{ "Priority", "LastIdx", "NextIdx", "StartTS", "EndTS", "TimeStamp" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum SDKWatchCmdID {
    [pbr::OriginalName("InValidWatchCmd")] InValidWatchCmd = 0,
    [pbr::OriginalName("EnterLiveRoomCMDID")] EnterLiveRoomCmdid = 3401,
    [pbr::OriginalName("EnterLiveRoomAckCMDID")] EnterLiveRoomAckCmdid = 3402,
    [pbr::OriginalName("LiveHeartbeatCMDID")] LiveHeartbeatCmdid = 3403,
    [pbr::OriginalName("LiveHeartbeatAckCMDID")] LiveHeartbeatAckCmdid = 3404,
    [pbr::OriginalName("LiveBroadcastCMDID")] LiveBroadcastCmdid = 3405,
    [pbr::OriginalName("LiveBroadcastAckCMDID")] LiveBroadcastAckCmdid = 3406,
    [pbr::OriginalName("SetLiveOffsetCMDID")] SetLiveOffsetCmdid = 3407,
    [pbr::OriginalName("SetLiveOffsetAckCMDID")] SetLiveOffsetAckCmdid = 3408,
    [pbr::OriginalName("EnterLiveRoomNotifyCMDID")] EnterLiveRoomNotifyCmdid = 3420,
    [pbr::OriginalName("ExitLiveRoomNotifyCMDID")] ExitLiveRoomNotifyCmdid = 3422,
    [pbr::OriginalName("LiveBroadcastNotifyCMDID")] LiveBroadcastNotifyCmdid = 3424,
    [pbr::OriginalName("LiveOverNotifyCMDID")] LiveOverNotifyCmdid = 3426,
    [pbr::OriginalName("LiveFrameDataNotifyCMDID")] LiveFrameDataNotifyCmdid = 3428,
    [pbr::OriginalName("LiveFrameSyncNotifyCMDID")] LiveFrameSyncNotifyCmdid = 3430,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 1 enter
  /// </summary>
  public sealed partial class EnterLiveRoom : pb::IMessage<EnterLiveRoom> {
    private static readonly pb::MessageParser<EnterLiveRoom> _parser = new pb::MessageParser<EnterLiveRoom>(() => new EnterLiveRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterLiveRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLiveRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLiveRoom(EnterLiveRoom other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      userID_ = other.userID_;
      userProfile_ = other.userProfile_;
      bookID_ = other.bookID_;
      ticket_ = other.ticket_;
      setID_ = other.setID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLiveRoom Clone() {
      return new EnterLiveRoom(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userProfile" field.</summary>
    public const int UserProfileFieldNumber = 4;
    private pb::ByteString userProfile_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bookID" field.</summary>
    public const int BookIDFieldNumber = 5;
    private string bookID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BookID {
      get { return bookID_; }
      set {
        bookID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 6;
    private string ticket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "setID" field.</summary>
    public const int SetIDFieldNumber = 7;
    private uint setID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SetID {
      get { return setID_; }
      set {
        setID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterLiveRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterLiveRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      if (UserProfile != other.UserProfile) return false;
      if (BookID != other.BookID) return false;
      if (Ticket != other.Ticket) return false;
      if (SetID != other.SetID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      if (BookID.Length != 0) hash ^= BookID.GetHashCode();
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (SetID != 0) hash ^= SetID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(UserProfile);
      }
      if (BookID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BookID);
      }
      if (Ticket.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Ticket);
      }
      if (SetID != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SetID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
      }
      if (BookID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BookID);
      }
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (SetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterLiveRoom other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
      if (other.BookID.Length != 0) {
        BookID = other.BookID;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      if (other.SetID != 0) {
        SetID = other.SetID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 34: {
            UserProfile = input.ReadBytes();
            break;
          }
          case 42: {
            BookID = input.ReadString();
            break;
          }
          case 50: {
            Ticket = input.ReadString();
            break;
          }
          case 56: {
            SetID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterLiveRoomAck : pb::IMessage<EnterLiveRoomAck> {
    private static readonly pb::MessageParser<EnterLiveRoomAck> _parser = new pb::MessageParser<EnterLiveRoomAck>(() => new EnterLiveRoomAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterLiveRoomAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLiveRoomAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLiveRoomAck(EnterLiveRoomAck other) : this() {
      status_ = other.status_;
      roomStatus_ = other.roomStatus_;
      reserved_ = other.reserved_;
      WathchInfo = other.wathchInfo_ != null ? other.WathchInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLiveRoomAck Clone() {
      return new EnterLiveRoomAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomStatus" field.</summary>
    public const int RoomStatusFieldNumber = 2;
    private uint roomStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomStatus {
      get { return roomStatus_; }
      set {
        roomStatus_ = value;
      }
    }

    /// <summary>Field number for the "reserved" field.</summary>
    public const int ReservedFieldNumber = 3;
    private string reserved_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reserved {
      get { return reserved_; }
      set {
        reserved_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wathchInfo" field.</summary>
    public const int WathchInfoFieldNumber = 4;
    private global::Matchvs.LiveWatchInfo wathchInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Matchvs.LiveWatchInfo WathchInfo {
      get { return wathchInfo_; }
      set {
        wathchInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterLiveRoomAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterLiveRoomAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (RoomStatus != other.RoomStatus) return false;
      if (Reserved != other.Reserved) return false;
      if (!object.Equals(WathchInfo, other.WathchInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RoomStatus != 0) hash ^= RoomStatus.GetHashCode();
      if (Reserved.Length != 0) hash ^= Reserved.GetHashCode();
      if (wathchInfo_ != null) hash ^= WathchInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      if (RoomStatus != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomStatus);
      }
      if (Reserved.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reserved);
      }
      if (wathchInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WathchInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (RoomStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomStatus);
      }
      if (Reserved.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reserved);
      }
      if (wathchInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WathchInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterLiveRoomAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RoomStatus != 0) {
        RoomStatus = other.RoomStatus;
      }
      if (other.Reserved.Length != 0) {
        Reserved = other.Reserved;
      }
      if (other.wathchInfo_ != null) {
        if (wathchInfo_ == null) {
          wathchInfo_ = new global::Matchvs.LiveWatchInfo();
        }
        WathchInfo.MergeFrom(other.WathchInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomStatus = input.ReadUInt32();
            break;
          }
          case 26: {
            Reserved = input.ReadString();
            break;
          }
          case 34: {
            if (wathchInfo_ == null) {
              wathchInfo_ = new global::Matchvs.LiveWatchInfo();
            }
            input.ReadMessage(wathchInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiveHeartbeat : pb::IMessage<LiveHeartbeat> {
    private static readonly pb::MessageParser<LiveHeartbeat> _parser = new pb::MessageParser<LiveHeartbeat>(() => new LiveHeartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiveHeartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveHeartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveHeartbeat(LiveHeartbeat other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveHeartbeat Clone() {
      return new LiveHeartbeat(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiveHeartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiveHeartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiveHeartbeat other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiveHeartbeatAck : pb::IMessage<LiveHeartbeatAck> {
    private static readonly pb::MessageParser<LiveHeartbeatAck> _parser = new pb::MessageParser<LiveHeartbeatAck>(() => new LiveHeartbeatAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiveHeartbeatAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveHeartbeatAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveHeartbeatAck(LiveHeartbeatAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveHeartbeatAck Clone() {
      return new LiveHeartbeatAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiveHeartbeatAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiveHeartbeatAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiveHeartbeatAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiveBroadcast : pb::IMessage<LiveBroadcast> {
    private static readonly pb::MessageParser<LiveBroadcast> _parser = new pb::MessageParser<LiveBroadcast>(() => new LiveBroadcast());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiveBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveBroadcast(LiveBroadcast other) : this() {
      roomID_ = other.roomID_;
      flag_ = other.flag_;
      dstUids_ = other.dstUids_.Clone();
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveBroadcast Clone() {
      return new LiveBroadcast(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private uint flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "dstUids" field.</summary>
    public const int DstUidsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_dstUids_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> dstUids_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DstUids {
      get { return dstUids_; }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 4;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiveBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiveBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (Flag != other.Flag) return false;
      if(!dstUids_.Equals(other.dstUids_)) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      hash ^= dstUids_.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoomID);
      }
      if (Flag != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Flag);
      }
      dstUids_.WriteTo(output, _repeated_dstUids_codec);
      if (CpProto.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      size += dstUids_.CalculateSize(_repeated_dstUids_codec);
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiveBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      dstUids_.Add(other.dstUids_);
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 16: {
            Flag = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            dstUids_.AddEntriesFrom(input, _repeated_dstUids_codec);
            break;
          }
          case 34: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiveBroadcastAck : pb::IMessage<LiveBroadcastAck> {
    private static readonly pb::MessageParser<LiveBroadcastAck> _parser = new pb::MessageParser<LiveBroadcastAck>(() => new LiveBroadcastAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiveBroadcastAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveBroadcastAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveBroadcastAck(LiveBroadcastAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveBroadcastAck Clone() {
      return new LiveBroadcastAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiveBroadcastAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiveBroadcastAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiveBroadcastAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetLiveOffset : pb::IMessage<SetLiveOffset> {
    private static readonly pb::MessageParser<SetLiveOffset> _parser = new pb::MessageParser<SetLiveOffset>(() => new SetLiveOffset());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetLiveOffset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiveOffset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiveOffset(SetLiveOffset other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
      userID_ = other.userID_;
      offsetMS_ = other.offsetMS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiveOffset Clone() {
      return new SetLiveOffset(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "offsetMS" field.</summary>
    public const int OffsetMSFieldNumber = 4;
    private int offsetMS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffsetMS {
      get { return offsetMS_; }
      set {
        offsetMS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetLiveOffset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetLiveOffset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      if (OffsetMS != other.OffsetMS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (OffsetMS != 0) hash ^= OffsetMS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
      if (OffsetMS != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OffsetMS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (OffsetMS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffsetMS);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetLiveOffset other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.OffsetMS != 0) {
        OffsetMS = other.OffsetMS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
          case 32: {
            OffsetMS = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetLiveOffsetAck : pb::IMessage<SetLiveOffsetAck> {
    private static readonly pb::MessageParser<SetLiveOffsetAck> _parser = new pb::MessageParser<SetLiveOffsetAck>(() => new SetLiveOffsetAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetLiveOffsetAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiveOffsetAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiveOffsetAck(SetLiveOffsetAck other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiveOffsetAck Clone() {
      return new SetLiveOffsetAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetLiveOffsetAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetLiveOffsetAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetLiveOffsetAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterLiveRoomNotify : pb::IMessage<EnterLiveRoomNotify> {
    private static readonly pb::MessageParser<EnterLiveRoomNotify> _parser = new pb::MessageParser<EnterLiveRoomNotify>(() => new EnterLiveRoomNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterLiveRoomNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLiveRoomNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLiveRoomNotify(EnterLiveRoomNotify other) : this() {
      userID_ = other.userID_;
      userProfile_ = other.userProfile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterLiveRoomNotify Clone() {
      return new EnterLiveRoomNotify(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userProfile" field.</summary>
    public const int UserProfileFieldNumber = 2;
    private pb::ByteString userProfile_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterLiveRoomNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterLiveRoomNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (UserProfile != other.UserProfile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(UserProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterLiveRoomNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 18: {
            UserProfile = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExitLiveRoomNotify : pb::IMessage<ExitLiveRoomNotify> {
    private static readonly pb::MessageParser<ExitLiveRoomNotify> _parser = new pb::MessageParser<ExitLiveRoomNotify>(() => new ExitLiveRoomNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExitLiveRoomNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitLiveRoomNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitLiveRoomNotify(ExitLiveRoomNotify other) : this() {
      userID_ = other.userID_;
      userProfile_ = other.userProfile_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitLiveRoomNotify Clone() {
      return new ExitLiveRoomNotify(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "userProfile" field.</summary>
    public const int UserProfileFieldNumber = 2;
    private pb::ByteString userProfile_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExitLiveRoomNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExitLiveRoomNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (UserProfile != other.UserProfile) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(UserProfile);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExitLiveRoomNotify other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 18: {
            UserProfile = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiveBroadcastNotify : pb::IMessage<LiveBroadcastNotify> {
    private static readonly pb::MessageParser<LiveBroadcastNotify> _parser = new pb::MessageParser<LiveBroadcastNotify>(() => new LiveBroadcastNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiveBroadcastNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveBroadcastNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveBroadcastNotify(LiveBroadcastNotify other) : this() {
      srcUid_ = other.srcUid_;
      priority_ = other.priority_;
      cpProto_ = other.cpProto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveBroadcastNotify Clone() {
      return new LiveBroadcastNotify(this);
    }

    /// <summary>Field number for the "srcUid" field.</summary>
    public const int SrcUidFieldNumber = 1;
    private uint srcUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUid {
      get { return srcUid_; }
      set {
        srcUid_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiveBroadcastNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiveBroadcastNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcUid != other.SrcUid) return false;
      if (Priority != other.Priority) return false;
      if (CpProto != other.CpProto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcUid != 0) hash ^= SrcUid.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SrcUid);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUid);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiveBroadcastNotify other) {
      if (other == null) {
        return;
      }
      if (other.SrcUid != 0) {
        SrcUid = other.SrcUid;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcUid = input.ReadUInt32();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiveOverNotify : pb::IMessage<LiveOverNotify> {
    private static readonly pb::MessageParser<LiveOverNotify> _parser = new pb::MessageParser<LiveOverNotify>(() => new LiveOverNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiveOverNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveOverNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveOverNotify(LiveOverNotify other) : this() {
      gameID_ = other.gameID_;
      roomID_ = other.roomID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveOverNotify Clone() {
      return new LiveOverNotify(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private ulong roomID_;
    /// <summary>
    /// todo...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiveOverNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiveOverNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (RoomID != other.RoomID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GameID);
      }
      if (RoomID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoomID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (RoomID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiveOverNotify other) {
      if (other == null) {
        return;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.RoomID != 0UL) {
        RoomID = other.RoomID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameID = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiveFrameDataNotify : pb::IMessage<LiveFrameDataNotify> {
    private static readonly pb::MessageParser<LiveFrameDataNotify> _parser = new pb::MessageParser<LiveFrameDataNotify>(() => new LiveFrameDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiveFrameDataNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveFrameDataNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveFrameDataNotify(LiveFrameDataNotify other) : this() {
      srcUid_ = other.srcUid_;
      priority_ = other.priority_;
      cpProto_ = other.cpProto_;
      timeStamp_ = other.timeStamp_;
      frameIdx_ = other.frameIdx_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveFrameDataNotify Clone() {
      return new LiveFrameDataNotify(this);
    }

    /// <summary>Field number for the "srcUid" field.</summary>
    public const int SrcUidFieldNumber = 1;
    private uint srcUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcUid {
      get { return srcUid_; }
      set {
        srcUid_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "cpProto" field.</summary>
    public const int CpProtoFieldNumber = 3;
    private pb::ByteString cpProto_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CpProto {
      get { return cpProto_; }
      set {
        cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 4;
    private ulong timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "frameIdx" field.</summary>
    public const int FrameIdxFieldNumber = 5;
    private uint frameIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameIdx {
      get { return frameIdx_; }
      set {
        frameIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiveFrameDataNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiveFrameDataNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcUid != other.SrcUid) return false;
      if (Priority != other.Priority) return false;
      if (CpProto != other.CpProto) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (FrameIdx != other.FrameIdx) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcUid != 0) hash ^= SrcUid.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (FrameIdx != 0) hash ^= FrameIdx.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcUid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SrcUid);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Priority);
      }
      if (CpProto.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(CpProto);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TimeStamp);
      }
      if (FrameIdx != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FrameIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUid);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (CpProto.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (FrameIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiveFrameDataNotify other) {
      if (other == null) {
        return;
      }
      if (other.SrcUid != 0) {
        SrcUid = other.SrcUid;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.CpProto.Length != 0) {
        CpProto = other.CpProto;
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.FrameIdx != 0) {
        FrameIdx = other.FrameIdx;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SrcUid = input.ReadUInt32();
            break;
          }
          case 16: {
            Priority = input.ReadUInt32();
            break;
          }
          case 26: {
            CpProto = input.ReadBytes();
            break;
          }
          case 32: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 40: {
            FrameIdx = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LiveFrameSyncNotify : pb::IMessage<LiveFrameSyncNotify> {
    private static readonly pb::MessageParser<LiveFrameSyncNotify> _parser = new pb::MessageParser<LiveFrameSyncNotify>(() => new LiveFrameSyncNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LiveFrameSyncNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Matchvs.WatchsdkReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveFrameSyncNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveFrameSyncNotify(LiveFrameSyncNotify other) : this() {
      priority_ = other.priority_;
      lastIdx_ = other.lastIdx_;
      nextIdx_ = other.nextIdx_;
      startTS_ = other.startTS_;
      endTS_ = other.endTS_;
      timeStamp_ = other.timeStamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LiveFrameSyncNotify Clone() {
      return new LiveFrameSyncNotify(this);
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 1;
    private uint priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "lastIdx" field.</summary>
    public const int LastIdxFieldNumber = 2;
    private uint lastIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastIdx {
      get { return lastIdx_; }
      set {
        lastIdx_ = value;
      }
    }

    /// <summary>Field number for the "nextIdx" field.</summary>
    public const int NextIdxFieldNumber = 3;
    private uint nextIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextIdx {
      get { return nextIdx_; }
      set {
        nextIdx_ = value;
      }
    }

    /// <summary>Field number for the "startTS" field.</summary>
    public const int StartTSFieldNumber = 4;
    private ulong startTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTS {
      get { return startTS_; }
      set {
        startTS_ = value;
      }
    }

    /// <summary>Field number for the "endTS" field.</summary>
    public const int EndTSFieldNumber = 5;
    private ulong endTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTS {
      get { return endTS_; }
      set {
        endTS_ = value;
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private ulong timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LiveFrameSyncNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LiveFrameSyncNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Priority != other.Priority) return false;
      if (LastIdx != other.LastIdx) return false;
      if (NextIdx != other.NextIdx) return false;
      if (StartTS != other.StartTS) return false;
      if (EndTS != other.EndTS) return false;
      if (TimeStamp != other.TimeStamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (LastIdx != 0) hash ^= LastIdx.GetHashCode();
      if (NextIdx != 0) hash ^= NextIdx.GetHashCode();
      if (StartTS != 0UL) hash ^= StartTS.GetHashCode();
      if (EndTS != 0UL) hash ^= EndTS.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Priority != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Priority);
      }
      if (LastIdx != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastIdx);
      }
      if (NextIdx != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NextIdx);
      }
      if (StartTS != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(StartTS);
      }
      if (EndTS != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(EndTS);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TimeStamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (LastIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastIdx);
      }
      if (NextIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextIdx);
      }
      if (StartTS != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTS);
      }
      if (EndTS != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTS);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LiveFrameSyncNotify other) {
      if (other == null) {
        return;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.LastIdx != 0) {
        LastIdx = other.LastIdx;
      }
      if (other.NextIdx != 0) {
        NextIdx = other.NextIdx;
      }
      if (other.StartTS != 0UL) {
        StartTS = other.StartTS;
      }
      if (other.EndTS != 0UL) {
        EndTS = other.EndTS;
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Priority = input.ReadUInt32();
            break;
          }
          case 16: {
            LastIdx = input.ReadUInt32();
            break;
          }
          case 24: {
            NextIdx = input.ReadUInt32();
            break;
          }
          case 32: {
            StartTS = input.ReadUInt64();
            break;
          }
          case 40: {
            EndTS = input.ReadUInt64();
            break;
          }
          case 48: {
            TimeStamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
