// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsmvs.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gsmvs.proto</summary>
public static partial class GsmvsReflection {

  #region Descriptor
  /// <summary>File descriptor for gsmvs.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GsmvsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgtnc212cy5wcm90bxoPZXJyb3Jjb2RlLnByb3RvGgxjb21tb24ucHJvdG8i",
          "TgoLSm9pbk92ZXJSZXESDgoGcm9vbUlEGAEgASgEEg4KBmdhbWVJRBgCIAEo",
          "DRIPCgdjcFByb3RvGAMgASgMEg4KBnVzZXJJRBgEIAEoDSI6CgtKb2luT3Zl",
          "clJzcBIaCgZzdGF0dXMYASABKA4yCi5FcnJvckNvZGUSDwoHY3BQcm90bxgC",
          "IAEoDCJOCgtKb2luT3BlblJlcRIOCgZyb29tSUQYASABKAQSDgoGZ2FtZUlE",
          "GAIgASgNEg4KBnVzZXJJRBgDIAEoDRIPCgdjcFByb3RvGAQgASgMIjoKC0pv",
          "aW5PcGVuUnNwEhoKBnN0YXR1cxgBIAEoDjIKLkVycm9yQ29kZRIPCgdjcFBy",
          "b3RvGAIgASgMIlAKCktpY2tQbGF5ZXISDgoGcm9vbUlEGAEgASgEEhEKCXNy",
          "Y1VzZXJJRBgCIAEoDRIOCgZ1c2VySUQYAyABKA0SDwoHY3BQcm90bxgEIAEo",
          "DCJLCg1LaWNrUGxheWVyUnNwEhoKBnN0YXR1cxgBIAEoDjIKLkVycm9yQ29k",
          "ZRIOCgZ1c2VySUQYAiABKA0SDgoGcm9vbUlEGAMgASgEIkoKB1JlcXVlc3QS",
          "DgoGdXNlcklEGAEgASgNEg4KBmdhbWVJRBgCIAEoDRIOCgZyb29tSUQYAyAB",
          "KAQSDwoHY3BQcm90bxgEIAEoDCJzCgVSZXBseRIOCgZ1c2VySUQYASABKA0S",
          "DgoGZ2FtZUlEGAIgASgNEg4KBnJvb21JRBgDIAEoBBIPCgdjcFByb3RvGAQg",
          "ASgMEhkKBWVycm5vGAUgASgOMgouRXJyb3JDb2RlEg4KBmVyck1zZxgGIAEo",
          "CSJZCgdQdXNoTXNnEg4KBnVzZXJJRBgBIAEoDRIOCgZnYW1lSUQYAiABKA0S",
          "DgoGcm9vbUlEGAMgASgEEg0KBXVzZXJzGAQgAygNEg8KB2NwUHJvdG8YBSAB",
          "KAwiTAoQR2V0Um9vbURldGFpbFJlcRIOCgZnYW1lSUQYASABKA0SDgoGcm9v",
          "bUlEGAIgASgEEhgKEGxhdGVzdFdhdGNoZXJOdW0YAyABKA0iTwoQR2V0Um9v",
          "bURldGFpbFJzcBIaCgZzdGF0dXMYASABKA4yCi5FcnJvckNvZGUSHwoKcm9v",
          "bURldGFpbBgCIAEoCzILLlJvb21EZXRhaWwi+AEKClJvb21EZXRhaWwSDgoG",
          "cm9vbUlEGAEgASgEEg0KBXN0YXRlGAIgASgNEhEKCW1heFBsYXllchgDIAEo",
          "DRIMCgRtb2RlGAQgASgFEhAKCGNhbldhdGNoGAUgASgFEhQKDHJvb21Qcm9w",
          "ZXJ0eRgGIAEoDBINCgVvd25lchgHIAEoDRISCgpjcmVhdGVGbGFnGAggASgN",
          "EiAKC3BsYXllckluZm9zGAkgAygLMgsuUGxheWVySW5mbxIdCgl3YXRjaFJv",
          "b20YCiABKAsyCi5XYXRjaFJvb20SHgoIYnJpZ2FkZXMYCyADKAsyDC5Ccmln",
          "YWRlSW5mbyIxCgpQbGF5ZXJJbmZvEg4KBnVzZXJJRBgBIAEoDRITCgt1c2Vy",
          "UHJvZmlsZRgCIAEoDCLEAQoNQ3JlYXRlRXh0SW5mbxIOCgZ1c2VySUQYASAB",
          "KA0SEwoLdXNlclByb2ZpbGUYAiABKAwSDgoGcm9vbUlEGAMgASgEEg0KBXN0",
          "YXRlGAQgASgNEhEKCW1heFBsYXllchgFIAEoDRIMCgRtb2RlGAYgASgFEhAK",
          "CGNhbldhdGNoGAcgASgFEhQKDHJvb21Qcm9wZXJ0eRgIIAEoDBISCgpjcmVh",
          "dGVGbGFnGAkgASgNEhIKCkNyZWF0ZVRpbWUYCiABKAQiVAoLSm9pbkV4dElu",
          "Zm8SDgoGdXNlcklEGAEgASgNEhMKC3VzZXJQcm9maWxlGAIgASgMEg4KBnJv",
          "b21JRBgDIAEoBBIQCghKb2luVHlwZRgEIAEoDSJaChJTZXRSb29tUHJvcGVy",
          "dHlSZXESDgoGZ2FtZUlEGAEgASgNEg4KBnJvb21JRBgCIAEoBBIOCgZ1c2Vy",
          "SUQYAyABKA0SFAoMcm9vbVByb3BlcnR5GAQgASgMImYKElNldFJvb21Qcm9w",
          "ZXJ0eVJzcBIaCgZzdGF0dXMYASABKA4yCi5FcnJvckNvZGUSDgoGcm9vbUlE",
          "GAIgASgEEg4KBnVzZXJJRBgDIAEoDRIUCgxyb29tUHJvcGVydHkYBCABKAwi",
          "ZQoJV2F0Y2hJbmZvEhIKBnJvb21JRBgBIAEoBEICMAESDQoFc3RhdGUYAiAB",
          "KA0SIwoMd2F0Y2hTZXR0aW5nGAMgASgLMg0uV2F0Y2hTZXR0aW5nEhAKCGN1",
          "cldhdGNoGAQgASgNIk0KCVdhdGNoUm9vbRIdCgl3YXRjaEluZm8YASABKAsy",
          "Ci5XYXRjaEluZm8SIQoMd2F0Y2hQbGF5ZXJzGAIgAygLMgsuUGxheWVySW5m",
          "byJzCghUZWFtSW5mbxISCgZ0ZWFtSUQYASABKARCAjABEhAKCHBhc3N3b3Jk",
          "GAIgASgJEhAKCGNhcGFjaXR5GAMgASgNEgwKBG1vZGUYBCABKAUSEgoKdmlz",
          "aWJpbGl0eRgFIAEoBRINCgVvd25lchgGIAEoDSJGCgpUZWFtRGV0YWlsEhsK",
          "CHRlYW1JbmZvGAEgASgLMgkuVGVhbUluZm8SGwoGcGxheWVyGAIgAygLMgsu",
          "UGxheWVySW5mbyI8CgtCcmlnYWRlSW5mbxIRCglicmlnYWRlSUQYASABKA0S",
          "GgoFdGVhbXMYAiADKAsyCy5UZWFtRGV0YWlsKtsDCgpNdnNHc0NtZElEEg4K",
          "Ck12c0NtZE5vbmUQABITCg5NdnNKb2luUm9vbVJlcRCxCRITCg5NdnNKb2lu",
          "Um9vbVJzcBCyCRIVChBNdnNDcmVhdGVSb29tUmVxELMJEhUKEE12c0NyZWF0",
          "ZVJvb21Sc3AQtAkSFAoPTXZzTGVhdmVSb29tUmVxELUJEhQKD012c0xlYXZl",
          "Um9vbVJzcBC2CRIYChNNdnNHZXRSb29tRGV0YWlsUmVxELkJEhgKE012c0dl",
          "dFJvb21EZXRhaWxSc3AQugkSGQoUTXZzR2V0Um9vbURldGFpbFB1c2gQuwkS",
          "EwoOTXZzSm9pbk92ZXJSZXEQvQkSEwoOTXZzSm9pbk92ZXJSc3AQvgkSGgoV",
          "TXZzU2V0Um9vbVByb3BlcnR5UmVxEMMJEhoKFU12c1NldFJvb21Qcm9wZXJ0",
          "eVJzcBDECRITCg5NdnNKb2luT3BlblJlcRDFCRITCg5NdnNKb2luT3BlblJz",
          "cBDGCRIVChBNdnNLaWNrUGxheWVyUmVxEJcKEhUKEE12c0tpY2tQbGF5ZXJS",
          "c3AQmAoSFwoSTXZzTmV0d29ya1N0YXRlUmVxEOAIEhcKEk12c05ldHdvcmtT",
          "dGF0ZVJzcBDhCCpFCglSb29tU3RhdGUSEAoMUm9vbVN0YXRlTmlsEAASEQoN",
          "Um9vbVN0YXRlT3BlbhABEhMKD1Jvb21TdGF0ZUNsb3NlZBACYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::ErrorcodeReflection.Descriptor, global::CommonReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MvsGsCmdID), typeof(global::RoomState), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinOverReq), global::JoinOverReq.Parser, new[]{ "RoomID", "GameID", "CpProto", "UserID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinOverRsp), global::JoinOverRsp.Parser, new[]{ "Status", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinOpenReq), global::JoinOpenReq.Parser, new[]{ "RoomID", "GameID", "UserID", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinOpenRsp), global::JoinOpenRsp.Parser, new[]{ "Status", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KickPlayer), global::KickPlayer.Parser, new[]{ "RoomID", "SrcUserID", "UserID", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KickPlayerRsp), global::KickPlayerRsp.Parser, new[]{ "Status", "UserID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Request), global::Request.Parser, new[]{ "UserID", "GameID", "RoomID", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Reply), global::Reply.Parser, new[]{ "UserID", "GameID", "RoomID", "CpProto", "Errno", "ErrMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PushMsg), global::PushMsg.Parser, new[]{ "UserID", "GameID", "RoomID", "Users", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetRoomDetailReq), global::GetRoomDetailReq.Parser, new[]{ "GameID", "RoomID", "LatestWatcherNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetRoomDetailRsp), global::GetRoomDetailRsp.Parser, new[]{ "Status", "RoomDetail" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomDetail), global::RoomDetail.Parser, new[]{ "RoomID", "State", "MaxPlayer", "Mode", "CanWatch", "RoomProperty", "Owner", "CreateFlag", "PlayerInfos", "WatchRoom", "Brigades" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInfo), global::PlayerInfo.Parser, new[]{ "UserID", "UserProfile" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateExtInfo), global::CreateExtInfo.Parser, new[]{ "UserID", "UserProfile", "RoomID", "State", "MaxPlayer", "Mode", "CanWatch", "RoomProperty", "CreateFlag", "CreateTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinExtInfo), global::JoinExtInfo.Parser, new[]{ "UserID", "UserProfile", "RoomID", "JoinType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetRoomPropertyReq), global::SetRoomPropertyReq.Parser, new[]{ "GameID", "RoomID", "UserID", "RoomProperty" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetRoomPropertyRsp), global::SetRoomPropertyRsp.Parser, new[]{ "Status", "RoomID", "UserID", "RoomProperty" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WatchInfo), global::WatchInfo.Parser, new[]{ "RoomID", "State", "WatchSetting", "CurWatch" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WatchRoom), global::WatchRoom.Parser, new[]{ "WatchInfo", "WatchPlayers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TeamInfo), global::TeamInfo.Parser, new[]{ "TeamID", "Password", "Capacity", "Mode", "Visibility", "Owner" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TeamDetail), global::TeamDetail.Parser, new[]{ "TeamInfo", "Player" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BrigadeInfo), global::BrigadeInfo.Parser, new[]{ "BrigadeID", "Teams" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum MvsGsCmdID {
  [pbr::OriginalName("MvsCmdNone")] MvsCmdNone = 0,
  [pbr::OriginalName("MvsJoinRoomReq")] MvsJoinRoomReq = 1201,
  [pbr::OriginalName("MvsJoinRoomRsp")] MvsJoinRoomRsp = 1202,
  [pbr::OriginalName("MvsCreateRoomReq")] MvsCreateRoomReq = 1203,
  [pbr::OriginalName("MvsCreateRoomRsp")] MvsCreateRoomRsp = 1204,
  [pbr::OriginalName("MvsLeaveRoomReq")] MvsLeaveRoomReq = 1205,
  [pbr::OriginalName("MvsLeaveRoomRsp")] MvsLeaveRoomRsp = 1206,
  /// <summary>
  ///gs 1209 push -> mvs  
  /// </summary>
  [pbr::OriginalName("MvsGetRoomDetailReq")] MvsGetRoomDetailReq = 1209,
  /// <summary>
  ///sdk 1209 -> mvs   mvs 1210 -> sdk
  /// </summary>
  [pbr::OriginalName("MvsGetRoomDetailRsp")] MvsGetRoomDetailRsp = 1210,
  /// <summary>
  ///mvs 1211 push -> gs
  /// </summary>
  [pbr::OriginalName("MvsGetRoomDetailPush")] MvsGetRoomDetailPush = 1211,
  [pbr::OriginalName("MvsJoinOverReq")] MvsJoinOverReq = 1213,
  [pbr::OriginalName("MvsJoinOverRsp")] MvsJoinOverRsp = 1214,
  [pbr::OriginalName("MvsSetRoomPropertyReq")] MvsSetRoomPropertyReq = 1219,
  [pbr::OriginalName("MvsSetRoomPropertyRsp")] MvsSetRoomPropertyRsp = 1220,
  [pbr::OriginalName("MvsJoinOpenReq")] MvsJoinOpenReq = 1221,
  [pbr::OriginalName("MvsJoinOpenRsp")] MvsJoinOpenRsp = 1222,
  [pbr::OriginalName("MvsKickPlayerReq")] MvsKickPlayerReq = 1303,
  [pbr::OriginalName("MvsKickPlayerRsp")] MvsKickPlayerRsp = 1304,
  [pbr::OriginalName("MvsNetworkStateReq")] MvsNetworkStateReq = 1120,
  [pbr::OriginalName("MvsNetworkStateRsp")] MvsNetworkStateRsp = 1121,
}

/// <summary>
///����״̬
/// </summary>
public enum RoomState {
  [pbr::OriginalName("RoomStateNil")] Nil = 0,
  [pbr::OriginalName("RoomStateOpen")] Open = 1,
  [pbr::OriginalName("RoomStateClosed")] Closed = 2,
}

#endregion

#region Messages
/// <summary>
///gs->mvs
/// </summary>
public sealed partial class JoinOverReq : pb::IMessage<JoinOverReq> {
  private static readonly pb::MessageParser<JoinOverReq> _parser = new pb::MessageParser<JoinOverReq>(() => new JoinOverReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JoinOverReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverReq(JoinOverReq other) : this() {
    roomID_ = other.roomID_;
    gameID_ = other.gameID_;
    cpProto_ = other.cpProto_;
    userID_ = other.userID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverReq Clone() {
    return new JoinOverReq(this);
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 3;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 4;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JoinOverReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JoinOverReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (GameID != other.GameID) return false;
    if (CpProto != other.CpProto) return false;
    if (UserID != other.UserID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoomID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(CpProto);
    }
    if (UserID != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(UserID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JoinOverReq other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 26: {
          CpProto = input.ReadBytes();
          break;
        }
        case 32: {
          UserID = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class JoinOverRsp : pb::IMessage<JoinOverRsp> {
  private static readonly pb::MessageParser<JoinOverRsp> _parser = new pb::MessageParser<JoinOverRsp>(() => new JoinOverRsp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JoinOverRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverRsp(JoinOverRsp other) : this() {
    status_ = other.status_;
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverRsp Clone() {
    return new JoinOverRsp(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ErrorCode status_ = 0;
  /// <summary>
  ///200.�ɹ�  403.����ر�  404.���䲻����  500.����������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 2;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JoinOverRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JoinOverRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JoinOverRsp other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 18: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class JoinOpenReq : pb::IMessage<JoinOpenReq> {
  private static readonly pb::MessageParser<JoinOpenReq> _parser = new pb::MessageParser<JoinOpenReq>(() => new JoinOpenReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JoinOpenReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOpenReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOpenReq(JoinOpenReq other) : this() {
    roomID_ = other.roomID_;
    gameID_ = other.gameID_;
    userID_ = other.userID_;
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOpenReq Clone() {
    return new JoinOpenReq(this);
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 3;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 4;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JoinOpenReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JoinOpenReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (GameID != other.GameID) return false;
    if (UserID != other.UserID) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoomID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (UserID != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(UserID);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JoinOpenReq other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 24: {
          UserID = input.ReadUInt32();
          break;
        }
        case 34: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class JoinOpenRsp : pb::IMessage<JoinOpenRsp> {
  private static readonly pb::MessageParser<JoinOpenRsp> _parser = new pb::MessageParser<JoinOpenRsp>(() => new JoinOpenRsp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JoinOpenRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOpenRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOpenRsp(JoinOpenRsp other) : this() {
    status_ = other.status_;
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOpenRsp Clone() {
    return new JoinOpenRsp(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ErrorCode status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 2;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JoinOpenRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JoinOpenRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JoinOpenRsp other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 18: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
///gs->mvs
/// </summary>
public sealed partial class KickPlayer : pb::IMessage<KickPlayer> {
  private static readonly pb::MessageParser<KickPlayer> _parser = new pb::MessageParser<KickPlayer>(() => new KickPlayer());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KickPlayer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayer(KickPlayer other) : this() {
    roomID_ = other.roomID_;
    srcUserID_ = other.srcUserID_;
    userID_ = other.userID_;
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayer Clone() {
    return new KickPlayer(this);
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private ulong roomID_;
  /// <summary>
  /// ����ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "srcUserID" field.</summary>
  public const int SrcUserIDFieldNumber = 2;
  private uint srcUserID_;
  /// <summary>
  /// ������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SrcUserID {
    get { return srcUserID_; }
    set {
      srcUserID_ = value;
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 3;
  private uint userID_;
  /// <summary>
  /// ������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 4;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  /// <summary>
  /// �ͻ����Զ�������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KickPlayer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KickPlayer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (SrcUserID != other.SrcUserID) return false;
    if (UserID != other.UserID) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (SrcUserID != 0) hash ^= SrcUserID.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoomID);
    }
    if (SrcUserID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(SrcUserID);
    }
    if (UserID != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(UserID);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (SrcUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUserID);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KickPlayer other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.SrcUserID != 0) {
      SrcUserID = other.SrcUserID;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 16: {
          SrcUserID = input.ReadUInt32();
          break;
        }
        case 24: {
          UserID = input.ReadUInt32();
          break;
        }
        case 34: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class KickPlayerRsp : pb::IMessage<KickPlayerRsp> {
  private static readonly pb::MessageParser<KickPlayerRsp> _parser = new pb::MessageParser<KickPlayerRsp>(() => new KickPlayerRsp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KickPlayerRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayerRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayerRsp(KickPlayerRsp other) : this() {
    status_ = other.status_;
    userID_ = other.userID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayerRsp Clone() {
    return new KickPlayerRsp(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ErrorCode status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 2;
  private uint userID_;
  /// <summary>
  /// ������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  /// <summary>
  /// ����ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KickPlayerRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KickPlayerRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (UserID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(UserID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KickPlayerRsp other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 16: {
          UserID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///mvs->gs
/// </summary>
public sealed partial class Request : pb::IMessage<Request> {
  private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request(Request other) : this() {
    userID_ = other.userID_;
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request Clone() {
    return new Request(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 4;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Request other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 34: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class Reply : pb::IMessage<Reply> {
  private static readonly pb::MessageParser<Reply> _parser = new pb::MessageParser<Reply>(() => new Reply());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Reply> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reply() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reply(Reply other) : this() {
    userID_ = other.userID_;
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    cpProto_ = other.cpProto_;
    errno_ = other.errno_;
    errMsg_ = other.errMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reply Clone() {
    return new Reply(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 4;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "errno" field.</summary>
  public const int ErrnoFieldNumber = 5;
  private global::ErrorCode errno_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Errno {
    get { return errno_; }
    set {
      errno_ = value;
    }
  }

  /// <summary>Field number for the "errMsg" field.</summary>
  public const int ErrMsgFieldNumber = 6;
  private string errMsg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Reply);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Reply other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if (CpProto != other.CpProto) return false;
    if (Errno != other.Errno) return false;
    if (ErrMsg != other.ErrMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    if (Errno != 0) hash ^= Errno.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(CpProto);
    }
    if (Errno != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Errno);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(ErrMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    if (Errno != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Errno);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Reply other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
    if (other.Errno != 0) {
      Errno = other.Errno;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 34: {
          CpProto = input.ReadBytes();
          break;
        }
        case 40: {
          errno_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 50: {
          ErrMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///gs->mvs
/// </summary>
public sealed partial class PushMsg : pb::IMessage<PushMsg> {
  private static readonly pb::MessageParser<PushMsg> _parser = new pb::MessageParser<PushMsg>(() => new PushMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PushMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushMsg(PushMsg other) : this() {
    userID_ = other.userID_;
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    users_ = other.users_.Clone();
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushMsg Clone() {
    return new PushMsg(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "users" field.</summary>
  public const int UsersFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_users_codec
      = pb::FieldCodec.ForUInt32(34);
  private readonly pbc::RepeatedField<uint> users_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Users {
    get { return users_; }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 5;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PushMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PushMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if(!users_.Equals(other.users_)) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    hash ^= users_.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    users_.WriteTo(output, _repeated_users_codec);
    if (CpProto.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    size += users_.CalculateSize(_repeated_users_codec);
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PushMsg other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    users_.Add(other.users_);
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 34:
        case 32: {
          users_.AddEntriesFrom(input, _repeated_users_codec);
          break;
        }
        case 42: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
///��������
/// </summary>
public sealed partial class GetRoomDetailReq : pb::IMessage<GetRoomDetailReq> {
  private static readonly pb::MessageParser<GetRoomDetailReq> _parser = new pb::MessageParser<GetRoomDetailReq>(() => new GetRoomDetailReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetRoomDetailReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailReq(GetRoomDetailReq other) : this() {
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    latestWatcherNum_ = other.latestWatcherNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailReq Clone() {
    return new GetRoomDetailReq(this);
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 1;
  private uint gameID_;
  /// <summary>
  /// ��ϷID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private ulong roomID_;
  /// <summary>
  /// ����ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "latestWatcherNum" field.</summary>
  public const int LatestWatcherNumFieldNumber = 3;
  private uint latestWatcherNum_;
  /// <summary>
  /// 最新加入的观战人数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LatestWatcherNum {
    get { return latestWatcherNum_; }
    set {
      latestWatcherNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetRoomDetailReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetRoomDetailReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if (LatestWatcherNum != other.LatestWatcherNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (LatestWatcherNum != 0) hash ^= LatestWatcherNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(RoomID);
    }
    if (LatestWatcherNum != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(LatestWatcherNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (LatestWatcherNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LatestWatcherNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetRoomDetailReq other) {
    if (other == null) {
      return;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.LatestWatcherNum != 0) {
      LatestWatcherNum = other.LatestWatcherNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GameID = input.ReadUInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 24: {
          LatestWatcherNum = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GetRoomDetailRsp : pb::IMessage<GetRoomDetailRsp> {
  private static readonly pb::MessageParser<GetRoomDetailRsp> _parser = new pb::MessageParser<GetRoomDetailRsp>(() => new GetRoomDetailRsp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetRoomDetailRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailRsp(GetRoomDetailRsp other) : this() {
    status_ = other.status_;
    RoomDetail = other.roomDetail_ != null ? other.RoomDetail.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailRsp Clone() {
    return new GetRoomDetailRsp(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ErrorCode status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "roomDetail" field.</summary>
  public const int RoomDetailFieldNumber = 2;
  private global::RoomDetail roomDetail_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomDetail RoomDetail {
    get { return roomDetail_; }
    set {
      roomDetail_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetRoomDetailRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetRoomDetailRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (!object.Equals(RoomDetail, other.RoomDetail)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (roomDetail_ != null) hash ^= RoomDetail.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (roomDetail_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RoomDetail);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (roomDetail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomDetail);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetRoomDetailRsp other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.roomDetail_ != null) {
      if (roomDetail_ == null) {
        roomDetail_ = new global::RoomDetail();
      }
      RoomDetail.MergeFrom(other.RoomDetail);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 18: {
          if (roomDetail_ == null) {
            roomDetail_ = new global::RoomDetail();
          }
          input.ReadMessage(roomDetail_);
          break;
        }
      }
    }
  }

}

public sealed partial class RoomDetail : pb::IMessage<RoomDetail> {
  private static readonly pb::MessageParser<RoomDetail> _parser = new pb::MessageParser<RoomDetail>(() => new RoomDetail());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomDetail> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomDetail() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomDetail(RoomDetail other) : this() {
    roomID_ = other.roomID_;
    state_ = other.state_;
    maxPlayer_ = other.maxPlayer_;
    mode_ = other.mode_;
    canWatch_ = other.canWatch_;
    roomProperty_ = other.roomProperty_;
    owner_ = other.owner_;
    createFlag_ = other.createFlag_;
    playerInfos_ = other.playerInfos_.Clone();
    WatchRoom = other.watchRoom_ != null ? other.WatchRoom.Clone() : null;
    brigades_ = other.brigades_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomDetail Clone() {
    return new RoomDetail(this);
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 2;
  private uint state_;
  /// <summary>
  /// ����/�ر�
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "maxPlayer" field.</summary>
  public const int MaxPlayerFieldNumber = 3;
  private uint maxPlayer_;
  /// <summary>
  /// �������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxPlayer {
    get { return maxPlayer_; }
    set {
      maxPlayer_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 4;
  private int mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "canWatch" field.</summary>
  public const int CanWatchFieldNumber = 5;
  private int canWatch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CanWatch {
    get { return canWatch_; }
    set {
      canWatch_ = value;
    }
  }

  /// <summary>Field number for the "roomProperty" field.</summary>
  public const int RoomPropertyFieldNumber = 6;
  private pb::ByteString roomProperty_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RoomProperty {
    get { return roomProperty_; }
    set {
      roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 7;
  private uint owner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Owner {
    get { return owner_; }
    set {
      owner_ = value;
    }
  }

  /// <summary>Field number for the "createFlag" field.</summary>
  public const int CreateFlagFieldNumber = 8;
  private uint createFlag_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CreateFlag {
    get { return createFlag_; }
    set {
      createFlag_ = value;
    }
  }

  /// <summary>Field number for the "playerInfos" field.</summary>
  public const int PlayerInfosFieldNumber = 9;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_playerInfos_codec
      = pb::FieldCodec.ForMessage(74, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> PlayerInfos {
    get { return playerInfos_; }
  }

  /// <summary>Field number for the "watchRoom" field.</summary>
  public const int WatchRoomFieldNumber = 10;
  private global::WatchRoom watchRoom_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::WatchRoom WatchRoom {
    get { return watchRoom_; }
    set {
      watchRoom_ = value;
    }
  }

  /// <summary>Field number for the "brigades" field.</summary>
  public const int BrigadesFieldNumber = 11;
  private static readonly pb::FieldCodec<global::BrigadeInfo> _repeated_brigades_codec
      = pb::FieldCodec.ForMessage(90, global::BrigadeInfo.Parser);
  private readonly pbc::RepeatedField<global::BrigadeInfo> brigades_ = new pbc::RepeatedField<global::BrigadeInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BrigadeInfo> Brigades {
    get { return brigades_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomDetail);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomDetail other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (State != other.State) return false;
    if (MaxPlayer != other.MaxPlayer) return false;
    if (Mode != other.Mode) return false;
    if (CanWatch != other.CanWatch) return false;
    if (RoomProperty != other.RoomProperty) return false;
    if (Owner != other.Owner) return false;
    if (CreateFlag != other.CreateFlag) return false;
    if(!playerInfos_.Equals(other.playerInfos_)) return false;
    if (!object.Equals(WatchRoom, other.WatchRoom)) return false;
    if(!brigades_.Equals(other.brigades_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (CanWatch != 0) hash ^= CanWatch.GetHashCode();
    if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
    if (Owner != 0) hash ^= Owner.GetHashCode();
    if (CreateFlag != 0) hash ^= CreateFlag.GetHashCode();
    hash ^= playerInfos_.GetHashCode();
    if (watchRoom_ != null) hash ^= WatchRoom.GetHashCode();
    hash ^= brigades_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoomID);
    }
    if (State != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(State);
    }
    if (MaxPlayer != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(MaxPlayer);
    }
    if (Mode != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Mode);
    }
    if (CanWatch != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CanWatch);
    }
    if (RoomProperty.Length != 0) {
      output.WriteRawTag(50);
      output.WriteBytes(RoomProperty);
    }
    if (Owner != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Owner);
    }
    if (CreateFlag != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(CreateFlag);
    }
    playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
    if (watchRoom_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(WatchRoom);
    }
    brigades_.WriteTo(output, _repeated_brigades_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
    }
    if (MaxPlayer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayer);
    }
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (CanWatch != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanWatch);
    }
    if (RoomProperty.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
    }
    if (Owner != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
    }
    if (CreateFlag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateFlag);
    }
    size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
    if (watchRoom_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchRoom);
    }
    size += brigades_.CalculateSize(_repeated_brigades_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomDetail other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.MaxPlayer != 0) {
      MaxPlayer = other.MaxPlayer;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.CanWatch != 0) {
      CanWatch = other.CanWatch;
    }
    if (other.RoomProperty.Length != 0) {
      RoomProperty = other.RoomProperty;
    }
    if (other.Owner != 0) {
      Owner = other.Owner;
    }
    if (other.CreateFlag != 0) {
      CreateFlag = other.CreateFlag;
    }
    playerInfos_.Add(other.playerInfos_);
    if (other.watchRoom_ != null) {
      if (watchRoom_ == null) {
        watchRoom_ = new global::WatchRoom();
      }
      WatchRoom.MergeFrom(other.WatchRoom);
    }
    brigades_.Add(other.brigades_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 16: {
          State = input.ReadUInt32();
          break;
        }
        case 24: {
          MaxPlayer = input.ReadUInt32();
          break;
        }
        case 32: {
          Mode = input.ReadInt32();
          break;
        }
        case 40: {
          CanWatch = input.ReadInt32();
          break;
        }
        case 50: {
          RoomProperty = input.ReadBytes();
          break;
        }
        case 56: {
          Owner = input.ReadUInt32();
          break;
        }
        case 64: {
          CreateFlag = input.ReadUInt32();
          break;
        }
        case 74: {
          playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
          break;
        }
        case 82: {
          if (watchRoom_ == null) {
            watchRoom_ = new global::WatchRoom();
          }
          input.ReadMessage(watchRoom_);
          break;
        }
        case 90: {
          brigades_.AddEntriesFrom(input, _repeated_brigades_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
  private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo(PlayerInfo other) : this() {
    userID_ = other.userID_;
    userProfile_ = other.userProfile_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo Clone() {
    return new PlayerInfo(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "userProfile" field.</summary>
  public const int UserProfileFieldNumber = 2;
  private pb::ByteString userProfile_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString UserProfile {
    get { return userProfile_; }
    set {
      userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (UserProfile != other.UserProfile) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (UserProfile.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(UserProfile);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (UserProfile.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.UserProfile.Length != 0) {
      UserProfile = other.UserProfile;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 18: {
          UserProfile = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
///
///���䴴��ʱ����GS�ĸ�����Ϣ
/// </summary>
public sealed partial class CreateExtInfo : pb::IMessage<CreateExtInfo> {
  private static readonly pb::MessageParser<CreateExtInfo> _parser = new pb::MessageParser<CreateExtInfo>(() => new CreateExtInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateExtInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateExtInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateExtInfo(CreateExtInfo other) : this() {
    userID_ = other.userID_;
    userProfile_ = other.userProfile_;
    roomID_ = other.roomID_;
    state_ = other.state_;
    maxPlayer_ = other.maxPlayer_;
    mode_ = other.mode_;
    canWatch_ = other.canWatch_;
    roomProperty_ = other.roomProperty_;
    createFlag_ = other.createFlag_;
    createTime_ = other.createTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateExtInfo Clone() {
    return new CreateExtInfo(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  /// <summary>
  /// ������ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "userProfile" field.</summary>
  public const int UserProfileFieldNumber = 2;
  private pb::ByteString userProfile_ = pb::ByteString.Empty;
  /// <summary>
  /// ������Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString UserProfile {
    get { return userProfile_; }
    set {
      userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  /// <summary>
  /// ����ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private uint state_;
  /// <summary>
  /// ����/�ر�
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "maxPlayer" field.</summary>
  public const int MaxPlayerFieldNumber = 5;
  private uint maxPlayer_;
  /// <summary>
  /// �������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxPlayer {
    get { return maxPlayer_; }
    set {
      maxPlayer_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 6;
  private int mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "canWatch" field.</summary>
  public const int CanWatchFieldNumber = 7;
  private int canWatch_;
  /// <summary>
  /// �Ƿ�ɹ�ս
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CanWatch {
    get { return canWatch_; }
    set {
      canWatch_ = value;
    }
  }

  /// <summary>Field number for the "roomProperty" field.</summary>
  public const int RoomPropertyFieldNumber = 8;
  private pb::ByteString roomProperty_ = pb::ByteString.Empty;
  /// <summary>
  /// ��������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RoomProperty {
    get { return roomProperty_; }
    set {
      roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "createFlag" field.</summary>
  public const int CreateFlagFieldNumber = 9;
  private uint createFlag_;
  /// <summary>
  /// ����;��
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CreateFlag {
    get { return createFlag_; }
    set {
      createFlag_ = value;
    }
  }

  /// <summary>Field number for the "CreateTime" field.</summary>
  public const int CreateTimeFieldNumber = 10;
  private ulong createTime_;
  /// <summary>
  /// ���䴴��ʱ��
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CreateTime {
    get { return createTime_; }
    set {
      createTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateExtInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateExtInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (UserProfile != other.UserProfile) return false;
    if (RoomID != other.RoomID) return false;
    if (State != other.State) return false;
    if (MaxPlayer != other.MaxPlayer) return false;
    if (Mode != other.Mode) return false;
    if (CanWatch != other.CanWatch) return false;
    if (RoomProperty != other.RoomProperty) return false;
    if (CreateFlag != other.CreateFlag) return false;
    if (CreateTime != other.CreateTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (CanWatch != 0) hash ^= CanWatch.GetHashCode();
    if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
    if (CreateFlag != 0) hash ^= CreateFlag.GetHashCode();
    if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (UserProfile.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(UserProfile);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    if (State != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(State);
    }
    if (MaxPlayer != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(MaxPlayer);
    }
    if (Mode != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Mode);
    }
    if (CanWatch != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(CanWatch);
    }
    if (RoomProperty.Length != 0) {
      output.WriteRawTag(66);
      output.WriteBytes(RoomProperty);
    }
    if (CreateFlag != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(CreateFlag);
    }
    if (CreateTime != 0UL) {
      output.WriteRawTag(80);
      output.WriteUInt64(CreateTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (UserProfile.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
    }
    if (MaxPlayer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayer);
    }
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (CanWatch != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanWatch);
    }
    if (RoomProperty.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
    }
    if (CreateFlag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateFlag);
    }
    if (CreateTime != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateExtInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.UserProfile.Length != 0) {
      UserProfile = other.UserProfile;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.MaxPlayer != 0) {
      MaxPlayer = other.MaxPlayer;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.CanWatch != 0) {
      CanWatch = other.CanWatch;
    }
    if (other.RoomProperty.Length != 0) {
      RoomProperty = other.RoomProperty;
    }
    if (other.CreateFlag != 0) {
      CreateFlag = other.CreateFlag;
    }
    if (other.CreateTime != 0UL) {
      CreateTime = other.CreateTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 18: {
          UserProfile = input.ReadBytes();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 32: {
          State = input.ReadUInt32();
          break;
        }
        case 40: {
          MaxPlayer = input.ReadUInt32();
          break;
        }
        case 48: {
          Mode = input.ReadInt32();
          break;
        }
        case 56: {
          CanWatch = input.ReadInt32();
          break;
        }
        case 66: {
          RoomProperty = input.ReadBytes();
          break;
        }
        case 72: {
          CreateFlag = input.ReadUInt32();
          break;
        }
        case 80: {
          CreateTime = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///
///���뷿��ʱ����GS�ĸ�����Ϣ
/// </summary>
public sealed partial class JoinExtInfo : pb::IMessage<JoinExtInfo> {
  private static readonly pb::MessageParser<JoinExtInfo> _parser = new pb::MessageParser<JoinExtInfo>(() => new JoinExtInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JoinExtInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinExtInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinExtInfo(JoinExtInfo other) : this() {
    userID_ = other.userID_;
    userProfile_ = other.userProfile_;
    roomID_ = other.roomID_;
    joinType_ = other.joinType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinExtInfo Clone() {
    return new JoinExtInfo(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  /// <summary>
  /// ���뷿������ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "userProfile" field.</summary>
  public const int UserProfileFieldNumber = 2;
  private pb::ByteString userProfile_ = pb::ByteString.Empty;
  /// <summary>
  /// ���뷿����������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString UserProfile {
    get { return userProfile_; }
    set {
      userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  /// <summary>
  /// Ҫ����ķ���ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "JoinType" field.</summary>
  public const int JoinTypeFieldNumber = 4;
  private uint joinType_;
  /// <summary>
  /// ������롢�Զ������Լ��롢ָ�������
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint JoinType {
    get { return joinType_; }
    set {
      joinType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JoinExtInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JoinExtInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (UserProfile != other.UserProfile) return false;
    if (RoomID != other.RoomID) return false;
    if (JoinType != other.JoinType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (JoinType != 0) hash ^= JoinType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (UserProfile.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(UserProfile);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    if (JoinType != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(JoinType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (UserProfile.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (JoinType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JoinExtInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.UserProfile.Length != 0) {
      UserProfile = other.UserProfile;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.JoinType != 0) {
      JoinType = other.JoinType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 18: {
          UserProfile = input.ReadBytes();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 32: {
          JoinType = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SetRoomPropertyReq : pb::IMessage<SetRoomPropertyReq> {
  private static readonly pb::MessageParser<SetRoomPropertyReq> _parser = new pb::MessageParser<SetRoomPropertyReq>(() => new SetRoomPropertyReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetRoomPropertyReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetRoomPropertyReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetRoomPropertyReq(SetRoomPropertyReq other) : this() {
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    userID_ = other.userID_;
    roomProperty_ = other.roomProperty_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetRoomPropertyReq Clone() {
    return new SetRoomPropertyReq(this);
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 1;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 3;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "roomProperty" field.</summary>
  public const int RoomPropertyFieldNumber = 4;
  private pb::ByteString roomProperty_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RoomProperty {
    get { return roomProperty_; }
    set {
      roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetRoomPropertyReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetRoomPropertyReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if (UserID != other.UserID) return false;
    if (RoomProperty != other.RoomProperty) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(RoomID);
    }
    if (UserID != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(UserID);
    }
    if (RoomProperty.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(RoomProperty);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (RoomProperty.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetRoomPropertyReq other) {
    if (other == null) {
      return;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomProperty.Length != 0) {
      RoomProperty = other.RoomProperty;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GameID = input.ReadUInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 24: {
          UserID = input.ReadUInt32();
          break;
        }
        case 34: {
          RoomProperty = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class SetRoomPropertyRsp : pb::IMessage<SetRoomPropertyRsp> {
  private static readonly pb::MessageParser<SetRoomPropertyRsp> _parser = new pb::MessageParser<SetRoomPropertyRsp>(() => new SetRoomPropertyRsp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetRoomPropertyRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetRoomPropertyRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetRoomPropertyRsp(SetRoomPropertyRsp other) : this() {
    status_ = other.status_;
    roomID_ = other.roomID_;
    userID_ = other.userID_;
    roomProperty_ = other.roomProperty_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetRoomPropertyRsp Clone() {
    return new SetRoomPropertyRsp(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ErrorCode status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 3;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "roomProperty" field.</summary>
  public const int RoomPropertyFieldNumber = 4;
  private pb::ByteString roomProperty_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RoomProperty {
    get { return roomProperty_; }
    set {
      roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetRoomPropertyRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetRoomPropertyRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (RoomID != other.RoomID) return false;
    if (UserID != other.UserID) return false;
    if (RoomProperty != other.RoomProperty) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(RoomID);
    }
    if (UserID != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(UserID);
    }
    if (RoomProperty.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(RoomProperty);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (RoomProperty.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetRoomPropertyRsp other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomProperty.Length != 0) {
      RoomProperty = other.RoomProperty;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 16: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 24: {
          UserID = input.ReadUInt32();
          break;
        }
        case 34: {
          RoomProperty = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 观战详情
/// </summary>
public sealed partial class WatchInfo : pb::IMessage<WatchInfo> {
  private static readonly pb::MessageParser<WatchInfo> _parser = new pb::MessageParser<WatchInfo>(() => new WatchInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WatchInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WatchInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WatchInfo(WatchInfo other) : this() {
    roomID_ = other.roomID_;
    state_ = other.state_;
    WatchSetting = other.watchSetting_ != null ? other.WatchSetting.Clone() : null;
    curWatch_ = other.curWatch_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WatchInfo Clone() {
    return new WatchInfo(this);
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 2;
  private uint state_;
  /// <summary>
  /// 观战房间状态。1：回放房间；2：游戏中房间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "watchSetting" field.</summary>
  public const int WatchSettingFieldNumber = 3;
  private global::WatchSetting watchSetting_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::WatchSetting WatchSetting {
    get { return watchSetting_; }
    set {
      watchSetting_ = value;
    }
  }

  /// <summary>Field number for the "curWatch" field.</summary>
  public const int CurWatchFieldNumber = 4;
  private uint curWatch_;
  /// <summary>
  /// 当前观战人数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CurWatch {
    get { return curWatch_; }
    set {
      curWatch_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WatchInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WatchInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (State != other.State) return false;
    if (!object.Equals(WatchSetting, other.WatchSetting)) return false;
    if (CurWatch != other.CurWatch) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (watchSetting_ != null) hash ^= WatchSetting.GetHashCode();
    if (CurWatch != 0) hash ^= CurWatch.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoomID);
    }
    if (State != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(State);
    }
    if (watchSetting_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(WatchSetting);
    }
    if (CurWatch != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(CurWatch);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
    }
    if (watchSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchSetting);
    }
    if (CurWatch != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurWatch);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WatchInfo other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.watchSetting_ != null) {
      if (watchSetting_ == null) {
        watchSetting_ = new global::WatchSetting();
      }
      WatchSetting.MergeFrom(other.WatchSetting);
    }
    if (other.CurWatch != 0) {
      CurWatch = other.CurWatch;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 16: {
          State = input.ReadUInt32();
          break;
        }
        case 26: {
          if (watchSetting_ == null) {
            watchSetting_ = new global::WatchSetting();
          }
          input.ReadMessage(watchSetting_);
          break;
        }
        case 32: {
          CurWatch = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class WatchRoom : pb::IMessage<WatchRoom> {
  private static readonly pb::MessageParser<WatchRoom> _parser = new pb::MessageParser<WatchRoom>(() => new WatchRoom());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WatchRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WatchRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WatchRoom(WatchRoom other) : this() {
    WatchInfo = other.watchInfo_ != null ? other.WatchInfo.Clone() : null;
    watchPlayers_ = other.watchPlayers_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WatchRoom Clone() {
    return new WatchRoom(this);
  }

  /// <summary>Field number for the "watchInfo" field.</summary>
  public const int WatchInfoFieldNumber = 1;
  private global::WatchInfo watchInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::WatchInfo WatchInfo {
    get { return watchInfo_; }
    set {
      watchInfo_ = value;
    }
  }

  /// <summary>Field number for the "watchPlayers" field.</summary>
  public const int WatchPlayersFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_watchPlayers_codec
      = pb::FieldCodec.ForMessage(18, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> watchPlayers_ = new pbc::RepeatedField<global::PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> WatchPlayers {
    get { return watchPlayers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WatchRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WatchRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(WatchInfo, other.WatchInfo)) return false;
    if(!watchPlayers_.Equals(other.watchPlayers_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (watchInfo_ != null) hash ^= WatchInfo.GetHashCode();
    hash ^= watchPlayers_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (watchInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(WatchInfo);
    }
    watchPlayers_.WriteTo(output, _repeated_watchPlayers_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (watchInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatchInfo);
    }
    size += watchPlayers_.CalculateSize(_repeated_watchPlayers_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WatchRoom other) {
    if (other == null) {
      return;
    }
    if (other.watchInfo_ != null) {
      if (watchInfo_ == null) {
        watchInfo_ = new global::WatchInfo();
      }
      WatchInfo.MergeFrom(other.WatchInfo);
    }
    watchPlayers_.Add(other.watchPlayers_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (watchInfo_ == null) {
            watchInfo_ = new global::WatchInfo();
          }
          input.ReadMessage(watchInfo_);
          break;
        }
        case 18: {
          watchPlayers_.AddEntriesFrom(input, _repeated_watchPlayers_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
//////////////////////////// 组队匹配相关的协议 start ///////////////////////////
/// </summary>
public sealed partial class TeamInfo : pb::IMessage<TeamInfo> {
  private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TeamInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TeamInfo(TeamInfo other) : this() {
    teamID_ = other.teamID_;
    password_ = other.password_;
    capacity_ = other.capacity_;
    mode_ = other.mode_;
    visibility_ = other.visibility_;
    owner_ = other.owner_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TeamInfo Clone() {
    return new TeamInfo(this);
  }

  /// <summary>Field number for the "teamID" field.</summary>
  public const int TeamIDFieldNumber = 1;
  private ulong teamID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong TeamID {
    get { return teamID_; }
    set {
      teamID_ = value;
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  /// <summary>
  /// 密码，空表示无密码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "capacity" field.</summary>
  public const int CapacityFieldNumber = 3;
  private uint capacity_;
  /// <summary>
  /// 队伍人数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Capacity {
    get { return capacity_; }
    set {
      capacity_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 4;
  private int mode_;
  /// <summary>
  /// 游戏模式
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "visibility" field.</summary>
  public const int VisibilityFieldNumber = 5;
  private int visibility_;
  /// <summary>
  /// 是否可见，0不可见、1可见
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Visibility {
    get { return visibility_; }
    set {
      visibility_ = value;
    }
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 6;
  private uint owner_;
  /// <summary>
  /// 队长
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Owner {
    get { return owner_; }
    set {
      owner_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TeamInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TeamInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TeamID != other.TeamID) return false;
    if (Password != other.Password) return false;
    if (Capacity != other.Capacity) return false;
    if (Mode != other.Mode) return false;
    if (Visibility != other.Visibility) return false;
    if (Owner != other.Owner) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TeamID != 0UL) hash ^= TeamID.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (Capacity != 0) hash ^= Capacity.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (Visibility != 0) hash ^= Visibility.GetHashCode();
    if (Owner != 0) hash ^= Owner.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TeamID != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(TeamID);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (Capacity != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Capacity);
    }
    if (Mode != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Mode);
    }
    if (Visibility != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Visibility);
    }
    if (Owner != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Owner);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TeamID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamID);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (Capacity != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Capacity);
    }
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (Visibility != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Visibility);
    }
    if (Owner != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TeamInfo other) {
    if (other == null) {
      return;
    }
    if (other.TeamID != 0UL) {
      TeamID = other.TeamID;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.Capacity != 0) {
      Capacity = other.Capacity;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.Visibility != 0) {
      Visibility = other.Visibility;
    }
    if (other.Owner != 0) {
      Owner = other.Owner;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TeamID = input.ReadUInt64();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
        case 24: {
          Capacity = input.ReadUInt32();
          break;
        }
        case 32: {
          Mode = input.ReadInt32();
          break;
        }
        case 40: {
          Visibility = input.ReadInt32();
          break;
        }
        case 48: {
          Owner = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class TeamDetail : pb::IMessage<TeamDetail> {
  private static readonly pb::MessageParser<TeamDetail> _parser = new pb::MessageParser<TeamDetail>(() => new TeamDetail());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TeamDetail> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TeamDetail() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TeamDetail(TeamDetail other) : this() {
    TeamInfo = other.teamInfo_ != null ? other.TeamInfo.Clone() : null;
    player_ = other.player_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TeamDetail Clone() {
    return new TeamDetail(this);
  }

  /// <summary>Field number for the "teamInfo" field.</summary>
  public const int TeamInfoFieldNumber = 1;
  private global::TeamInfo teamInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TeamInfo TeamInfo {
    get { return teamInfo_; }
    set {
      teamInfo_ = value;
    }
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_player_codec
      = pb::FieldCodec.ForMessage(18, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> player_ = new pbc::RepeatedField<global::PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> Player {
    get { return player_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TeamDetail);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TeamDetail other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(TeamInfo, other.TeamInfo)) return false;
    if(!player_.Equals(other.player_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (teamInfo_ != null) hash ^= TeamInfo.GetHashCode();
    hash ^= player_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (teamInfo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(TeamInfo);
    }
    player_.WriteTo(output, _repeated_player_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (teamInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamInfo);
    }
    size += player_.CalculateSize(_repeated_player_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TeamDetail other) {
    if (other == null) {
      return;
    }
    if (other.teamInfo_ != null) {
      if (teamInfo_ == null) {
        teamInfo_ = new global::TeamInfo();
      }
      TeamInfo.MergeFrom(other.TeamInfo);
    }
    player_.Add(other.player_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (teamInfo_ == null) {
            teamInfo_ = new global::TeamInfo();
          }
          input.ReadMessage(teamInfo_);
          break;
        }
        case 18: {
          player_.AddEntriesFrom(input, _repeated_player_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 大队
/// </summary>
public sealed partial class BrigadeInfo : pb::IMessage<BrigadeInfo> {
  private static readonly pb::MessageParser<BrigadeInfo> _parser = new pb::MessageParser<BrigadeInfo>(() => new BrigadeInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrigadeInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrigadeInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrigadeInfo(BrigadeInfo other) : this() {
    brigadeID_ = other.brigadeID_;
    teams_ = other.teams_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrigadeInfo Clone() {
    return new BrigadeInfo(this);
  }

  /// <summary>Field number for the "brigadeID" field.</summary>
  public const int BrigadeIDFieldNumber = 1;
  private uint brigadeID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BrigadeID {
    get { return brigadeID_; }
    set {
      brigadeID_ = value;
    }
  }

  /// <summary>Field number for the "teams" field.</summary>
  public const int TeamsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::TeamDetail> _repeated_teams_codec
      = pb::FieldCodec.ForMessage(18, global::TeamDetail.Parser);
  private readonly pbc::RepeatedField<global::TeamDetail> teams_ = new pbc::RepeatedField<global::TeamDetail>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TeamDetail> Teams {
    get { return teams_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrigadeInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrigadeInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BrigadeID != other.BrigadeID) return false;
    if(!teams_.Equals(other.teams_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BrigadeID != 0) hash ^= BrigadeID.GetHashCode();
    hash ^= teams_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BrigadeID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(BrigadeID);
    }
    teams_.WriteTo(output, _repeated_teams_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BrigadeID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BrigadeID);
    }
    size += teams_.CalculateSize(_repeated_teams_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrigadeInfo other) {
    if (other == null) {
      return;
    }
    if (other.BrigadeID != 0) {
      BrigadeID = other.BrigadeID;
    }
    teams_.Add(other.teams_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BrigadeID = input.ReadUInt32();
          break;
        }
        case 18: {
          teams_.AddEntriesFrom(input, _repeated_teams_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
