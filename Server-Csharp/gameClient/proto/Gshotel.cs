// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gshotel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gshotel.proto</summary>
public static partial class GshotelReflection {

  #region Descriptor
  /// <summary>File descriptor for gshotel.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GshotelReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1nc2hvdGVsLnByb3RvIikKB0Nvbm5lY3QSDgoGZ2FtZUlEGAEgASgNEg4K",
          "BnJvb21JRBgCIAEoBCIcCgpDb25uZWN0QWNrEg4KBnN0YXR1cxgBIAEoDSIu",
          "CgxDbG9zZUNvbm5lY3QSDgoGZ2FtZUlEGAEgASgNEg4KBnJvb21JRBgCIAEo",
          "BCIhCg9DbG9zZUNvbm5lY3RBY2sSDgoGc3RhdHVzGAEgASgNInAKDkhvdGVs",
          "QnJvYWRjYXN0Eg4KBnVzZXJJRBgBIAEoDRIOCgZnYW1lSUQYAiABKA0SDgoG",
          "cm9vbUlEGAMgASgEEgwKBGZsYWcYBCABKA0SDwoHZHN0VWlkcxgFIAMoDRIP",
          "CgdjcFByb3RvGAYgASgMIjMKEUhvdGVsQnJvYWRjYXN0QWNrEg4KBnVzZXJJ",
          "RBgBIAEoDRIOCgZzdGF0dXMYAiABKA0icgoOUHVzaFRvSG90ZWxNc2cSHgoI",
          "cHVzaFR5cGUYASABKA4yDC5QdXNoTXNnVHlwZRIOCgZnYW1lSUQYAiABKA0S",
          "DgoGcm9vbUlEGAMgASgEEg8KB2RzdFVpZHMYBCADKA0SDwoHY3BQcm90bxgF",
          "IAEoDCrPAQoMSG90ZWxHc0NtZElEEg0KCUhvdGVsTm9uZRAAEhcKEkhvdGVs",
          "Q3JlYXRlQ29ubmVjdBDdCxIaChVIb3RlbENyZWF0ZUNvbm5lY3RBY2sQ3gsS",
          "GAoTSG90ZWxCcm9hZGNhc3RDTURJRBDfCxIbChZIb3RlbEJyb2FkY2FzdEFj",
          "a0NNRElEEOALEhMKDkhvdGVsUHVzaENNRElEEOELEhUKEEhvdGVsQ2xvc2VD",
          "b25uZXQQ4gsSGAoTSG90ZWxDbG9zZUNvbm5ldEFjaxDjCypXCgtQdXNoTXNn",
          "VHlwZRIMCghOb25lVHlwZRAAEhQKEFVzZXJUeXBlU3BlY2lmaWMQARITCg9V",
          "c2VyVHlwZUV4Y2x1ZGUQAhIPCgtVc2VyVHlwZUFsbBADYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::HotelGsCmdID), typeof(global::PushMsgType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Connect), global::Connect.Parser, new[]{ "GameID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ConnectAck), global::ConnectAck.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloseConnect), global::CloseConnect.Parser, new[]{ "GameID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CloseConnectAck), global::CloseConnectAck.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HotelBroadcast), global::HotelBroadcast.Parser, new[]{ "UserID", "GameID", "RoomID", "Flag", "DstUids", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HotelBroadcastAck), global::HotelBroadcastAck.Parser, new[]{ "UserID", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PushToHotelMsg), global::PushToHotelMsg.Parser, new[]{ "PushType", "GameID", "RoomID", "DstUids", "CpProto" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum HotelGsCmdID {
  [pbr::OriginalName("HotelNone")] HotelNone = 0,
  /// <summary>
  ///建立连接时
  /// </summary>
  [pbr::OriginalName("HotelCreateConnect")] HotelCreateConnect = 1501,
  [pbr::OriginalName("HotelCreateConnectAck")] HotelCreateConnectAck = 1502,
  /// <summary>
  /// 二进制broadcast协议
  /// </summary>
  [pbr::OriginalName("HotelBroadcastCMDID")] HotelBroadcastCmdid = 1503,
  [pbr::OriginalName("HotelBroadcastAckCMDID")] HotelBroadcastAckCmdid = 1504,
  /// <summary>
  /// 二进制push协议
  /// </summary>
  [pbr::OriginalName("HotelPushCMDID")] HotelPushCmdid = 1505,
  /// <summary>
  ///删除房间
  /// </summary>
  [pbr::OriginalName("HotelCloseConnet")] HotelCloseConnet = 1506,
  [pbr::OriginalName("HotelCloseConnetAck")] HotelCloseConnetAck = 1507,
}

/// <summary>
///推送hotel消息类型
/// </summary>
public enum PushMsgType {
  [pbr::OriginalName("NoneType")] NoneType = 0,
  /// <summary>
  ///推送给列表中的指定用户
  /// </summary>
  [pbr::OriginalName("UserTypeSpecific")] UserTypeSpecific = 1,
  /// <summary>
  ///推送给除列表中指定用户外的其他用户
  /// </summary>
  [pbr::OriginalName("UserTypeExclude")] UserTypeExclude = 2,
  /// <summary>
  ///推送给房间内的所有用户，包括自己，users列表参数无效
  /// </summary>
  [pbr::OriginalName("UserTypeAll")] UserTypeAll = 3,
}

#endregion

#region Messages
/// <summary>
///建立连接时//需要把roomID和Stream映射起来
/// </summary>
public sealed partial class Connect : pb::IMessage<Connect> {
  private static readonly pb::MessageParser<Connect> _parser = new pb::MessageParser<Connect>(() => new Connect());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Connect> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GshotelReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Connect() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Connect(Connect other) : this() {
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Connect Clone() {
    return new Connect(this);
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 1;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Connect);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Connect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Connect other) {
    if (other == null) {
      return;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GameID = input.ReadUInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///建立连接后返回
/// </summary>
public sealed partial class ConnectAck : pb::IMessage<ConnectAck> {
  private static readonly pb::MessageParser<ConnectAck> _parser = new pb::MessageParser<ConnectAck>(() => new ConnectAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ConnectAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GshotelReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectAck(ConnectAck other) : this() {
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ConnectAck Clone() {
    return new ConnectAck(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private uint status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ConnectAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ConnectAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ConnectAck other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Status = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///关闭连接，删除房间信息
/// </summary>
public sealed partial class CloseConnect : pb::IMessage<CloseConnect> {
  private static readonly pb::MessageParser<CloseConnect> _parser = new pb::MessageParser<CloseConnect>(() => new CloseConnect());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloseConnect> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GshotelReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseConnect() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseConnect(CloseConnect other) : this() {
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseConnect Clone() {
    return new CloseConnect(this);
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 1;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloseConnect);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloseConnect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloseConnect other) {
    if (other == null) {
      return;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GameID = input.ReadUInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///关闭连接返回
/// </summary>
public sealed partial class CloseConnectAck : pb::IMessage<CloseConnectAck> {
  private static readonly pb::MessageParser<CloseConnectAck> _parser = new pb::MessageParser<CloseConnectAck>(() => new CloseConnectAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CloseConnectAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GshotelReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseConnectAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseConnectAck(CloseConnectAck other) : this() {
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CloseConnectAck Clone() {
    return new CloseConnectAck(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private uint status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CloseConnectAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CloseConnectAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CloseConnectAck other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Status = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///广播消息
/// </summary>
public sealed partial class HotelBroadcast : pb::IMessage<HotelBroadcast> {
  private static readonly pb::MessageParser<HotelBroadcast> _parser = new pb::MessageParser<HotelBroadcast>(() => new HotelBroadcast());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HotelBroadcast> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GshotelReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HotelBroadcast() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HotelBroadcast(HotelBroadcast other) : this() {
    userID_ = other.userID_;
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    flag_ = other.flag_;
    dstUids_ = other.dstUids_.Clone();
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HotelBroadcast Clone() {
    return new HotelBroadcast(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "flag" field.</summary>
  public const int FlagFieldNumber = 4;
  private uint flag_;
  /// <summary>
  /// 0000 00 00 priority, dstType 和 msgType 合并
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Flag {
    get { return flag_; }
    set {
      flag_ = value;
    }
  }

  /// <summary>Field number for the "dstUids" field.</summary>
  public const int DstUidsFieldNumber = 5;
  private static readonly pb::FieldCodec<uint> _repeated_dstUids_codec
      = pb::FieldCodec.ForUInt32(42);
  private readonly pbc::RepeatedField<uint> dstUids_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> DstUids {
    get { return dstUids_; }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 6;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HotelBroadcast);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HotelBroadcast other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if (Flag != other.Flag) return false;
    if(!dstUids_.Equals(other.dstUids_)) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (Flag != 0) hash ^= Flag.GetHashCode();
    hash ^= dstUids_.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    if (Flag != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Flag);
    }
    dstUids_.WriteTo(output, _repeated_dstUids_codec);
    if (CpProto.Length != 0) {
      output.WriteRawTag(50);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (Flag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
    }
    size += dstUids_.CalculateSize(_repeated_dstUids_codec);
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HotelBroadcast other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.Flag != 0) {
      Flag = other.Flag;
    }
    dstUids_.Add(other.dstUids_);
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 32: {
          Flag = input.ReadUInt32();
          break;
        }
        case 42:
        case 40: {
          dstUids_.AddEntriesFrom(input, _repeated_dstUids_codec);
          break;
        }
        case 50: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
///消息同步返回
/// </summary>
public sealed partial class HotelBroadcastAck : pb::IMessage<HotelBroadcastAck> {
  private static readonly pb::MessageParser<HotelBroadcastAck> _parser = new pb::MessageParser<HotelBroadcastAck>(() => new HotelBroadcastAck());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HotelBroadcastAck> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GshotelReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HotelBroadcastAck() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HotelBroadcastAck(HotelBroadcastAck other) : this() {
    userID_ = other.userID_;
    status_ = other.status_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HotelBroadcastAck Clone() {
    return new HotelBroadcastAck(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private uint status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HotelBroadcastAck);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HotelBroadcastAck other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (Status != other.Status) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Status);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HotelBroadcastAck other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 16: {
          Status = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///推送给hotel消息
/// </summary>
public sealed partial class PushToHotelMsg : pb::IMessage<PushToHotelMsg> {
  private static readonly pb::MessageParser<PushToHotelMsg> _parser = new pb::MessageParser<PushToHotelMsg>(() => new PushToHotelMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PushToHotelMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GshotelReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushToHotelMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushToHotelMsg(PushToHotelMsg other) : this() {
    pushType_ = other.pushType_;
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    dstUids_ = other.dstUids_.Clone();
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushToHotelMsg Clone() {
    return new PushToHotelMsg(this);
  }

  /// <summary>Field number for the "pushType" field.</summary>
  public const int PushTypeFieldNumber = 1;
  private global::PushMsgType pushType_ = 0;
  /// <summary>
  ///根据push类型广播给其他人
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PushMsgType PushType {
    get { return pushType_; }
    set {
      pushType_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "dstUids" field.</summary>
  public const int DstUidsFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_dstUids_codec
      = pb::FieldCodec.ForUInt32(34);
  private readonly pbc::RepeatedField<uint> dstUids_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> DstUids {
    get { return dstUids_; }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 5;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PushToHotelMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PushToHotelMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PushType != other.PushType) return false;
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if(!dstUids_.Equals(other.dstUids_)) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PushType != 0) hash ^= PushType.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    hash ^= dstUids_.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PushType != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PushType);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    dstUids_.WriteTo(output, _repeated_dstUids_codec);
    if (CpProto.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PushType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PushType);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    size += dstUids_.CalculateSize(_repeated_dstUids_codec);
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PushToHotelMsg other) {
    if (other == null) {
      return;
    }
    if (other.PushType != 0) {
      PushType = other.PushType;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    dstUids_.Add(other.dstUids_);
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          pushType_ = (global::PushMsgType) input.ReadEnum();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 34:
        case 32: {
          dstUids_.AddEntriesFrom(input, _repeated_dstUids_codec);
          break;
        }
        case 42: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
