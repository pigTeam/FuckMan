// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Stream {

  /// <summary>Holder for reflection information generated from stream.proto</summary>
  public static partial class StreamReflection {

    #region Descriptor
    /// <summary>File descriptor for stream.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StreamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzdHJlYW0ucHJvdG8SBnN0cmVhbRoMc2ltcGxlLnByb3RvIlYKCUhlYXJ0",
            "QmVhdBILCgNzZXEYASABKA0SCwoDY21kGAIgASgNEg8KB3ZlcnNpb24YAyAB",
            "KA0SEAoIdmVyc2lvbnAYBCABKA0SDAoEYnVzaRgFIAEoDSJmCgtQcm90b0hl",
            "YWRlchIMCgRzaXplGAEgASgNEgsKA3NlcRgCIAEoDRILCgNjbWQYAyABKA0S",
            "DwoHdmVyc2lvbhgEIAEoDRIQCgh2ZXJzaW9ucBgFIAEoDRIMCgRidXNpGAYg",
            "ASgNIpoCCgVTY29yZRIJCgFhGAEgASgNEgkKAWIYAiABKA0SCQoBYxgDIAEo",
            "DRIPCgdleHRfbnVtGAQgASgNEhEKCWV4dF9pbnRfMBgFIAEoBRIRCglleHRf",
            "aW50XzEYBiABKAUSEQoJZXh0X2ludF8yGAcgASgFEhEKCWV4dF9pbnRfMxgI",
            "IAEoBRIRCglleHRfaW50XzQYCSABKAUSEQoJZXh0X2ludF81GAogASgFEhEK",
            "CWV4dF9pbnRfNhgLIAEoBRIRCglleHRfaW50XzcYDCABKAUSEQoJZXh0X2lu",
            "dF84GA0gASgFEhEKCWV4dF9pbnRfORgOIAEoBRIRCglhcmJpdHJhdGUYDyAB",
            "KAkSDgoGdXNlcklEGBAgASgNInsKBlBsYXllchIOCgZ1c2VySUQYASABKA0S",
            "DgoGc3RhdHVzGAIgASgNEhwKBXNjb3JlGAMgASgLMg0uc3RyZWFtLlNjb3Jl",
            "EhMKC29yaWdpblNjb3JlGAQgASgNEg0KBVJhbmdlGAUgASgNEg8KB2lzUm9i",
            "b3QYBiABKAgivAEKBFJvb20SDgoGcm9vbUlEGAEgASgNEg8KB2ZpZWxkSUQY",
            "AiABKA0SDgoGZ2FtZUlEGAMgASgNEg0KBW93bmVyGAQgASgNEg4KBnN0YXR1",
            "cxgFIAEoDRINCgVjb3VudBgGIAEoDRIPCgdyb3VuZElEGAcgASgNEg8KB3Rp",
            "bWVySUQYCCABKA0SEgoKbWF0Y2hUaW1lcxgJIAEoDRIfCgdwbGF5ZXJzGAog",
            "AygLMg4uc3RyZWFtLlBsYXllciKPAQoEVXNlchIPCgd1c2VyX2lkGAEgASgN",
            "Eg8KB2dhbWVfaWQYAiABKA0SEwoLdmVyc2lvbl9zZGsYAyABKA0SFAoMdmVy",
            "c2lvbl9nYW1lGAQgASgNEhUKDWNvbm5lY3Rpb25faWQYBSABKAQSEgoKc2Vy",
            "dmljZV9pZBgGIAEoDRIPCgdyb29tX2lkGAcgASgNIosBCghVc2VySW5mbxIO",
            "CgZ1c2VySUQYASABKA0SDQoFdG9rZW4YAiABKAkSEAoIbmlja05hbWUYAyAB",
            "KAkSDgoGYXZhdGFyGAQgASgJEg4KBm93bmVJRBgFIAEoDRIPCgdpc1JvYm90",
            "GAYgASgNEg4KBnN0YXR1cxgHIAEoDRINCgVncmFkZRgIIAEoDSJ9CglNYXRj",
            "aEluZm8SDgoGdXNlcklEGAEgASgNEg8KB2ZpZWxkSUQYAiABKA0SDAoEZmxh",
            "ZxgDIAEoDRIRCgltYXRjaFR5cGUYBCABKA0SDgoGcm9vbUlEGAUgASgNEg8K",
            "B2lubmVySUQYBiABKAQSDQoFZXJybm8YByABKA0iNgoFTWF0Y2gSDwoHZmll",
            "bGRJRBgBIAEoDRIMCgRmbGFnGAIgASgNEg4KBnVzZXJJRBgDIAEoDSJOCghN",
            "YXRjaEFjaxIOCgZzdGF0dXMYASABKA0SDgoGcm9vbUlEGAIgASgNEiIKCHVz",
            "ZXJMaXN0GAMgAygLMhAuc3RyZWFtLlVzZXJJbmZvIhoKCEV4aXRSb29tEg4K",
            "BnVzZXJJRBgBIAEoDSItCgtFeGl0Um9vbUFjaxIOCgZzdGF0dXMYASABKA0S",
            "DgoGcm9vbUlEGAIgASgNImkKDk5vdGljZVVzZXJKb2luEiMKBmhlYWRlchgB",
            "IAEoCzITLnN0cmVhbS5Qcm90b0hlYWRlchIOCgZyb29tSUQYAiABKA0SIgoI",
            "dXNlckluZm8YAyABKAsyEC5zdHJlYW0uVXNlckluZm8iVgoPTm90aWNlVXNl",
            "ckxlYXZlEiMKBmhlYWRlchgBIAEoCzITLnN0cmVhbS5Qcm90b0hlYWRlchIO",
            "CgZyb29tSUQYAiABKA0SDgoGdXNlcklEGAMgASgNImsKEE5vdGljZVVzZXJT",
            "dGF0dXMSIwoGaGVhZGVyGAEgASgLMhMuc3RyZWFtLlByb3RvSGVhZGVyEg4K",
            "BnJvb21JRBgCIAEoDRIiCgh1c2VyTGlzdBgDIAMoCzIQLnN0cmVhbS5Vc2Vy",
            "SW5mbzJGCghDU1N0cmVhbRI6CgZTdHJlYW0SFS5zdHJlYW0uUGFja2FnZS5G",
            "cmFtZRoVLnN0cmVhbS5QYWNrYWdlLkZyYW1lKAEwAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Stream.SimpleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.HeartBeat), global::Stream.HeartBeat.Parser, new[]{ "Seq", "Cmd", "Version", "Versionp", "Busi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.ProtoHeader), global::Stream.ProtoHeader.Parser, new[]{ "Size", "Seq", "Cmd", "Version", "Versionp", "Busi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.Score), global::Stream.Score.Parser, new[]{ "A", "B", "C", "ExtNum", "ExtInt0", "ExtInt1", "ExtInt2", "ExtInt3", "ExtInt4", "ExtInt5", "ExtInt6", "ExtInt7", "ExtInt8", "ExtInt9", "Arbitrate", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.Player), global::Stream.Player.Parser, new[]{ "UserID", "Status", "Score", "OriginScore", "Range", "IsRobot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.Room), global::Stream.Room.Parser, new[]{ "RoomID", "FieldID", "GameID", "Owner", "Status", "Count", "RoundID", "TimerID", "MatchTimes", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.User), global::Stream.User.Parser, new[]{ "UserId", "GameId", "VersionSdk", "VersionGame", "ConnectionId", "ServiceId", "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.UserInfo), global::Stream.UserInfo.Parser, new[]{ "UserID", "Token", "NickName", "Avatar", "OwneID", "IsRobot", "Status", "Grade" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.MatchInfo), global::Stream.MatchInfo.Parser, new[]{ "UserID", "FieldID", "Flag", "MatchType", "RoomID", "InnerID", "Errno" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.Match), global::Stream.Match.Parser, new[]{ "FieldID", "Flag", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.MatchAck), global::Stream.MatchAck.Parser, new[]{ "Status", "RoomID", "UserList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.ExitRoom), global::Stream.ExitRoom.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.ExitRoomAck), global::Stream.ExitRoomAck.Parser, new[]{ "Status", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.NoticeUserJoin), global::Stream.NoticeUserJoin.Parser, new[]{ "Header", "RoomID", "UserInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.NoticeUserLeave), global::Stream.NoticeUserLeave.Parser, new[]{ "Header", "RoomID", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Stream.NoticeUserStatus), global::Stream.NoticeUserStatus.Parser, new[]{ "Header", "RoomID", "UserList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HeartBeat : pb::IMessage<HeartBeat> {
    private static readonly pb::MessageParser<HeartBeat> _parser = new pb::MessageParser<HeartBeat>(() => new HeartBeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat(HeartBeat other) : this() {
      seq_ = other.seq_;
      cmd_ = other.cmd_;
      version_ = other.version_;
      versionp_ = other.versionp_;
      busi_ = other.busi_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeat Clone() {
      return new HeartBeat(this);
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 1;
    private uint seq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 2;
    private uint cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "versionp" field.</summary>
    public const int VersionpFieldNumber = 4;
    private uint versionp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Versionp {
      get { return versionp_; }
      set {
        versionp_ = value;
      }
    }

    /// <summary>Field number for the "busi" field.</summary>
    public const int BusiFieldNumber = 5;
    private uint busi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Busi {
      get { return busi_; }
      set {
        busi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seq != other.Seq) return false;
      if (Cmd != other.Cmd) return false;
      if (Version != other.Version) return false;
      if (Versionp != other.Versionp) return false;
      if (Busi != other.Busi) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seq != 0) hash ^= Seq.GetHashCode();
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Versionp != 0) hash ^= Versionp.GetHashCode();
      if (Busi != 0) hash ^= Busi.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Seq);
      }
      if (Cmd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Cmd);
      }
      if (Version != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Version);
      }
      if (Versionp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Versionp);
      }
      if (Busi != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Busi);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
      }
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cmd);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Versionp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Versionp);
      }
      if (Busi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Busi);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeat other) {
      if (other == null) {
        return;
      }
      if (other.Seq != 0) {
        Seq = other.Seq;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Versionp != 0) {
        Versionp = other.Versionp;
      }
      if (other.Busi != 0) {
        Busi = other.Busi;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Seq = input.ReadUInt32();
            break;
          }
          case 16: {
            Cmd = input.ReadUInt32();
            break;
          }
          case 24: {
            Version = input.ReadUInt32();
            break;
          }
          case 32: {
            Versionp = input.ReadUInt32();
            break;
          }
          case 40: {
            Busi = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoHeader : pb::IMessage<ProtoHeader> {
    private static readonly pb::MessageParser<ProtoHeader> _parser = new pb::MessageParser<ProtoHeader>(() => new ProtoHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHeader(ProtoHeader other) : this() {
      size_ = other.size_;
      seq_ = other.seq_;
      cmd_ = other.cmd_;
      version_ = other.version_;
      versionp_ = other.versionp_;
      busi_ = other.busi_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoHeader Clone() {
      return new ProtoHeader(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private uint size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 2;
    private uint seq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seq {
      get { return seq_; }
      set {
        seq_ = value;
      }
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 3;
    private uint cmd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "versionp" field.</summary>
    public const int VersionpFieldNumber = 5;
    private uint versionp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Versionp {
      get { return versionp_; }
      set {
        versionp_ = value;
      }
    }

    /// <summary>Field number for the "busi" field.</summary>
    public const int BusiFieldNumber = 6;
    private uint busi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Busi {
      get { return busi_; }
      set {
        busi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (Seq != other.Seq) return false;
      if (Cmd != other.Cmd) return false;
      if (Version != other.Version) return false;
      if (Versionp != other.Versionp) return false;
      if (Busi != other.Busi) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Seq != 0) hash ^= Seq.GetHashCode();
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Versionp != 0) hash ^= Versionp.GetHashCode();
      if (Busi != 0) hash ^= Busi.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Size);
      }
      if (Seq != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Seq);
      }
      if (Cmd != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Cmd);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Version);
      }
      if (Versionp != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Versionp);
      }
      if (Busi != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Busi);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (Seq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seq);
      }
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Cmd);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (Versionp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Versionp);
      }
      if (Busi != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Busi);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoHeader other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Seq != 0) {
        Seq = other.Seq;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Versionp != 0) {
        Versionp = other.Versionp;
      }
      if (other.Busi != 0) {
        Busi = other.Busi;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Size = input.ReadUInt32();
            break;
          }
          case 16: {
            Seq = input.ReadUInt32();
            break;
          }
          case 24: {
            Cmd = input.ReadUInt32();
            break;
          }
          case 32: {
            Version = input.ReadUInt32();
            break;
          }
          case 40: {
            Versionp = input.ReadUInt32();
            break;
          }
          case 48: {
            Busi = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Score : pb::IMessage<Score> {
    private static readonly pb::MessageParser<Score> _parser = new pb::MessageParser<Score>(() => new Score());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Score> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Score() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Score(Score other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
      extNum_ = other.extNum_;
      extInt0_ = other.extInt0_;
      extInt1_ = other.extInt1_;
      extInt2_ = other.extInt2_;
      extInt3_ = other.extInt3_;
      extInt4_ = other.extInt4_;
      extInt5_ = other.extInt5_;
      extInt6_ = other.extInt6_;
      extInt7_ = other.extInt7_;
      extInt8_ = other.extInt8_;
      extInt9_ = other.extInt9_;
      arbitrate_ = other.arbitrate_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Score Clone() {
      return new Score(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private uint a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private uint b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "c" field.</summary>
    public const int CFieldNumber = 3;
    private uint c_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint C {
      get { return c_; }
      set {
        c_ = value;
      }
    }

    /// <summary>Field number for the "ext_num" field.</summary>
    public const int ExtNumFieldNumber = 4;
    private uint extNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExtNum {
      get { return extNum_; }
      set {
        extNum_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_0" field.</summary>
    public const int ExtInt0FieldNumber = 5;
    private int extInt0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt0 {
      get { return extInt0_; }
      set {
        extInt0_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_1" field.</summary>
    public const int ExtInt1FieldNumber = 6;
    private int extInt1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt1 {
      get { return extInt1_; }
      set {
        extInt1_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_2" field.</summary>
    public const int ExtInt2FieldNumber = 7;
    private int extInt2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt2 {
      get { return extInt2_; }
      set {
        extInt2_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_3" field.</summary>
    public const int ExtInt3FieldNumber = 8;
    private int extInt3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt3 {
      get { return extInt3_; }
      set {
        extInt3_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_4" field.</summary>
    public const int ExtInt4FieldNumber = 9;
    private int extInt4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt4 {
      get { return extInt4_; }
      set {
        extInt4_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_5" field.</summary>
    public const int ExtInt5FieldNumber = 10;
    private int extInt5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt5 {
      get { return extInt5_; }
      set {
        extInt5_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_6" field.</summary>
    public const int ExtInt6FieldNumber = 11;
    private int extInt6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt6 {
      get { return extInt6_; }
      set {
        extInt6_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_7" field.</summary>
    public const int ExtInt7FieldNumber = 12;
    private int extInt7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt7 {
      get { return extInt7_; }
      set {
        extInt7_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_8" field.</summary>
    public const int ExtInt8FieldNumber = 13;
    private int extInt8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt8 {
      get { return extInt8_; }
      set {
        extInt8_ = value;
      }
    }

    /// <summary>Field number for the "ext_int_9" field.</summary>
    public const int ExtInt9FieldNumber = 14;
    private int extInt9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtInt9 {
      get { return extInt9_; }
      set {
        extInt9_ = value;
      }
    }

    /// <summary>Field number for the "arbitrate" field.</summary>
    public const int ArbitrateFieldNumber = 15;
    private string arbitrate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arbitrate {
      get { return arbitrate_; }
      set {
        arbitrate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 16;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Score);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Score other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      if (ExtNum != other.ExtNum) return false;
      if (ExtInt0 != other.ExtInt0) return false;
      if (ExtInt1 != other.ExtInt1) return false;
      if (ExtInt2 != other.ExtInt2) return false;
      if (ExtInt3 != other.ExtInt3) return false;
      if (ExtInt4 != other.ExtInt4) return false;
      if (ExtInt5 != other.ExtInt5) return false;
      if (ExtInt6 != other.ExtInt6) return false;
      if (ExtInt7 != other.ExtInt7) return false;
      if (ExtInt8 != other.ExtInt8) return false;
      if (ExtInt9 != other.ExtInt9) return false;
      if (Arbitrate != other.Arbitrate) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (C != 0) hash ^= C.GetHashCode();
      if (ExtNum != 0) hash ^= ExtNum.GetHashCode();
      if (ExtInt0 != 0) hash ^= ExtInt0.GetHashCode();
      if (ExtInt1 != 0) hash ^= ExtInt1.GetHashCode();
      if (ExtInt2 != 0) hash ^= ExtInt2.GetHashCode();
      if (ExtInt3 != 0) hash ^= ExtInt3.GetHashCode();
      if (ExtInt4 != 0) hash ^= ExtInt4.GetHashCode();
      if (ExtInt5 != 0) hash ^= ExtInt5.GetHashCode();
      if (ExtInt6 != 0) hash ^= ExtInt6.GetHashCode();
      if (ExtInt7 != 0) hash ^= ExtInt7.GetHashCode();
      if (ExtInt8 != 0) hash ^= ExtInt8.GetHashCode();
      if (ExtInt9 != 0) hash ^= ExtInt9.GetHashCode();
      if (Arbitrate.Length != 0) hash ^= Arbitrate.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(A);
      }
      if (B != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(B);
      }
      if (C != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(C);
      }
      if (ExtNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ExtNum);
      }
      if (ExtInt0 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ExtInt0);
      }
      if (ExtInt1 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExtInt1);
      }
      if (ExtInt2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExtInt2);
      }
      if (ExtInt3 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ExtInt3);
      }
      if (ExtInt4 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ExtInt4);
      }
      if (ExtInt5 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ExtInt5);
      }
      if (ExtInt6 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ExtInt6);
      }
      if (ExtInt7 != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ExtInt7);
      }
      if (ExtInt8 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ExtInt8);
      }
      if (ExtInt9 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ExtInt9);
      }
      if (Arbitrate.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Arbitrate);
      }
      if (UserID != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(A);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
      }
      if (C != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(C);
      }
      if (ExtNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtNum);
      }
      if (ExtInt0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt0);
      }
      if (ExtInt1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt1);
      }
      if (ExtInt2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt2);
      }
      if (ExtInt3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt3);
      }
      if (ExtInt4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt4);
      }
      if (ExtInt5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt5);
      }
      if (ExtInt6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt6);
      }
      if (ExtInt7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt7);
      }
      if (ExtInt8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt8);
      }
      if (ExtInt9 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtInt9);
      }
      if (Arbitrate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arbitrate);
      }
      if (UserID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Score other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0) {
        B = other.B;
      }
      if (other.C != 0) {
        C = other.C;
      }
      if (other.ExtNum != 0) {
        ExtNum = other.ExtNum;
      }
      if (other.ExtInt0 != 0) {
        ExtInt0 = other.ExtInt0;
      }
      if (other.ExtInt1 != 0) {
        ExtInt1 = other.ExtInt1;
      }
      if (other.ExtInt2 != 0) {
        ExtInt2 = other.ExtInt2;
      }
      if (other.ExtInt3 != 0) {
        ExtInt3 = other.ExtInt3;
      }
      if (other.ExtInt4 != 0) {
        ExtInt4 = other.ExtInt4;
      }
      if (other.ExtInt5 != 0) {
        ExtInt5 = other.ExtInt5;
      }
      if (other.ExtInt6 != 0) {
        ExtInt6 = other.ExtInt6;
      }
      if (other.ExtInt7 != 0) {
        ExtInt7 = other.ExtInt7;
      }
      if (other.ExtInt8 != 0) {
        ExtInt8 = other.ExtInt8;
      }
      if (other.ExtInt9 != 0) {
        ExtInt9 = other.ExtInt9;
      }
      if (other.Arbitrate.Length != 0) {
        Arbitrate = other.Arbitrate;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            A = input.ReadUInt32();
            break;
          }
          case 16: {
            B = input.ReadUInt32();
            break;
          }
          case 24: {
            C = input.ReadUInt32();
            break;
          }
          case 32: {
            ExtNum = input.ReadUInt32();
            break;
          }
          case 40: {
            ExtInt0 = input.ReadInt32();
            break;
          }
          case 48: {
            ExtInt1 = input.ReadInt32();
            break;
          }
          case 56: {
            ExtInt2 = input.ReadInt32();
            break;
          }
          case 64: {
            ExtInt3 = input.ReadInt32();
            break;
          }
          case 72: {
            ExtInt4 = input.ReadInt32();
            break;
          }
          case 80: {
            ExtInt5 = input.ReadInt32();
            break;
          }
          case 88: {
            ExtInt6 = input.ReadInt32();
            break;
          }
          case 96: {
            ExtInt7 = input.ReadInt32();
            break;
          }
          case 104: {
            ExtInt8 = input.ReadInt32();
            break;
          }
          case 112: {
            ExtInt9 = input.ReadInt32();
            break;
          }
          case 122: {
            Arbitrate = input.ReadString();
            break;
          }
          case 128: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      userID_ = other.userID_;
      status_ = other.status_;
      Score = other.score_ != null ? other.Score.Clone() : null;
      originScore_ = other.originScore_;
      range_ = other.range_;
      isRobot_ = other.isRobot_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private global::Stream.Score score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stream.Score Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "originScore" field.</summary>
    public const int OriginScoreFieldNumber = 4;
    private uint originScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginScore {
      get { return originScore_; }
      set {
        originScore_ = value;
      }
    }

    /// <summary>Field number for the "Range" field.</summary>
    public const int RangeFieldNumber = 5;
    private uint range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "isRobot" field.</summary>
    public const int IsRobotFieldNumber = 6;
    private bool isRobot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRobot {
      get { return isRobot_; }
      set {
        isRobot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Score, other.Score)) return false;
      if (OriginScore != other.OriginScore) return false;
      if (Range != other.Range) return false;
      if (IsRobot != other.IsRobot) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (score_ != null) hash ^= Score.GetHashCode();
      if (OriginScore != 0) hash ^= OriginScore.GetHashCode();
      if (Range != 0) hash ^= Range.GetHashCode();
      if (IsRobot != false) hash ^= IsRobot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Status);
      }
      if (score_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Score);
      }
      if (OriginScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OriginScore);
      }
      if (Range != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Range);
      }
      if (IsRobot != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsRobot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (score_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
      }
      if (OriginScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginScore);
      }
      if (Range != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Range);
      }
      if (IsRobot != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.score_ != null) {
        if (score_ == null) {
          score_ = new global::Stream.Score();
        }
        Score.MergeFrom(other.Score);
      }
      if (other.OriginScore != 0) {
        OriginScore = other.OriginScore;
      }
      if (other.Range != 0) {
        Range = other.Range;
      }
      if (other.IsRobot != false) {
        IsRobot = other.IsRobot;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = input.ReadUInt32();
            break;
          }
          case 26: {
            if (score_ == null) {
              score_ = new global::Stream.Score();
            }
            input.ReadMessage(score_);
            break;
          }
          case 32: {
            OriginScore = input.ReadUInt32();
            break;
          }
          case 40: {
            Range = input.ReadUInt32();
            break;
          }
          case 48: {
            IsRobot = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      roomID_ = other.roomID_;
      fieldID_ = other.fieldID_;
      gameID_ = other.gameID_;
      owner_ = other.owner_;
      status_ = other.status_;
      count_ = other.count_;
      roundID_ = other.roundID_;
      timerID_ = other.timerID_;
      matchTimes_ = other.matchTimes_;
      players_ = other.players_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 1;
    private uint roomID_;
    /// <summary>
    ///房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "fieldID" field.</summary>
    public const int FieldIDFieldNumber = 2;
    private uint fieldID_;
    /// <summary>
    ///场次ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FieldID {
      get { return fieldID_; }
      set {
        fieldID_ = value;
      }
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 3;
    private uint gameID_;
    /// <summary>
    ///游戏ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 4;
    private uint owner_;
    /// <summary>
    ///房主ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private uint status_;
    /// <summary>
    ///房间状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 6;
    private uint count_;
    /// <summary>
    ///开赛人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "roundID" field.</summary>
    public const int RoundIDFieldNumber = 7;
    private uint roundID_;
    /// <summary>
    ///当前roundID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoundID {
      get { return roundID_; }
      set {
        roundID_ = value;
      }
    }

    /// <summary>Field number for the "timerID" field.</summary>
    public const int TimerIDFieldNumber = 8;
    private uint timerID_;
    /// <summary>
    ///时间id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimerID {
      get { return timerID_; }
      set {
        timerID_ = value;
      }
    }

    /// <summary>Field number for the "matchTimes" field.</summary>
    public const int MatchTimesFieldNumber = 9;
    private uint matchTimes_;
    /// <summary>
    ///匹配次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchTimes {
      get { return matchTimes_; }
      set {
        matchTimes_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Stream.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(82, global::Stream.Player.Parser);
    private readonly pbc::RepeatedField<global::Stream.Player> players_ = new pbc::RepeatedField<global::Stream.Player>();
    /// <summary>
    ///用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stream.Player> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomID != other.RoomID) return false;
      if (FieldID != other.FieldID) return false;
      if (GameID != other.GameID) return false;
      if (Owner != other.Owner) return false;
      if (Status != other.Status) return false;
      if (Count != other.Count) return false;
      if (RoundID != other.RoundID) return false;
      if (TimerID != other.TimerID) return false;
      if (MatchTimes != other.MatchTimes) return false;
      if(!players_.Equals(other.players_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (FieldID != 0) hash ^= FieldID.GetHashCode();
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (Owner != 0) hash ^= Owner.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (RoundID != 0) hash ^= RoundID.GetHashCode();
      if (TimerID != 0) hash ^= TimerID.GetHashCode();
      if (MatchTimes != 0) hash ^= MatchTimes.GetHashCode();
      hash ^= players_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomID);
      }
      if (FieldID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FieldID);
      }
      if (GameID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(GameID);
      }
      if (Owner != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Owner);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Status);
      }
      if (Count != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Count);
      }
      if (RoundID != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RoundID);
      }
      if (TimerID != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TimerID);
      }
      if (MatchTimes != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MatchTimes);
      }
      players_.WriteTo(output, _repeated_players_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
      }
      if (FieldID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FieldID);
      }
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (Owner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (RoundID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundID);
      }
      if (TimerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimerID);
      }
      if (MatchTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchTimes);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.FieldID != 0) {
        FieldID = other.FieldID;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.Owner != 0) {
        Owner = other.Owner;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.RoundID != 0) {
        RoundID = other.RoundID;
      }
      if (other.TimerID != 0) {
        TimerID = other.TimerID;
      }
      if (other.MatchTimes != 0) {
        MatchTimes = other.MatchTimes;
      }
      players_.Add(other.players_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomID = input.ReadUInt32();
            break;
          }
          case 16: {
            FieldID = input.ReadUInt32();
            break;
          }
          case 24: {
            GameID = input.ReadUInt32();
            break;
          }
          case 32: {
            Owner = input.ReadUInt32();
            break;
          }
          case 40: {
            Status = input.ReadUInt32();
            break;
          }
          case 48: {
            Count = input.ReadUInt32();
            break;
          }
          case 56: {
            RoundID = input.ReadUInt32();
            break;
          }
          case 64: {
            TimerID = input.ReadUInt32();
            break;
          }
          case 72: {
            MatchTimes = input.ReadUInt32();
            break;
          }
          case 82: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      userId_ = other.userId_;
      gameId_ = other.gameId_;
      versionSdk_ = other.versionSdk_;
      versionGame_ = other.versionGame_;
      connectionId_ = other.connectionId_;
      serviceId_ = other.serviceId_;
      roomId_ = other.roomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    /// TODO _id 命名规则统一改为ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private uint gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "version_sdk" field.</summary>
    public const int VersionSdkFieldNumber = 3;
    private uint versionSdk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VersionSdk {
      get { return versionSdk_; }
      set {
        versionSdk_ = value;
      }
    }

    /// <summary>Field number for the "version_game" field.</summary>
    public const int VersionGameFieldNumber = 4;
    private uint versionGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VersionGame {
      get { return versionGame_; }
      set {
        versionGame_ = value;
      }
    }

    /// <summary>Field number for the "connection_id" field.</summary>
    public const int ConnectionIdFieldNumber = 5;
    private ulong connectionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ConnectionId {
      get { return connectionId_; }
      set {
        connectionId_ = value;
      }
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 6;
    private uint serviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = value;
      }
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 7;
    private uint roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (GameId != other.GameId) return false;
      if (VersionSdk != other.VersionSdk) return false;
      if (VersionGame != other.VersionGame) return false;
      if (ConnectionId != other.ConnectionId) return false;
      if (ServiceId != other.ServiceId) return false;
      if (RoomId != other.RoomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (VersionSdk != 0) hash ^= VersionSdk.GetHashCode();
      if (VersionGame != 0) hash ^= VersionGame.GetHashCode();
      if (ConnectionId != 0UL) hash ^= ConnectionId.GetHashCode();
      if (ServiceId != 0) hash ^= ServiceId.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (GameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameId);
      }
      if (VersionSdk != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(VersionSdk);
      }
      if (VersionGame != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(VersionGame);
      }
      if (ConnectionId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ConnectionId);
      }
      if (ServiceId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ServiceId);
      }
      if (RoomId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      if (VersionSdk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionSdk);
      }
      if (VersionGame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionGame);
      }
      if (ConnectionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConnectionId);
      }
      if (ServiceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServiceId);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.VersionSdk != 0) {
        VersionSdk = other.VersionSdk;
      }
      if (other.VersionGame != 0) {
        VersionGame = other.VersionGame;
      }
      if (other.ConnectionId != 0UL) {
        ConnectionId = other.ConnectionId;
      }
      if (other.ServiceId != 0) {
        ServiceId = other.ServiceId;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 16: {
            GameId = input.ReadUInt32();
            break;
          }
          case 24: {
            VersionSdk = input.ReadUInt32();
            break;
          }
          case 32: {
            VersionGame = input.ReadUInt32();
            break;
          }
          case 40: {
            ConnectionId = input.ReadUInt64();
            break;
          }
          case 48: {
            ServiceId = input.ReadUInt32();
            break;
          }
          case 56: {
            RoomId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      userID_ = other.userID_;
      token_ = other.token_;
      nickName_ = other.nickName_;
      avatar_ = other.avatar_;
      owneID_ = other.owneID_;
      isRobot_ = other.isRobot_;
      status_ = other.status_;
      grade_ = other.grade_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 3;
    private string nickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 4;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owneID" field.</summary>
    public const int OwneIDFieldNumber = 5;
    private uint owneID_;
    /// <summary>
    ///房主ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OwneID {
      get { return owneID_; }
      set {
        owneID_ = value;
      }
    }

    /// <summary>Field number for the "isRobot" field.</summary>
    public const int IsRobotFieldNumber = 6;
    private uint isRobot_;
    /// <summary>
    ///是否是机器人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsRobot {
      get { return isRobot_; }
      set {
        isRobot_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private uint status_;
    /// <summary>
    ///状态值,0,1,2 默认/准备/开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 8;
    private uint grade_;
    /// <summary>
    ///机器人等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Token != other.Token) return false;
      if (NickName != other.NickName) return false;
      if (Avatar != other.Avatar) return false;
      if (OwneID != other.OwneID) return false;
      if (IsRobot != other.IsRobot) return false;
      if (Status != other.Status) return false;
      if (Grade != other.Grade) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
      if (OwneID != 0) hash ^= OwneID.GetHashCode();
      if (IsRobot != 0) hash ^= IsRobot.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Avatar);
      }
      if (OwneID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(OwneID);
      }
      if (IsRobot != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(IsRobot);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Status);
      }
      if (Grade != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Grade);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (OwneID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwneID);
      }
      if (IsRobot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsRobot);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Grade);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Avatar.Length != 0) {
        Avatar = other.Avatar;
      }
      if (other.OwneID != 0) {
        OwneID = other.OwneID;
      }
      if (other.IsRobot != 0) {
        IsRobot = other.IsRobot;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 34: {
            Avatar = input.ReadString();
            break;
          }
          case 40: {
            OwneID = input.ReadUInt32();
            break;
          }
          case 48: {
            IsRobot = input.ReadUInt32();
            break;
          }
          case 56: {
            Status = input.ReadUInt32();
            break;
          }
          case 64: {
            Grade = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchInfo : pb::IMessage<MatchInfo> {
    private static readonly pb::MessageParser<MatchInfo> _parser = new pb::MessageParser<MatchInfo>(() => new MatchInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchInfo(MatchInfo other) : this() {
      userID_ = other.userID_;
      fieldID_ = other.fieldID_;
      flag_ = other.flag_;
      matchType_ = other.matchType_;
      roomID_ = other.roomID_;
      innerID_ = other.innerID_;
      errno_ = other.errno_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchInfo Clone() {
      return new MatchInfo(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "fieldID" field.</summary>
    public const int FieldIDFieldNumber = 2;
    private uint fieldID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FieldID {
      get { return fieldID_; }
      set {
        fieldID_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 3;
    private uint flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "matchType" field.</summary>
    public const int MatchTypeFieldNumber = 4;
    private uint matchType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchType {
      get { return matchType_; }
      set {
        matchType_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 5;
    private uint roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "innerID" field.</summary>
    public const int InnerIDFieldNumber = 6;
    private ulong innerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InnerID {
      get { return innerID_; }
      set {
        innerID_ = value;
      }
    }

    /// <summary>Field number for the "errno" field.</summary>
    public const int ErrnoFieldNumber = 7;
    private uint errno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errno {
      get { return errno_; }
      set {
        errno_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (FieldID != other.FieldID) return false;
      if (Flag != other.Flag) return false;
      if (MatchType != other.MatchType) return false;
      if (RoomID != other.RoomID) return false;
      if (InnerID != other.InnerID) return false;
      if (Errno != other.Errno) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      if (FieldID != 0) hash ^= FieldID.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (MatchType != 0) hash ^= MatchType.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (InnerID != 0UL) hash ^= InnerID.GetHashCode();
      if (Errno != 0) hash ^= Errno.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
      if (FieldID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FieldID);
      }
      if (Flag != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Flag);
      }
      if (MatchType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MatchType);
      }
      if (RoomID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RoomID);
      }
      if (InnerID != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(InnerID);
      }
      if (Errno != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Errno);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      if (FieldID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FieldID);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      if (MatchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchType);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
      }
      if (InnerID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InnerID);
      }
      if (Errno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Errno);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
      if (other.FieldID != 0) {
        FieldID = other.FieldID;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      if (other.MatchType != 0) {
        MatchType = other.MatchType;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.InnerID != 0UL) {
        InnerID = other.InnerID;
      }
      if (other.Errno != 0) {
        Errno = other.Errno;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
          case 16: {
            FieldID = input.ReadUInt32();
            break;
          }
          case 24: {
            Flag = input.ReadUInt32();
            break;
          }
          case 32: {
            MatchType = input.ReadUInt32();
            break;
          }
          case 40: {
            RoomID = input.ReadUInt32();
            break;
          }
          case 48: {
            InnerID = input.ReadUInt64();
            break;
          }
          case 56: {
            Errno = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Match : pb::IMessage<Match> {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      fieldID_ = other.fieldID_;
      flag_ = other.flag_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "fieldID" field.</summary>
    public const int FieldIDFieldNumber = 1;
    private uint fieldID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FieldID {
      get { return fieldID_; }
      set {
        fieldID_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 2;
    private uint flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldID != other.FieldID) return false;
      if (Flag != other.Flag) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FieldID != 0) hash ^= FieldID.GetHashCode();
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FieldID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FieldID);
      }
      if (Flag != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Flag);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FieldID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FieldID);
      }
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flag);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.FieldID != 0) {
        FieldID = other.FieldID;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FieldID = input.ReadUInt32();
            break;
          }
          case 16: {
            Flag = input.ReadUInt32();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MatchAck : pb::IMessage<MatchAck> {
    private static readonly pb::MessageParser<MatchAck> _parser = new pb::MessageParser<MatchAck>(() => new MatchAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAck(MatchAck other) : this() {
      status_ = other.status_;
      roomID_ = other.roomID_;
      userList_ = other.userList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchAck Clone() {
      return new MatchAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private uint roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userList" field.</summary>
    public const int UserListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stream.UserInfo> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(26, global::Stream.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::Stream.UserInfo> userList_ = new pbc::RepeatedField<global::Stream.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stream.UserInfo> UserList {
      get { return userList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (RoomID != other.RoomID) return false;
      if(!userList_.Equals(other.userList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      hash ^= userList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomID);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      userList_.Add(other.userList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt32();
            break;
          }
          case 26: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExitRoom : pb::IMessage<ExitRoom> {
    private static readonly pb::MessageParser<ExitRoom> _parser = new pb::MessageParser<ExitRoom>(() => new ExitRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExitRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitRoom(ExitRoom other) : this() {
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitRoom Clone() {
      return new ExitRoom(this);
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExitRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExitRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExitRoom other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExitRoomAck : pb::IMessage<ExitRoomAck> {
    private static readonly pb::MessageParser<ExitRoomAck> _parser = new pb::MessageParser<ExitRoomAck>(() => new ExitRoomAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExitRoomAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitRoomAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitRoomAck(ExitRoomAck other) : this() {
      status_ = other.status_;
      roomID_ = other.roomID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExitRoomAck Clone() {
      return new ExitRoomAck(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private uint roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExitRoomAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExitRoomAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (RoomID != other.RoomID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Status);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExitRoomAck other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadUInt32();
            break;
          }
          case 16: {
            RoomID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeUserJoin : pb::IMessage<NoticeUserJoin> {
    private static readonly pb::MessageParser<NoticeUserJoin> _parser = new pb::MessageParser<NoticeUserJoin>(() => new NoticeUserJoin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeUserJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUserJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUserJoin(NoticeUserJoin other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      roomID_ = other.roomID_;
      UserInfo = other.userInfo_ != null ? other.UserInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUserJoin Clone() {
      return new NoticeUserJoin(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Stream.ProtoHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stream.ProtoHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private uint roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userInfo" field.</summary>
    public const int UserInfoFieldNumber = 3;
    private global::Stream.UserInfo userInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stream.UserInfo UserInfo {
      get { return userInfo_; }
      set {
        userInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeUserJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeUserJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (RoomID != other.RoomID) return false;
      if (!object.Equals(UserInfo, other.UserInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (userInfo_ != null) hash ^= UserInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomID);
      }
      if (userInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
      }
      if (userInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeUserJoin other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Stream.ProtoHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.userInfo_ != null) {
        if (userInfo_ == null) {
          userInfo_ = new global::Stream.UserInfo();
        }
        UserInfo.MergeFrom(other.UserInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Stream.ProtoHeader();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            RoomID = input.ReadUInt32();
            break;
          }
          case 26: {
            if (userInfo_ == null) {
              userInfo_ = new global::Stream.UserInfo();
            }
            input.ReadMessage(userInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeUserLeave : pb::IMessage<NoticeUserLeave> {
    private static readonly pb::MessageParser<NoticeUserLeave> _parser = new pb::MessageParser<NoticeUserLeave>(() => new NoticeUserLeave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeUserLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUserLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUserLeave(NoticeUserLeave other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      roomID_ = other.roomID_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUserLeave Clone() {
      return new NoticeUserLeave(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Stream.ProtoHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stream.ProtoHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private uint roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private uint userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeUserLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeUserLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (RoomID != other.RoomID) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (UserID != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomID);
      }
      if (UserID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
      }
      if (UserID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeUserLeave other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Stream.ProtoHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.UserID != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Stream.ProtoHeader();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            RoomID = input.ReadUInt32();
            break;
          }
          case 24: {
            UserID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoticeUserStatus : pb::IMessage<NoticeUserStatus> {
    private static readonly pb::MessageParser<NoticeUserStatus> _parser = new pb::MessageParser<NoticeUserStatus>(() => new NoticeUserStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeUserStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Stream.StreamReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUserStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUserStatus(NoticeUserStatus other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      roomID_ = other.roomID_;
      userList_ = other.userList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUserStatus Clone() {
      return new NoticeUserStatus(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Stream.ProtoHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Stream.ProtoHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private uint roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "userList" field.</summary>
    public const int UserListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Stream.UserInfo> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(26, global::Stream.UserInfo.Parser);
    private readonly pbc::RepeatedField<global::Stream.UserInfo> userList_ = new pbc::RepeatedField<global::Stream.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Stream.UserInfo> UserList {
      get { return userList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeUserStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeUserStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (RoomID != other.RoomID) return false;
      if(!userList_.Equals(other.userList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      hash ^= userList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoomID);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomID);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeUserStatus other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Stream.ProtoHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      userList_.Add(other.userList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Stream.ProtoHeader();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            RoomID = input.ReadUInt32();
            break;
          }
          case 26: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
