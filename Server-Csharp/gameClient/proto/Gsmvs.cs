// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gsmvs.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gsmvs.proto</summary>
public static partial class GsmvsReflection {

  #region Descriptor
  /// <summary>File descriptor for gsmvs.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GsmvsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgtnc212cy5wcm90bxoPZXJyb3Jjb2RlLnByb3RvIk4KC0pvaW5PdmVyUmVx",
          "Eg4KBnJvb21JRBgBIAEoBBIOCgZnYW1lSUQYAiABKA0SDwoHY3BQcm90bxgD",
          "IAEoDBIOCgZ1c2VySUQYBCABKA0iOgoLSm9pbk92ZXJSc3ASGgoGc3RhdHVz",
          "GAEgASgOMgouRXJyb3JDb2RlEg8KB2NwUHJvdG8YAiABKAwiUAoKS2lja1Bs",
          "YXllchIOCgZyb29tSUQYASABKAQSEQoJc3JjVXNlcklEGAIgASgNEg4KBnVz",
          "ZXJJRBgDIAEoDRIPCgdjcFByb3RvGAQgASgMIksKDUtpY2tQbGF5ZXJSc3AS",
          "GgoGc3RhdHVzGAEgASgOMgouRXJyb3JDb2RlEg4KBnVzZXJJRBgCIAEoDRIO",
          "CgZyb29tSUQYAyABKAQiSgoHUmVxdWVzdBIOCgZ1c2VySUQYASABKA0SDgoG",
          "Z2FtZUlEGAIgASgNEg4KBnJvb21JRBgDIAEoBBIPCgdjcFByb3RvGAQgASgM",
          "InMKBVJlcGx5Eg4KBnVzZXJJRBgBIAEoDRIOCgZnYW1lSUQYAiABKA0SDgoG",
          "cm9vbUlEGAMgASgEEg8KB2NwUHJvdG8YBCABKAwSGQoFZXJybm8YBSABKA4y",
          "Ci5FcnJvckNvZGUSDgoGZXJyTXNnGAYgASgJIlkKB1B1c2hNc2cSDgoGdXNl",
          "cklEGAEgASgNEg4KBmdhbWVJRBgCIAEoDRIOCgZyb29tSUQYAyABKAQSDQoF",
          "dXNlcnMYBCADKA0SDwoHY3BQcm90bxgFIAEoDCIyChBHZXRSb29tRGV0YWls",
          "UmVxEg4KBmdhbWVJRBgBIAEoDRIOCgZyb29tSUQYAiABKAQiTwoQR2V0Um9v",
          "bURldGFpbFJzcBIaCgZzdGF0dXMYASABKA4yCi5FcnJvckNvZGUSHwoKcm9v",
          "bURldGFpbBgCIAEoCzILLlJvb21EZXRhaWwiuQEKClJvb21EZXRhaWwSDQoF",
          "c3RhdGUYASABKA0SEQoJbWF4UGxheWVyGAIgASgNEgwKBG1vZGUYAyABKAUS",
          "EAoIY2FuV2F0Y2gYBCABKAUSFAoMcm9vbVByb3BlcnR5GAUgASgMEg0KBW93",
          "bmVyGAYgASgNEhIKCmNyZWF0ZUZsYWcYByABKA0SIAoLcGxheWVySW5mb3MY",
          "CCADKAsyCy5QbGF5ZXJJbmZvEg4KBnJvb21JRBgJIAEoBCIxCgpQbGF5ZXJJ",
          "bmZvEg4KBnVzZXJJRBgBIAEoDRITCgt1c2VyUHJvZmlsZRgCIAEoDCLEAQoN",
          "Q3JlYXRlRXh0SW5mbxIOCgZ1c2VySUQYASABKA0SEwoLdXNlclByb2ZpbGUY",
          "AiABKAwSDgoGcm9vbUlEGAMgASgEEg0KBXN0YXRlGAQgASgNEhEKCW1heFBs",
          "YXllchgFIAEoDRIMCgRtb2RlGAYgASgFEhAKCGNhbldhdGNoGAcgASgFEhQK",
          "DHJvb21Qcm9wZXJ0eRgIIAEoDBISCgpjcmVhdGVGbGFnGAkgASgNEhIKCkNy",
          "ZWF0ZVRpbWUYCiABKAQiVAoLSm9pbkV4dEluZm8SDgoGdXNlcklEGAEgASgN",
          "EhMKC3VzZXJQcm9maWxlGAIgASgMEg4KBnJvb21JRBgDIAEoBBIQCghKb2lu",
          "VHlwZRgEIAEoDSr5AgoKTXZzR3NDbWRJRBIOCgpNdnNDbWROb25lEAASEwoO",
          "TXZzSm9pblJvb21SZXEQsQkSEwoOTXZzSm9pblJvb21Sc3AQsgkSFQoQTXZz",
          "Q3JlYXRlUm9vbVJlcRCzCRIVChBNdnNDcmVhdGVSb29tUnNwELQJEhQKD012",
          "c0xlYXZlUm9vbVJlcRC1CRIUCg9NdnNMZWF2ZVJvb21Sc3AQtgkSGAoTTXZz",
          "R2V0Um9vbURldGFpbFJlcRC5CRIYChNNdnNHZXRSb29tRGV0YWlsUnNwELoJ",
          "EhkKFE12c0dldFJvb21EZXRhaWxQdXNoELsJEhMKDk12c0pvaW5PdmVyUmVx",
          "EL0JEhMKDk12c0pvaW5PdmVyUnNwEL4JEhUKEE12c0tpY2tQbGF5ZXJSZXEQ",
          "lwoSFQoQTXZzS2lja1BsYXllclJzcBCYChIXChJNdnNOZXR3b3JrU3RhdGVS",
          "ZXEQ4AgSFwoSTXZzTmV0d29ya1N0YXRlUnNwEOEIKkUKCVJvb21TdGF0ZRIQ",
          "CgxSb29tU3RhdGVOaWwQABIRCg1Sb29tU3RhdGVPcGVuEAESEwoPUm9vbVN0",
          "YXRlQ2xvc2VkEAJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::ErrorcodeReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MvsGsCmdID), typeof(global::RoomState), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinOverReq), global::JoinOverReq.Parser, new[]{ "RoomID", "GameID", "CpProto", "UserID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinOverRsp), global::JoinOverRsp.Parser, new[]{ "Status", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KickPlayer), global::KickPlayer.Parser, new[]{ "RoomID", "SrcUserID", "UserID", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KickPlayerRsp), global::KickPlayerRsp.Parser, new[]{ "Status", "UserID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Request), global::Request.Parser, new[]{ "UserID", "GameID", "RoomID", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Reply), global::Reply.Parser, new[]{ "UserID", "GameID", "RoomID", "CpProto", "Errno", "ErrMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PushMsg), global::PushMsg.Parser, new[]{ "UserID", "GameID", "RoomID", "Users", "CpProto" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetRoomDetailReq), global::GetRoomDetailReq.Parser, new[]{ "GameID", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetRoomDetailRsp), global::GetRoomDetailRsp.Parser, new[]{ "Status", "RoomDetail" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomDetail), global::RoomDetail.Parser, new[]{ "State", "MaxPlayer", "Mode", "CanWatch", "RoomProperty", "Owner", "CreateFlag", "PlayerInfos", "RoomID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInfo), global::PlayerInfo.Parser, new[]{ "UserID", "UserProfile" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateExtInfo), global::CreateExtInfo.Parser, new[]{ "UserID", "UserProfile", "RoomID", "State", "MaxPlayer", "Mode", "CanWatch", "RoomProperty", "CreateFlag", "CreateTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JoinExtInfo), global::JoinExtInfo.Parser, new[]{ "UserID", "UserProfile", "RoomID", "JoinType" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum MvsGsCmdID {
  [pbr::OriginalName("MvsCmdNone")] MvsCmdNone = 0,
  [pbr::OriginalName("MvsJoinRoomReq")] MvsJoinRoomReq = 1201,
  [pbr::OriginalName("MvsJoinRoomRsp")] MvsJoinRoomRsp = 1202,
  [pbr::OriginalName("MvsCreateRoomReq")] MvsCreateRoomReq = 1203,
  [pbr::OriginalName("MvsCreateRoomRsp")] MvsCreateRoomRsp = 1204,
  [pbr::OriginalName("MvsLeaveRoomReq")] MvsLeaveRoomReq = 1205,
  [pbr::OriginalName("MvsLeaveRoomRsp")] MvsLeaveRoomRsp = 1206,
  /// <summary>
  ///gs 1209 push -> mvs  
  /// </summary>
  [pbr::OriginalName("MvsGetRoomDetailReq")] MvsGetRoomDetailReq = 1209,
  /// <summary>
  ///sdk 1209 -> mvs   mvs 1210 -> sdk
  /// </summary>
  [pbr::OriginalName("MvsGetRoomDetailRsp")] MvsGetRoomDetailRsp = 1210,
  /// <summary>
  ///mvs 1211 push -> gs
  /// </summary>
  [pbr::OriginalName("MvsGetRoomDetailPush")] MvsGetRoomDetailPush = 1211,
  [pbr::OriginalName("MvsJoinOverReq")] MvsJoinOverReq = 1213,
  [pbr::OriginalName("MvsJoinOverRsp")] MvsJoinOverRsp = 1214,
  [pbr::OriginalName("MvsKickPlayerReq")] MvsKickPlayerReq = 1303,
  [pbr::OriginalName("MvsKickPlayerRsp")] MvsKickPlayerRsp = 1304,
  [pbr::OriginalName("MvsNetworkStateReq")] MvsNetworkStateReq = 1120,
  [pbr::OriginalName("MvsNetworkStateRsp")] MvsNetworkStateRsp = 1121,
}

/// <summary>
///房间状态
/// </summary>
public enum RoomState {
  [pbr::OriginalName("RoomStateNil")] Nil = 0,
  [pbr::OriginalName("RoomStateOpen")] Open = 1,
  [pbr::OriginalName("RoomStateClosed")] Closed = 2,
}

#endregion

#region Messages
/// <summary>
///gs->mvs
/// </summary>
public sealed partial class JoinOverReq : pb::IMessage<JoinOverReq> {
  private static readonly pb::MessageParser<JoinOverReq> _parser = new pb::MessageParser<JoinOverReq>(() => new JoinOverReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JoinOverReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverReq(JoinOverReq other) : this() {
    roomID_ = other.roomID_;
    gameID_ = other.gameID_;
    cpProto_ = other.cpProto_;
    userID_ = other.userID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverReq Clone() {
    return new JoinOverReq(this);
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 3;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 4;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JoinOverReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JoinOverReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (GameID != other.GameID) return false;
    if (CpProto != other.CpProto) return false;
    if (UserID != other.UserID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoomID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(CpProto);
    }
    if (UserID != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(UserID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JoinOverReq other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 26: {
          CpProto = input.ReadBytes();
          break;
        }
        case 32: {
          UserID = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class JoinOverRsp : pb::IMessage<JoinOverRsp> {
  private static readonly pb::MessageParser<JoinOverRsp> _parser = new pb::MessageParser<JoinOverRsp>(() => new JoinOverRsp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JoinOverRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverRsp(JoinOverRsp other) : this() {
    status_ = other.status_;
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinOverRsp Clone() {
    return new JoinOverRsp(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ErrorCode status_ = 0;
  /// <summary>
  ///200.成功  403.房间关闭  404.房间不存在  500.服务器错误
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 2;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JoinOverRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JoinOverRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JoinOverRsp other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 18: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
///gs->mvs
/// </summary>
public sealed partial class KickPlayer : pb::IMessage<KickPlayer> {
  private static readonly pb::MessageParser<KickPlayer> _parser = new pb::MessageParser<KickPlayer>(() => new KickPlayer());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KickPlayer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayer(KickPlayer other) : this() {
    roomID_ = other.roomID_;
    srcUserID_ = other.srcUserID_;
    userID_ = other.userID_;
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayer Clone() {
    return new KickPlayer(this);
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private ulong roomID_;
  /// <summary>
  /// 房间ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "srcUserID" field.</summary>
  public const int SrcUserIDFieldNumber = 2;
  private uint srcUserID_;
  /// <summary>
  /// 踢人者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SrcUserID {
    get { return srcUserID_; }
    set {
      srcUserID_ = value;
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 3;
  private uint userID_;
  /// <summary>
  /// 被踢者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 4;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  /// <summary>
  /// 客户端自定义内容
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KickPlayer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KickPlayer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (SrcUserID != other.SrcUserID) return false;
    if (UserID != other.UserID) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (SrcUserID != 0) hash ^= SrcUserID.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoomID);
    }
    if (SrcUserID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(SrcUserID);
    }
    if (UserID != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(UserID);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (SrcUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcUserID);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KickPlayer other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.SrcUserID != 0) {
      SrcUserID = other.SrcUserID;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 16: {
          SrcUserID = input.ReadUInt32();
          break;
        }
        case 24: {
          UserID = input.ReadUInt32();
          break;
        }
        case 34: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class KickPlayerRsp : pb::IMessage<KickPlayerRsp> {
  private static readonly pb::MessageParser<KickPlayerRsp> _parser = new pb::MessageParser<KickPlayerRsp>(() => new KickPlayerRsp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KickPlayerRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayerRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayerRsp(KickPlayerRsp other) : this() {
    status_ = other.status_;
    userID_ = other.userID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KickPlayerRsp Clone() {
    return new KickPlayerRsp(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ErrorCode status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 2;
  private uint userID_;
  /// <summary>
  /// 被踢者
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  /// <summary>
  /// 房间ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KickPlayerRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KickPlayerRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (UserID != other.UserID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (UserID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(UserID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KickPlayerRsp other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 16: {
          UserID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///mvs->gs
/// </summary>
public sealed partial class Request : pb::IMessage<Request> {
  private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request(Request other) : this() {
    userID_ = other.userID_;
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request Clone() {
    return new Request(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 4;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Request other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 34: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class Reply : pb::IMessage<Reply> {
  private static readonly pb::MessageParser<Reply> _parser = new pb::MessageParser<Reply>(() => new Reply());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Reply> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reply() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reply(Reply other) : this() {
    userID_ = other.userID_;
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    cpProto_ = other.cpProto_;
    errno_ = other.errno_;
    errMsg_ = other.errMsg_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reply Clone() {
    return new Reply(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 4;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "errno" field.</summary>
  public const int ErrnoFieldNumber = 5;
  private global::ErrorCode errno_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Errno {
    get { return errno_; }
    set {
      errno_ = value;
    }
  }

  /// <summary>Field number for the "errMsg" field.</summary>
  public const int ErrMsgFieldNumber = 6;
  private string errMsg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ErrMsg {
    get { return errMsg_; }
    set {
      errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Reply);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Reply other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if (CpProto != other.CpProto) return false;
    if (Errno != other.Errno) return false;
    if (ErrMsg != other.ErrMsg) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    if (Errno != 0) hash ^= Errno.GetHashCode();
    if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    if (CpProto.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(CpProto);
    }
    if (Errno != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Errno);
    }
    if (ErrMsg.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(ErrMsg);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    if (Errno != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Errno);
    }
    if (ErrMsg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Reply other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
    if (other.Errno != 0) {
      Errno = other.Errno;
    }
    if (other.ErrMsg.Length != 0) {
      ErrMsg = other.ErrMsg;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 34: {
          CpProto = input.ReadBytes();
          break;
        }
        case 40: {
          errno_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 50: {
          ErrMsg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///gs->mvs
/// </summary>
public sealed partial class PushMsg : pb::IMessage<PushMsg> {
  private static readonly pb::MessageParser<PushMsg> _parser = new pb::MessageParser<PushMsg>(() => new PushMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PushMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushMsg(PushMsg other) : this() {
    userID_ = other.userID_;
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
    users_ = other.users_.Clone();
    cpProto_ = other.cpProto_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PushMsg Clone() {
    return new PushMsg(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 2;
  private uint gameID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "users" field.</summary>
  public const int UsersFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_users_codec
      = pb::FieldCodec.ForUInt32(34);
  private readonly pbc::RepeatedField<uint> users_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Users {
    get { return users_; }
  }

  /// <summary>Field number for the "cpProto" field.</summary>
  public const int CpProtoFieldNumber = 5;
  private pb::ByteString cpProto_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString CpProto {
    get { return cpProto_; }
    set {
      cpProto_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PushMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PushMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    if(!users_.Equals(other.users_)) return false;
    if (CpProto != other.CpProto) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    hash ^= users_.GetHashCode();
    if (CpProto.Length != 0) hash ^= CpProto.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (GameID != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    users_.WriteTo(output, _repeated_users_codec);
    if (CpProto.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(CpProto);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    size += users_.CalculateSize(_repeated_users_codec);
    if (CpProto.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(CpProto);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PushMsg other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    users_.Add(other.users_);
    if (other.CpProto.Length != 0) {
      CpProto = other.CpProto;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 16: {
          GameID = input.ReadUInt32();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 34:
        case 32: {
          users_.AddEntriesFrom(input, _repeated_users_codec);
          break;
        }
        case 42: {
          CpProto = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
///房间详情
/// </summary>
public sealed partial class GetRoomDetailReq : pb::IMessage<GetRoomDetailReq> {
  private static readonly pb::MessageParser<GetRoomDetailReq> _parser = new pb::MessageParser<GetRoomDetailReq>(() => new GetRoomDetailReq());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetRoomDetailReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailReq(GetRoomDetailReq other) : this() {
    gameID_ = other.gameID_;
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailReq Clone() {
    return new GetRoomDetailReq(this);
  }

  /// <summary>Field number for the "gameID" field.</summary>
  public const int GameIDFieldNumber = 1;
  private uint gameID_;
  /// <summary>
  /// 游戏ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GameID {
    get { return gameID_; }
    set {
      gameID_ = value;
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 2;
  private ulong roomID_;
  /// <summary>
  /// 房间ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetRoomDetailReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetRoomDetailReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GameID != other.GameID) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GameID != 0) hash ^= GameID.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GameID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(GameID);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GameID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetRoomDetailReq other) {
    if (other == null) {
      return;
    }
    if (other.GameID != 0) {
      GameID = other.GameID;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          GameID = input.ReadUInt32();
          break;
        }
        case 16: {
          RoomID = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class GetRoomDetailRsp : pb::IMessage<GetRoomDetailRsp> {
  private static readonly pb::MessageParser<GetRoomDetailRsp> _parser = new pb::MessageParser<GetRoomDetailRsp>(() => new GetRoomDetailRsp());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetRoomDetailRsp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailRsp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailRsp(GetRoomDetailRsp other) : this() {
    status_ = other.status_;
    RoomDetail = other.roomDetail_ != null ? other.RoomDetail.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetRoomDetailRsp Clone() {
    return new GetRoomDetailRsp(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ErrorCode status_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "roomDetail" field.</summary>
  public const int RoomDetailFieldNumber = 2;
  private global::RoomDetail roomDetail_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomDetail RoomDetail {
    get { return roomDetail_; }
    set {
      roomDetail_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetRoomDetailRsp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetRoomDetailRsp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (!object.Equals(RoomDetail, other.RoomDetail)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Status != 0) hash ^= Status.GetHashCode();
    if (roomDetail_ != null) hash ^= RoomDetail.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (roomDetail_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RoomDetail);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (roomDetail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomDetail);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetRoomDetailRsp other) {
    if (other == null) {
      return;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.roomDetail_ != null) {
      if (roomDetail_ == null) {
        roomDetail_ = new global::RoomDetail();
      }
      RoomDetail.MergeFrom(other.RoomDetail);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 18: {
          if (roomDetail_ == null) {
            roomDetail_ = new global::RoomDetail();
          }
          input.ReadMessage(roomDetail_);
          break;
        }
      }
    }
  }

}

public sealed partial class RoomDetail : pb::IMessage<RoomDetail> {
  private static readonly pb::MessageParser<RoomDetail> _parser = new pb::MessageParser<RoomDetail>(() => new RoomDetail());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomDetail> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomDetail() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomDetail(RoomDetail other) : this() {
    state_ = other.state_;
    maxPlayer_ = other.maxPlayer_;
    mode_ = other.mode_;
    canWatch_ = other.canWatch_;
    roomProperty_ = other.roomProperty_;
    owner_ = other.owner_;
    createFlag_ = other.createFlag_;
    playerInfos_ = other.playerInfos_.Clone();
    roomID_ = other.roomID_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomDetail Clone() {
    return new RoomDetail(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private uint state_;
  /// <summary>
  /// 开放/关闭
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "maxPlayer" field.</summary>
  public const int MaxPlayerFieldNumber = 2;
  private uint maxPlayer_;
  /// <summary>
  /// 最大人数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxPlayer {
    get { return maxPlayer_; }
    set {
      maxPlayer_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 3;
  private int mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "canWatch" field.</summary>
  public const int CanWatchFieldNumber = 4;
  private int canWatch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CanWatch {
    get { return canWatch_; }
    set {
      canWatch_ = value;
    }
  }

  /// <summary>Field number for the "roomProperty" field.</summary>
  public const int RoomPropertyFieldNumber = 5;
  private pb::ByteString roomProperty_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RoomProperty {
    get { return roomProperty_; }
    set {
      roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 6;
  private uint owner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Owner {
    get { return owner_; }
    set {
      owner_ = value;
    }
  }

  /// <summary>Field number for the "createFlag" field.</summary>
  public const int CreateFlagFieldNumber = 7;
  private uint createFlag_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CreateFlag {
    get { return createFlag_; }
    set {
      createFlag_ = value;
    }
  }

  /// <summary>Field number for the "playerInfos" field.</summary>
  public const int PlayerInfosFieldNumber = 8;
  private static readonly pb::FieldCodec<global::PlayerInfo> _repeated_playerInfos_codec
      = pb::FieldCodec.ForMessage(66, global::PlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::PlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInfo> PlayerInfos {
    get { return playerInfos_; }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 9;
  private ulong roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomDetail);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomDetail other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    if (MaxPlayer != other.MaxPlayer) return false;
    if (Mode != other.Mode) return false;
    if (CanWatch != other.CanWatch) return false;
    if (RoomProperty != other.RoomProperty) return false;
    if (Owner != other.Owner) return false;
    if (CreateFlag != other.CreateFlag) return false;
    if(!playerInfos_.Equals(other.playerInfos_)) return false;
    if (RoomID != other.RoomID) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (State != 0) hash ^= State.GetHashCode();
    if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (CanWatch != 0) hash ^= CanWatch.GetHashCode();
    if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
    if (Owner != 0) hash ^= Owner.GetHashCode();
    if (CreateFlag != 0) hash ^= CreateFlag.GetHashCode();
    hash ^= playerInfos_.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (State != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(State);
    }
    if (MaxPlayer != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(MaxPlayer);
    }
    if (Mode != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Mode);
    }
    if (CanWatch != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CanWatch);
    }
    if (RoomProperty.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(RoomProperty);
    }
    if (Owner != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Owner);
    }
    if (CreateFlag != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(CreateFlag);
    }
    playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
    if (RoomID != 0UL) {
      output.WriteRawTag(72);
      output.WriteUInt64(RoomID);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
    }
    if (MaxPlayer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayer);
    }
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (CanWatch != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanWatch);
    }
    if (RoomProperty.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
    }
    if (Owner != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Owner);
    }
    if (CreateFlag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateFlag);
    }
    size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomDetail other) {
    if (other == null) {
      return;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.MaxPlayer != 0) {
      MaxPlayer = other.MaxPlayer;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.CanWatch != 0) {
      CanWatch = other.CanWatch;
    }
    if (other.RoomProperty.Length != 0) {
      RoomProperty = other.RoomProperty;
    }
    if (other.Owner != 0) {
      Owner = other.Owner;
    }
    if (other.CreateFlag != 0) {
      CreateFlag = other.CreateFlag;
    }
    playerInfos_.Add(other.playerInfos_);
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          State = input.ReadUInt32();
          break;
        }
        case 16: {
          MaxPlayer = input.ReadUInt32();
          break;
        }
        case 24: {
          Mode = input.ReadInt32();
          break;
        }
        case 32: {
          CanWatch = input.ReadInt32();
          break;
        }
        case 42: {
          RoomProperty = input.ReadBytes();
          break;
        }
        case 48: {
          Owner = input.ReadUInt32();
          break;
        }
        case 56: {
          CreateFlag = input.ReadUInt32();
          break;
        }
        case 66: {
          playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
          break;
        }
        case 72: {
          RoomID = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
  private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo(PlayerInfo other) : this() {
    userID_ = other.userID_;
    userProfile_ = other.userProfile_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInfo Clone() {
    return new PlayerInfo(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "userProfile" field.</summary>
  public const int UserProfileFieldNumber = 2;
  private pb::ByteString userProfile_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString UserProfile {
    get { return userProfile_; }
    set {
      userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (UserProfile != other.UserProfile) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (UserProfile.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(UserProfile);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (UserProfile.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.UserProfile.Length != 0) {
      UserProfile = other.UserProfile;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 18: {
          UserProfile = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
///
///房间创建时传给GS的附加信息
/// </summary>
public sealed partial class CreateExtInfo : pb::IMessage<CreateExtInfo> {
  private static readonly pb::MessageParser<CreateExtInfo> _parser = new pb::MessageParser<CreateExtInfo>(() => new CreateExtInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateExtInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateExtInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateExtInfo(CreateExtInfo other) : this() {
    userID_ = other.userID_;
    userProfile_ = other.userProfile_;
    roomID_ = other.roomID_;
    state_ = other.state_;
    maxPlayer_ = other.maxPlayer_;
    mode_ = other.mode_;
    canWatch_ = other.canWatch_;
    roomProperty_ = other.roomProperty_;
    createFlag_ = other.createFlag_;
    createTime_ = other.createTime_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateExtInfo Clone() {
    return new CreateExtInfo(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  /// <summary>
  /// 创建者ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "userProfile" field.</summary>
  public const int UserProfileFieldNumber = 2;
  private pb::ByteString userProfile_ = pb::ByteString.Empty;
  /// <summary>
  /// 创建者Profile
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString UserProfile {
    get { return userProfile_; }
    set {
      userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  /// <summary>
  /// 房间ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private uint state_;
  /// <summary>
  /// 开放/关闭
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "maxPlayer" field.</summary>
  public const int MaxPlayerFieldNumber = 5;
  private uint maxPlayer_;
  /// <summary>
  /// 最大人数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint MaxPlayer {
    get { return maxPlayer_; }
    set {
      maxPlayer_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 6;
  private int mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "canWatch" field.</summary>
  public const int CanWatchFieldNumber = 7;
  private int canWatch_;
  /// <summary>
  /// 是否可观战
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CanWatch {
    get { return canWatch_; }
    set {
      canWatch_ = value;
    }
  }

  /// <summary>Field number for the "roomProperty" field.</summary>
  public const int RoomPropertyFieldNumber = 8;
  private pb::ByteString roomProperty_ = pb::ByteString.Empty;
  /// <summary>
  /// 房间属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString RoomProperty {
    get { return roomProperty_; }
    set {
      roomProperty_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "createFlag" field.</summary>
  public const int CreateFlagFieldNumber = 9;
  private uint createFlag_;
  /// <summary>
  /// 创建途径
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CreateFlag {
    get { return createFlag_; }
    set {
      createFlag_ = value;
    }
  }

  /// <summary>Field number for the "CreateTime" field.</summary>
  public const int CreateTimeFieldNumber = 10;
  private ulong createTime_;
  /// <summary>
  /// 房间创建时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong CreateTime {
    get { return createTime_; }
    set {
      createTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateExtInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateExtInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (UserProfile != other.UserProfile) return false;
    if (RoomID != other.RoomID) return false;
    if (State != other.State) return false;
    if (MaxPlayer != other.MaxPlayer) return false;
    if (Mode != other.Mode) return false;
    if (CanWatch != other.CanWatch) return false;
    if (RoomProperty != other.RoomProperty) return false;
    if (CreateFlag != other.CreateFlag) return false;
    if (CreateTime != other.CreateTime) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (State != 0) hash ^= State.GetHashCode();
    if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (CanWatch != 0) hash ^= CanWatch.GetHashCode();
    if (RoomProperty.Length != 0) hash ^= RoomProperty.GetHashCode();
    if (CreateFlag != 0) hash ^= CreateFlag.GetHashCode();
    if (CreateTime != 0UL) hash ^= CreateTime.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (UserProfile.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(UserProfile);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    if (State != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(State);
    }
    if (MaxPlayer != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(MaxPlayer);
    }
    if (Mode != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Mode);
    }
    if (CanWatch != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(CanWatch);
    }
    if (RoomProperty.Length != 0) {
      output.WriteRawTag(66);
      output.WriteBytes(RoomProperty);
    }
    if (CreateFlag != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(CreateFlag);
    }
    if (CreateTime != 0UL) {
      output.WriteRawTag(80);
      output.WriteUInt64(CreateTime);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (UserProfile.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
    }
    if (MaxPlayer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPlayer);
    }
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (CanWatch != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CanWatch);
    }
    if (RoomProperty.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoomProperty);
    }
    if (CreateFlag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateFlag);
    }
    if (CreateTime != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateTime);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateExtInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.UserProfile.Length != 0) {
      UserProfile = other.UserProfile;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.MaxPlayer != 0) {
      MaxPlayer = other.MaxPlayer;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.CanWatch != 0) {
      CanWatch = other.CanWatch;
    }
    if (other.RoomProperty.Length != 0) {
      RoomProperty = other.RoomProperty;
    }
    if (other.CreateFlag != 0) {
      CreateFlag = other.CreateFlag;
    }
    if (other.CreateTime != 0UL) {
      CreateTime = other.CreateTime;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 18: {
          UserProfile = input.ReadBytes();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 32: {
          State = input.ReadUInt32();
          break;
        }
        case 40: {
          MaxPlayer = input.ReadUInt32();
          break;
        }
        case 48: {
          Mode = input.ReadInt32();
          break;
        }
        case 56: {
          CanWatch = input.ReadInt32();
          break;
        }
        case 66: {
          RoomProperty = input.ReadBytes();
          break;
        }
        case 72: {
          CreateFlag = input.ReadUInt32();
          break;
        }
        case 80: {
          CreateTime = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///
///加入房间时传给GS的附加信息
/// </summary>
public sealed partial class JoinExtInfo : pb::IMessage<JoinExtInfo> {
  private static readonly pb::MessageParser<JoinExtInfo> _parser = new pb::MessageParser<JoinExtInfo>(() => new JoinExtInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JoinExtInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GsmvsReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinExtInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinExtInfo(JoinExtInfo other) : this() {
    userID_ = other.userID_;
    userProfile_ = other.userProfile_;
    roomID_ = other.roomID_;
    joinType_ = other.joinType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JoinExtInfo Clone() {
    return new JoinExtInfo(this);
  }

  /// <summary>Field number for the "userID" field.</summary>
  public const int UserIDFieldNumber = 1;
  private uint userID_;
  /// <summary>
  /// 加入房间的玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserID {
    get { return userID_; }
    set {
      userID_ = value;
    }
  }

  /// <summary>Field number for the "userProfile" field.</summary>
  public const int UserProfileFieldNumber = 2;
  private pb::ByteString userProfile_ = pb::ByteString.Empty;
  /// <summary>
  /// 加入房间的玩家属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString UserProfile {
    get { return userProfile_; }
    set {
      userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 3;
  private ulong roomID_;
  /// <summary>
  /// 要加入的房间ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "JoinType" field.</summary>
  public const int JoinTypeFieldNumber = 4;
  private uint joinType_;
  /// <summary>
  /// 随机加入、自定义属性加入、指定加入等
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint JoinType {
    get { return joinType_; }
    set {
      joinType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JoinExtInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JoinExtInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserID != other.UserID) return false;
    if (UserProfile != other.UserProfile) return false;
    if (RoomID != other.RoomID) return false;
    if (JoinType != other.JoinType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserID != 0) hash ^= UserID.GetHashCode();
    if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
    if (RoomID != 0UL) hash ^= RoomID.GetHashCode();
    if (JoinType != 0) hash ^= JoinType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserID != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserID);
    }
    if (UserProfile.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(UserProfile);
    }
    if (RoomID != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(RoomID);
    }
    if (JoinType != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(JoinType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserID);
    }
    if (UserProfile.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(UserProfile);
    }
    if (RoomID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoomID);
    }
    if (JoinType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JoinExtInfo other) {
    if (other == null) {
      return;
    }
    if (other.UserID != 0) {
      UserID = other.UserID;
    }
    if (other.UserProfile.Length != 0) {
      UserProfile = other.UserProfile;
    }
    if (other.RoomID != 0UL) {
      RoomID = other.RoomID;
    }
    if (other.JoinType != 0) {
      JoinType = other.JoinType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserID = input.ReadUInt32();
          break;
        }
        case 18: {
          UserProfile = input.ReadBytes();
          break;
        }
        case 24: {
          RoomID = input.ReadUInt64();
          break;
        }
        case 32: {
          JoinType = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
